// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_FlxUIDropDownHeader
#include <FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_FlxUIDropDownMenuCustom
#include <FlxUIDropDownMenuCustom.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_StageData
#include <StageData.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_editors_AttachedFlxText
#include <editors/AttachedFlxText.h>
#endif
#ifndef INCLUDED_editors_ChartingState
#include <editors/ChartingState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_92f3de805789c16b_51_new,"editors.ChartingState","new",0x7370efb7,"editors.ChartingState.new","editors/ChartingState.hx",51,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_144_create,"editors.ChartingState","create",0xd0313805,"editors.ChartingState.create","editors/ChartingState.hx",144,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_312_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",312,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_319_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",319,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_323_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",323,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_330_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",330,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_334_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",334,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_340_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",340,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_365_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",365,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_370_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",370,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_373_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",373,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_427_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",427,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_435_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",435,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_443_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",443,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_507_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",507,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_520_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",520,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_304_addSongUI,"editors.ChartingState","addSongUI",0x47b6bd01,"editors.ChartingState.addSongUI","editors/ChartingState.hx",304,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_603_addSectionUI,"editors.ChartingState","addSectionUI",0xa6bb32e1,"editors.ChartingState.addSectionUI","editors/ChartingState.hx",603,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_613_addSectionUI,"editors.ChartingState","addSectionUI",0xa6bb32e1,"editors.ChartingState.addSectionUI","editors/ChartingState.hx",613,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_628_addSectionUI,"editors.ChartingState","addSectionUI",0xa6bb32e1,"editors.ChartingState.addSectionUI","editors/ChartingState.hx",628,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_634_addSectionUI,"editors.ChartingState","addSectionUI",0xa6bb32e1,"editors.ChartingState.addSectionUI","editors/ChartingState.hx",634,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_649_addSectionUI,"editors.ChartingState","addSectionUI",0xa6bb32e1,"editors.ChartingState.addSectionUI","editors/ChartingState.hx",649,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_572_addSectionUI,"editors.ChartingState","addSectionUI",0xa6bb32e1,"editors.ChartingState.addSectionUI","editors/ChartingState.hx",572,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_733_addNoteUI,"editors.ChartingState","addNoteUI",0x4be3b25e,"editors.ChartingState.addNoteUI","editors/ChartingState.hx",733,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_689_addNoteUI,"editors.ChartingState","addNoteUI",0x4be3b25e,"editors.ChartingState.addNoteUI","editors/ChartingState.hx",689,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_787_addEventsUI,"editors.ChartingState","addEventsUI",0x362a5745,"editors.ChartingState.addEventsUI","editors/ChartingState.hx",787,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_755_addEventsUI,"editors.ChartingState","addEventsUI",0x362a5745,"editors.ChartingState.addEventsUI","editors/ChartingState.hx",755,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_833_addChartingUI,"editors.ChartingState","addChartingUI",0xdd416db0,"editors.ChartingState.addChartingUI","editors/ChartingState.hx",833,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_840_addChartingUI,"editors.ChartingState","addChartingUI",0xdd416db0,"editors.ChartingState.addChartingUI","editors/ChartingState.hx",840,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_847_addChartingUI,"editors.ChartingState","addChartingUI",0xdd416db0,"editors.ChartingState.addChartingUI","editors/ChartingState.hx",847,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_860_addChartingUI,"editors.ChartingState","addChartingUI",0xdd416db0,"editors.ChartingState.addChartingUI","editors/ChartingState.hx",860,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_824_addChartingUI,"editors.ChartingState","addChartingUI",0xdd416db0,"editors.ChartingState.addChartingUI","editors/ChartingState.hx",824,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_907_loadSong,"editors.ChartingState","loadSong",0xb9f6da64,"editors.ChartingState.loadSong","editors/ChartingState.hx",907,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_932_generateSong,"editors.ChartingState","generateSong",0x3e41ab73,"editors.ChartingState.generateSong","editors/ChartingState.hx",932,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_926_generateSong,"editors.ChartingState","generateSong",0x3e41ab73,"editors.ChartingState.generateSong","editors/ChartingState.hx",926,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_949_generateUI,"editors.ChartingState","generateUI",0xb4da2a52,"editors.ChartingState.generateUI","editors/ChartingState.hx",949,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_969_getEvent,"editors.ChartingState","getEvent",0xd29abced,"editors.ChartingState.getEvent","editors/ChartingState.hx",969,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1068_sectionStartTime,"editors.ChartingState","sectionStartTime",0x8aa29133,"editors.ChartingState.sectionStartTime","editors/ChartingState.hx",1068,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1339_update,"editors.ChartingState","update",0xdb275712,"editors.ChartingState.update","editors/ChartingState.hx",1339,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1085_update,"editors.ChartingState","update",0xdb275712,"editors.ChartingState.update","editors/ChartingState.hx",1085,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1128_update,"editors.ChartingState","update",0xdb275712,"editors.ChartingState.update","editors/ChartingState.hx",1128,0x5a24859a)
static const bool _hx_array_data_fecb4845_67[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1385_updateZoom,"editors.ChartingState","updateZoom",0x70271745,"editors.ChartingState.updateZoom","editors/ChartingState.hx",1385,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1394_loadAudioBuffer,"editors.ChartingState","loadAudioBuffer",0x11b6b7c7,"editors.ChartingState.loadAudioBuffer","editors/ChartingState.hx",1394,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1427_reloadGridLayer,"editors.ChartingState","reloadGridLayer",0x3b92ec69,"editors.ChartingState.reloadGridLayer","editors/ChartingState.hx",1427,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1451_updateWaveform,"editors.ChartingState","updateWaveform",0x84ec0caf,"editors.ChartingState.updateWaveform","editors/ChartingState.hx",1451,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1527_changeNoteSustain,"editors.ChartingState","changeNoteSustain",0x21f914d8,"editors.ChartingState.changeNoteSustain","editors/ChartingState.hx",1527,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1542_recalculateSteps,"editors.ChartingState","recalculateSteps",0xe637319d,"editors.ChartingState.recalculateSteps","editors/ChartingState.hx",1542,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1561_resetSection,"editors.ChartingState","resetSection",0xeecc099f,"editors.ChartingState.resetSection","editors/ChartingState.hx",1561,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1586_changeSection,"editors.ChartingState","changeSection",0xd29cfc6c,"editors.ChartingState.changeSection","editors/ChartingState.hx",1586,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1627_updateSectionUI,"editors.ChartingState","updateSectionUI",0x06166a07,"editors.ChartingState.updateSectionUI","editors/ChartingState.hx",1627,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1640_updateHeads,"editors.ChartingState","updateHeads",0x4e300ae1,"editors.ChartingState.updateHeads","editors/ChartingState.hx",1640,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1656_loadHealthIconFromCharacter,"editors.ChartingState","loadHealthIconFromCharacter",0x773bb03b,"editors.ChartingState.loadHealthIconFromCharacter","editors/ChartingState.hx",1656,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1685_updateNoteUI,"editors.ChartingState","updateNoteUI",0x508f2778,"editors.ChartingState.updateNoteUI","editors/ChartingState.hx",1685,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1710_updateGrid,"editors.ChartingState","updateGrid",0x639a4af8,"editors.ChartingState.updateGrid","editors/ChartingState.hx",1710,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1800_setupNoteData,"editors.ChartingState","setupNoteData",0x15a67cf0,"editors.ChartingState.setupNoteData","editors/ChartingState.hx",1800,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1838_setupSusNote,"editors.ChartingState","setupSusNote",0xbe283aef,"editors.ChartingState.setupSusNote","editors/ChartingState.hx",1838,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1849_addSection,"editors.ChartingState","addSection",0x2bdbbb4d,"editors.ChartingState.addSection","editors/ChartingState.hx",1849,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1864_selectNote,"editors.ChartingState","selectNote",0x1e1f1697,"editors.ChartingState.selectNote","editors/ChartingState.hx",1864,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1882_deleteNote,"editors.ChartingState","deleteNote",0x02d07f46,"editors.ChartingState.deleteNote","editors/ChartingState.hx",1882,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1901_clearSong,"editors.ChartingState","clearSong",0x2222c699,"editors.ChartingState.clearSong","editors/ChartingState.hx",1901,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1911_addNote,"editors.ChartingState","addNote",0xcebc718a,"editors.ChartingState.addNote","editors/ChartingState.hx",1911,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1943_getStrumTime,"editors.ChartingState","getStrumTime",0x228d8849,"editors.ChartingState.getStrumTime","editors/ChartingState.hx",1943,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1950_getYfromStrum,"editors.ChartingState","getYfromStrum",0x8c369e33,"editors.ChartingState.getYfromStrum","editors/ChartingState.hx",1950,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1983_loadLevel,"editors.ChartingState","loadLevel",0xefa41c15,"editors.ChartingState.loadLevel","editors/ChartingState.hx",1983,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1987_getNotes,"editors.ChartingState","getNotes",0xfca0d114,"editors.ChartingState.getNotes","editors/ChartingState.hx",1987,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_1999_loadJson,"editors.ChartingState","loadJson",0xb406f8b7,"editors.ChartingState.loadJson","editors/ChartingState.hx",1999,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_2005_autosaveSong,"editors.ChartingState","autosaveSong",0x86c1e1ea,"editors.ChartingState.autosaveSong","editors/ChartingState.hx",2005,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_2012_clearEvents,"editors.ChartingState","clearEvents",0x6e362add,"editors.ChartingState.clearEvents","editors/ChartingState.hx",2012,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_2028_saveLevel,"editors.ChartingState","saveLevel",0x6319d79e,"editors.ChartingState.saveLevel","editors/ChartingState.hx",2028,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_2046_saveEvents,"editors.ChartingState","saveEvents",0x459d63bf,"editors.ChartingState.saveEvents","editors/ChartingState.hx",2046,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_2103_onSaveComplete,"editors.ChartingState","onSaveComplete",0x1a972ede,"editors.ChartingState.onSaveComplete","editors/ChartingState.hx",2103,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_2115_onSaveCancel,"editors.ChartingState","onSaveCancel",0xf846d85f,"editors.ChartingState.onSaveCancel","editors/ChartingState.hx",2115,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_2126_onSaveError,"editors.ChartingState","onSaveError",0x67f88483,"editors.ChartingState.onSaveError","editors/ChartingState.hx",2126,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_54_boot,"editors.ChartingState","boot",0x8779d0fb,"editors.ChartingState.boot","editors/ChartingState.hx",54,0x5a24859a)
static const ::String _hx_array_data_fecb4845_114[] = {
	HX_("",00,00,00,00),HX_("Alt Animation",0d,81,c1,cd),HX_("Hey!",e5,69,e4,2f),HX_("Hurt Note",a3,41,9e,fe),
};
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_88_boot,"editors.ChartingState","boot",0x8779d0fb,"editors.ChartingState.boot","editors/ChartingState.hx",88,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_89_boot,"editors.ChartingState","boot",0x8779d0fb,"editors.ChartingState.boot","editors/ChartingState.hx",89,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_90_boot,"editors.ChartingState","boot",0x8779d0fb,"editors.ChartingState.boot","editors/ChartingState.hx",90,0x5a24859a)
HX_LOCAL_STACK_FRAME(_hx_pos_92f3de805789c16b_102_boot,"editors.ChartingState","boot",0x8779d0fb,"editors.ChartingState.boot","editors/ChartingState.hx",102,0x5a24859a)
namespace editors{

void ChartingState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_51_new)
HXLINE(1979)		this->daSpacing = ((Float)0.3);
HXLINE(1450)		this->audioBuffers = ::Array_obj< ::Dynamic>::__new(2)->init(0,null())->init(1,null());
HXLINE(1083)		this->colorSine = ((Float)0);
HXLINE(1057)		this->updatedSection = false;
HXLINE( 686)		this->currentType = 0;
HXLINE( 568)		this->sectionToCopy = 0;
HXLINE( 298)		this->playSoundDad = null();
HXLINE( 297)		this->playSoundBf = null();
HXLINE( 296)		this->check_mute_inst = null();
HXLINE( 138)		this->blockPressWhileScrolling = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 137)		this->blockPressWhileTypingOn = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 134)		this->zoomMult = 1;
HXLINE( 126)		this->vocals = null();
HXLINE( 124)		this->tempBpm = ((Float)0);
HXLINE( 116)		this->curZoom = ((Float)1);
HXLINE( 115)		this->gridMult = 2;
HXLINE( 103)		this->CAM_OFFSET = 360;
HXLINE(  97)		this->amountSteps = 0;
HXLINE(  96)		this->curSong = HX_("Dadbattle",9f,4a,7c,48);
HXLINE(  64)		this->eventStuff = ::cpp::VirtualArray_obj::__new(13)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,HX_("Nothing. Yep, that's right.",66,d5,5d,e8)))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Hey!",e5,69,e4,2f))->init(1,HX_("Plays the \"Hey!\" animation from Bopeebo,\nValue 1: 0 = Only Boyfriend, 1 = Only Girlfriend,\nSomething else = Both.\nValue 2: Custom animation duration,\nleave it blank for 0.6s",13,6a,de,59)))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Set GF Speed",04,ff,9a,c4))->init(1,HX_("Sets GF head bopping speed,\nValue 1: 1 = Normal speed,\n2 = 1/2 speed, 4 = 1/4 speed etc.\nUsed on Fresh during the beatbox parts.\n\nWarning: Value must be integer!",bd,c7,5a,eb)))->init(3,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Blammed Lights",67,27,0e,26))->init(1,HX_("Value 1: 0 = Turn off, 1 = Blue, 2 = Green,\n3 = Pink, 4 = Red, 5 = Orange, Anything else = Random.",48,b9,2a,ab)))->init(4,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Kill Henchmen",e2,fc,7b,01))->init(1,HX_("For Mom's songs, don't use this please, i love them :(",80,c5,4b,54)))->init(5,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Add Camera Zoom",cf,55,a6,44))->init(1,HX_("Used on MILF on that one \"hard\" part\nValue 1: Camera zoom add (Default: 0.015)\nValue 2: UI zoom add (Default: 0.03)\nLeave the values blank if you want to use Default.",ce,dd,83,e8)))->init(6,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("BG Freaks Expression",4d,76,b1,17))->init(1,HX_("Should be used only in \"school\" Stage!",dd,fb,c9,a2)))->init(7,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Trigger BG Ghouls",e1,1f,5c,88))->init(1,HX_("Should be used only in \"schoolEvil\" Stage!",91,8c,94,81)))->init(8,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Play Animation",d8,05,5f,0c))->init(1,HX_("Plays an animation on a Character,\nonce the animation is completed,\nthe animation changes to Idle\n\nValue 1: Animation to play.\nValue 2: Character (0 = Dad, 1 = BF, 2 = GF)",a9,1f,bc,46)))->init(9,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Camera Follow Pos",e0,d4,b1,c4))->init(1,HX_("Value 1: X\nValue 2: Y\n\nThe camera won't change the follow point\nafter using this, for getting it back\nto normal, leave both values blank.",c6,8e,5e,fa)))->init(10,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Alt Idle Animation",2f,00,fa,18))->init(1,HX_("Sets a speciied suffix after the idle animation name.\nYou can use this to trigger 'idle-alt' if you set\nValue 2 to -alt\n\nValue 1: Character to set (0 = Dad, 1 = BF, 2 = GF)\nValue 2: New suffix (Leave it blank to disable)",03,e0,e6,7e)))->init(11,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Screen Shake",12,bb,51,4b))->init(1,HX_("Value 1: Camera shake\nValue 2: HUD shake\n\nEvery value works as the following example: \"1, 0.05\".\nThe first number (1) is the duration.\nThe second number (0.05) is the intensity.",ac,9a,68,86)))->init(12,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Change Character",f9,50,ef,9c))->init(1,HX_("Value 1: Character to change\nValue 2: New character's name\n\nOn Value 1, Boyfriend is 0,\nDad is 1 and Girlfriend is 2",fb,3c,4b,ce)));
HXLINE(  61)		this->noteTypeMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  60)		this->noteTypeIntMap =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  51)		super::__construct(TransIn,TransOut);
            	}

Dynamic ChartingState_obj::__CreateEmpty() { return new ChartingState_obj; }

void *ChartingState_obj::_hx_vtable = 0;

Dynamic ChartingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChartingState_obj > _hx_result = new ChartingState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ChartingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x77dae98b || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ChartingState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_144_create)
HXLINE( 147)		::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_("-",2d,00,00,00),HX_(" ",20,00,00,00)),null(),null(),null());
HXLINE( 150)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 150)		::String library = null();
HXDLIN( 150)		 ::flixel::graphics::FlxGraphic imageToReturn = ::Paths_obj::addCustomGraphic(HX_("menuDesat",26,91,04,72));
HXDLIN( 150)		 ::Dynamic bg1;
HXDLIN( 150)		if (::hx::IsNotNull( imageToReturn )) {
HXLINE( 150)			bg1 = imageToReturn;
            		}
            		else {
HXLINE( 150)			bg1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menuDesat",26,91,04,72)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
            		}
HXDLIN( 150)		 ::flixel::FlxSprite bg2 = bg->loadGraphic(bg1,null(),null(),null(),null(),null());
HXLINE( 151)		bg2->scrollFactor->set(null(),null());
HXLINE( 152)		bg2->set_color(-14540254);
HXLINE( 153)		this->add(bg2);
HXLINE( 155)		this->gridLayer =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 156)		this->add(this->gridLayer);
HXLINE( 158)		this->waveformSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::editors::ChartingState_obj::GRID_SIZE,0,null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,16777215,null(),null());
HXLINE( 159)		this->add(this->waveformSprite);
HXLINE( 161)		 ::flixel::FlxSprite eventIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(-(::editors::ChartingState_obj::GRID_SIZE) - 5),-90,null());
HXDLIN( 161)		::String library1 = null();
HXDLIN( 161)		 ::flixel::graphics::FlxGraphic imageToReturn1 = ::Paths_obj::addCustomGraphic(HX_("eventArrow",4f,83,ea,a1));
HXDLIN( 161)		 ::Dynamic eventIcon1;
HXDLIN( 161)		if (::hx::IsNotNull( imageToReturn1 )) {
HXLINE( 161)			eventIcon1 = imageToReturn1;
            		}
            		else {
HXLINE( 161)			eventIcon1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("eventArrow",4f,83,ea,a1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1);
            		}
HXDLIN( 161)		 ::flixel::FlxSprite eventIcon2 = eventIcon->loadGraphic(eventIcon1,null(),null(),null(),null(),null());
HXLINE( 162)		this->leftIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,HX_("bf",c4,55,00,00),null());
HXLINE( 163)		this->rightIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,HX_("dad",47,36,4c,00),null());
HXLINE( 164)		eventIcon2->scrollFactor->set(1,1);
HXLINE( 165)		this->leftIcon->scrollFactor->set(1,1);
HXLINE( 166)		this->rightIcon->scrollFactor->set(1,1);
HXLINE( 168)		eventIcon2->setGraphicSize(30,30);
HXLINE( 169)		this->leftIcon->setGraphicSize(0,45);
HXLINE( 170)		this->rightIcon->setGraphicSize(0,45);
HXLINE( 172)		this->add(eventIcon2);
HXLINE( 173)		this->add(this->leftIcon);
HXLINE( 174)		this->add(this->rightIcon);
HXLINE( 176)		this->leftIcon->setPosition((::editors::ChartingState_obj::GRID_SIZE + 10),-100);
HXLINE( 177)		this->rightIcon->setPosition((( (Float)(::editors::ChartingState_obj::GRID_SIZE) ) * ((Float)5.2)),-100);
HXLINE( 179)		this->curRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 180)		this->curRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 181)		this->curRenderedNoteType =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 183)		this->nextRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 184)		this->nextRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 186)		if (::hx::IsNotNull( ::PlayState_obj::SONG )) {
HXLINE( 187)			this->_song = ::PlayState_obj::SONG;
            		}
            		else {
HXLINE( 190)			this->_song =  ::Dynamic(::hx::Anon_obj::Create(12)
            				->setFixed(0,HX_("speed",87,97,69,81),( (Float)(1) ))
            				->setFixed(1,HX_("stage",be,6a,0b,84),HX_("stage",be,6a,0b,84))
            				->setFixed(2,HX_("player1",b0,09,15,8a),HX_("bf",c4,55,00,00))
            				->setFixed(3,HX_("player2",b1,09,15,8a),HX_("dad",47,36,4c,00))
            				->setFixed(4,HX_("player3",b2,09,15,8a),HX_("gf",1f,5a,00,00))
            				->setFixed(5,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(6,HX_("splashSkin",84,03,e1,a1),HX_("",00,00,00,00))
            				->setFixed(7,HX_("validScore",b6,dc,18,c7),false)
            				->setFixed(8,HX_("bpm",df,be,4a,00),((Float)150.0))
            				->setFixed(9,HX_("arrowSkin",e6,d4,f8,07),HX_("",00,00,00,00))
            				->setFixed(10,HX_("needsVoices",be,05,e9,0d),true)
            				->setFixed(11,HX_("song",d5,23,58,4c),HX_("Test",72,f4,d2,37)));
            		}
HXLINE( 206)		if ((::editors::ChartingState_obj::curSection >= ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length)) {
HXLINE( 206)			::editors::ChartingState_obj::curSection = (( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1);
            		}
HXLINE( 208)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 209)		::flixel::FlxG_obj::save->bind(HX_("funkin",31,b2,4f,6f),HX_("ninjamuffin99",f7,4c,e5,00));
HXLINE( 211)		this->tempBpm = ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 213)		this->addSection(null());
HXLINE( 217)		this->currentSongName = ::StringTools_obj::replace(( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE( 218)		this->loadAudioBuffer();
HXLINE( 219)		this->reloadGridLayer();
HXLINE( 220)		this->loadSong();
HXLINE( 221)		::Conductor_obj::changeBPM(( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 222)		::Conductor_obj::mapBPMChanges(this->_song);
HXLINE( 224)		this->bpmTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1000,50,0,HX_("",00,00,00,00),16,null());
HXLINE( 225)		this->bpmTxt->scrollFactor->set(null(),null());
HXLINE( 226)		this->add(this->bpmTxt);
HXLINE( 228)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null());
HXDLIN( 228)		this->strumLine = _hx_tmp->makeGraphic(::Std_obj::_hx_int(( (Float)((::editors::ChartingState_obj::GRID_SIZE * 9)) )),4,null(),null(),null());
HXLINE( 229)		this->add(this->strumLine);
HXLINE( 231)		this->camPos =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 232)		this->camPos->setPosition((this->strumLine->x + this->CAM_OFFSET),this->strumLine->y);
HXLINE( 234)		this->dummyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::editors::ChartingState_obj::GRID_SIZE,::editors::ChartingState_obj::GRID_SIZE,null(),null(),null());
HXLINE( 235)		this->add(this->dummyArrow);
HXLINE( 237)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(5)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Song",f5,4f,31,37))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song",f5,4f,31,37))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Section",c5,2d,29,2b))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Section",c5,2d,29,2b))))->init(2, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Note",12,44,e3,33))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Note",12,44,e3,33))))->init(3, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Events",39,c3,fe,ca))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Events",39,c3,fe,ca))))->init(4, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Charting",e4,0a,35,96))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Charting",e4,0a,35,96))));
HXLINE( 245)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 247)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 248)		this->UI_box->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + (( (Float)(::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ))));
HXLINE( 249)		this->UI_box->set_y(( (Float)(25) ));
HXLINE( 251)		Float tipText = this->UI_box->x;
HXDLIN( 251)		Float tipText1 = this->UI_box->y;
HXDLIN( 251)		 ::flixel::text::FlxText tipText2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,tipText,((tipText1 + this->UI_box->get_height()) + 6),0,HX_("W/S or Mouse Wheel - Change Conductor's strum time\n\t\t\t\nA or Left/D or Right - Go to the previous/next section\n\t\t\t\nHold Shift to move 4x faster\n\t\t\t\nHold Control and click on an arrow to select it\n\t\t\t\nZ/X - Zoom in/out\n\t\t\t\n\n\t\t\t\nEnter - Test your chart\n\t\t\t\nQ/E - Decrease/Increase Note Sustain Length\n\t\t\t\nSpace - Stop/Resume song\n\t\t\t\nR - Reset section\n",f1,ab,71,d9),16,null());
HXLINE( 262)		tipText2->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE( 264)		tipText2->scrollFactor->set(null(),null());
HXLINE( 265)		this->add(tipText2);
HXLINE( 266)		this->add(this->UI_box);
HXLINE( 268)		this->addSongUI();
HXLINE( 269)		this->addSectionUI();
HXLINE( 270)		this->addNoteUI();
HXLINE( 271)		this->addEventsUI();
HXLINE( 272)		this->addChartingUI();
HXLINE( 273)		this->updateHeads();
HXLINE( 274)		this->updateWaveform();
HXLINE( 275)		this->UI_box->set_selected_tab(4);
HXLINE( 277)		this->add(this->curRenderedSustains);
HXLINE( 278)		this->add(this->curRenderedNotes);
HXLINE( 279)		this->add(this->curRenderedNoteType);
HXLINE( 280)		this->add(this->nextRenderedSustains);
HXLINE( 281)		this->add(this->nextRenderedNotes);
HXLINE( 283)		if ((::editors::ChartingState_obj::lastSong != this->currentSongName)) {
HXLINE( 284)			this->changeSection(null(),null());
            		}
HXLINE( 286)		::editors::ChartingState_obj::lastSong = this->currentSongName;
HXLINE( 288)		this->zoomTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,HX_("Zoom: 1x",00,b8,43,6e),16,null());
HXLINE( 289)		this->zoomTxt->scrollFactor->set(null(),null());
HXLINE( 290)		this->add(this->zoomTxt);
HXLINE( 292)		this->updateGrid();
HXLINE( 293)		this->super::create();
            	}


void ChartingState_obj::addSongUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::editors::ChartingState,_gthis, ::flixel::addons::ui::FlxUICheckBox,check_voices) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_312_addSongUI)
HXLINE( 313)			_gthis->_song->__SetField(HX_("needsVoices",be,05,e9,0d),check_voices->checked,::hx::paccDynamic);
HXLINE( 314)			::haxe::Log_obj::trace(HX_("CHECKED!",3a,9f,7d,06),::hx::SourceInfo(HX_("source/editors/ChartingState.hx",8e,d0,8b,e6),314,HX_("editors.ChartingState",45,48,cb,fe),HX_("addSongUI",6a,02,ad,e5)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_319_addSongUI)
HXLINE( 319)			_gthis->saveLevel();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_323_addSongUI)
HXLINE( 324)			::String reloadSong = ::StringTools_obj::replace(_gthis->UI_songTitle->text.toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXDLIN( 324)			_gthis->currentSongName = reloadSong;
HXLINE( 325)			_gthis->loadSong();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_330_addSongUI)
HXLINE( 330)			 ::editors::ChartingState _gthis1 = _gthis;
HXDLIN( 330)			_gthis1->loadJson(( (::String)(_gthis->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_334_addSongUI)
HXLINE( 335)			::PlayState_obj::SONG = ::Song_obj::parseJSONshit(( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("autosave",2c,4e,9a,44),::hx::paccDynamic)) ));
HXLINE( 336)			::MusicBeatState_obj::resetState();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_340_addSongUI)
HXLINE( 341)			::String songName = ::StringTools_obj::replace(( (::String)(_gthis->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE( 342)			::String library = null();
HXDLIN( 342)			::String file = ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (songName + HX_("/events",88,1c,db,38))) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library);
HXLINE( 344)			bool loadEventJson;
HXDLIN( 344)			if (!(::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + ((HX_("data/",c5,0e,88,d4) + (songName + HX_("/events",88,1c,db,38))) + HX_(".json",56,f1,d6,c2)))))) {
HXLINE( 344)				loadEventJson = ::sys::FileSystem_obj::exists(file);
            			}
            			else {
HXLINE( 344)				loadEventJson = true;
            			}
HXDLIN( 344)			if (loadEventJson) {
HXLINE( 349)				_gthis->clearEvents();
HXLINE( 350)				 ::Dynamic events = ::Song_obj::loadFromJson(HX_("events",19,4f,6a,96),songName);
HXLINE( 351)				{
HXLINE( 351)					int _g = 0;
HXDLIN( 351)					int _g1 = ( (::Array< ::Dynamic>)(events->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN( 351)					while((_g < _g1)){
HXLINE( 351)						_g = (_g + 1);
HXDLIN( 351)						int sec = (_g - 1);
HXLINE( 352)						{
HXLINE( 352)							int _g1 = 0;
HXDLIN( 352)							int _g2 = ( (::cpp::VirtualArray)( ::Dynamic(events->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length();
HXDLIN( 352)							while((_g1 < _g2)){
HXLINE( 352)								_g1 = (_g1 + 1);
HXDLIN( 352)								int noteId = (_g1 - 1);
HXLINE( 353)								::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(events->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(noteId)) );
HXLINE( 354)								bool loadEventJson;
HXDLIN( 354)								if (::hx::IsNotNull( note )) {
HXLINE( 354)									loadEventJson = ::hx::IsLess( note->__get(1),0 );
            								}
            								else {
HXLINE( 354)									loadEventJson = false;
            								}
HXDLIN( 354)								if (loadEventJson) {
HXLINE( 355)									( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(5)->init(0,note->__get(0))->init(1,note->__get(1))->init(2,note->__get(2))->init(3,note->__get(3))->init(4,note->__get(4)));
            								}
            							}
            						}
            					}
            				}
HXLINE( 359)				_gthis->changeSection(::editors::ChartingState_obj::curSection,null());
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_365_addSongUI)
HXLINE( 365)			_gthis->saveEvents();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_370_addSongUI)
HXLINE( 370)			_gthis->clearEvents();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_373_addSongUI)
HXLINE( 374)			{
HXLINE( 374)				int _g = 0;
HXDLIN( 374)				int _g1 = ( (::Array< ::Dynamic>)(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN( 374)				while((_g < _g1)){
HXLINE( 374)					_g = (_g + 1);
HXDLIN( 374)					int sec = (_g - 1);
HXLINE( 375)					int count = 0;
HXLINE( 376)					while((count < ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length())){
HXLINE( 377)						::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(count)) );
HXLINE( 378)						bool clear_notes;
HXDLIN( 378)						if (::hx::IsNotNull( note )) {
HXLINE( 378)							clear_notes = ::hx::IsGreater( note->__get(1),-1 );
            						}
            						else {
HXLINE( 378)							clear_notes = false;
            						}
HXDLIN( 378)						if (clear_notes) {
HXLINE( 379)							( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(note);
            						}
            						else {
HXLINE( 381)							count = (count + 1);
            						}
            					}
            				}
            			}
HXLINE( 385)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_9, ::editors::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_427_addSongUI)
HXLINE( 428)			::Array< ::String > characters1 = characters;
HXDLIN( 428)			 ::Dynamic player1DropDown = ::Std_obj::parseInt(character);
HXDLIN( 428)			_gthis->_song->__SetField(HX_("player1",b0,09,15,8a),characters1->__get(( (int)(player1DropDown) )),::hx::paccDynamic);
HXLINE( 429)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_10, ::editors::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_435_addSongUI)
HXLINE( 436)			::Array< ::String > characters1 = characters;
HXDLIN( 436)			 ::Dynamic player3DropDown = ::Std_obj::parseInt(character);
HXDLIN( 436)			_gthis->_song->__SetField(HX_("player3",b2,09,15,8a),characters1->__get(( (int)(player3DropDown) )),::hx::paccDynamic);
HXLINE( 437)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_11, ::editors::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_443_addSongUI)
HXLINE( 444)			::Array< ::String > characters1 = characters;
HXDLIN( 444)			 ::Dynamic player2DropDown = ::Std_obj::parseInt(character);
HXDLIN( 444)			_gthis->_song->__SetField(HX_("player2",b1,09,15,8a),characters1->__get(( (int)(player2DropDown) )),::hx::paccDynamic);
HXLINE( 445)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_12,::Array< ::String >,stages, ::editors::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_507_addSongUI)
HXLINE( 507)			::Array< ::String > stages1 = stages;
HXDLIN( 507)			 ::Dynamic _hx_tmp = ::Std_obj::parseInt(character);
HXDLIN( 507)			_gthis->_song->__SetField(HX_("stage",be,6a,0b,84),stages1->__get(( (int)(_hx_tmp) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_520_addSongUI)
HXLINE( 521)			_gthis->_song->__SetField(HX_("arrowSkin",e6,d4,f8,07),_gthis->noteSkinInputText->text,::hx::paccDynamic);
HXLINE( 522)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_304_addSongUI)
HXLINE( 303)		 ::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 305)		this->UI_songTitle =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,10,70,( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),8,null(),null(),null());
HXLINE( 306)		this->blockPressWhileTypingOn->push(this->UI_songTitle);
HXLINE( 308)		 ::flixel::addons::ui::FlxUICheckBox check_voices =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,25,null(),null(),HX_("Has voice track",b7,2b,b0,eb),100,null(),null());
HXLINE( 309)		check_voices->set_checked(( (bool)(this->_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) ));
HXLINE( 311)		check_voices->callback =  ::Dynamic(new _hx_Closure_0(_gthis,check_voices));
HXLINE( 317)		 ::flixel::ui::FlxButton saveButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,8,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 322)		 ::flixel::ui::FlxButton reloadSong =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(saveButton->x + 90),saveButton->y,HX_("Reload Audio",cf,9c,c1,ed), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 328)		 ::flixel::ui::FlxButton reloadSongJson =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong->x,(saveButton->y + 30),HX_("Reload JSON",2f,1c,a5,4a), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 333)		 ::flixel::ui::FlxButton loadAutosaveBtn =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSongJson->x,(reloadSongJson->y + 30),HX_("Load Autosave",66,6b,fc,a4), ::Dynamic(new _hx_Closure_4()));
HXLINE( 339)		 ::flixel::ui::FlxButton loadEventJson =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,loadAutosaveBtn->x,(loadAutosaveBtn->y + 30),HX_("Load Events",d3,c9,2c,e5), ::Dynamic(new _hx_Closure_5(_gthis)));
HXLINE( 363)		 ::flixel::ui::FlxButton saveEvents =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,reloadSongJson->y,HX_("Save Events",9c,39,2f,6e), ::Dynamic(new _hx_Closure_6(_gthis)));
HXLINE( 368)		 ::flixel::ui::FlxButton clear_events =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,320,310,HX_("Clear events",6c,fd,58,9f), ::Dynamic(new _hx_Closure_7(_gthis)));
HXLINE( 372)		 ::flixel::ui::FlxButton clear_notes =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,320,(clear_events->y + 30),HX_("Clear notes",4e,99,c1,ae), ::Dynamic(new _hx_Closure_8(_gthis)));
HXLINE( 388)		 ::flixel::addons::ui::FlxUINumericStepper stepperBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,70,1,1,1,339,1,null(),null(),null(),null(),null());
HXLINE( 389)		stepperBPM->set_value(::Conductor_obj::bpm);
HXLINE( 390)		stepperBPM->name = HX_("song_bpm",35,36,15,42);
HXLINE( 392)		 ::flixel::addons::ui::FlxUINumericStepper stepperSpeed =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,(stepperBPM->y + 35),((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE( 393)		stepperSpeed->set_value(( (Float)(this->_song->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE( 394)		stepperSpeed->name = HX_("song_speed",5d,10,41,a4);
HXLINE( 397)		::Array< ::String > directories = ::Array_obj< ::String >::__new(2)->init(0,(HX_("mods/",9e,2f,58,0c) + HX_("characters/",45,3c,bf,be)))->init(1,(HX_("assets/",4c,2a,dc,36) + HX_("characters/",45,3c,bf,be)));
HXLINE( 402)		 ::haxe::ds::StringMap tempMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 403)		::String library = null();
HXDLIN( 403)		::Array< ::String > characters = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("characterList",a7,ac,9f,40)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 404)		{
HXLINE( 404)			int _g = 0;
HXDLIN( 404)			int _g1 = characters->length;
HXDLIN( 404)			while((_g < _g1)){
HXLINE( 404)				_g = (_g + 1);
HXDLIN( 404)				int i = (_g - 1);
HXLINE( 405)				tempMap->set(characters->__get(i),true);
            			}
            		}
HXLINE( 409)		{
HXLINE( 409)			int _g2 = 0;
HXDLIN( 409)			int _g3 = directories->length;
HXDLIN( 409)			while((_g2 < _g3)){
HXLINE( 409)				_g2 = (_g2 + 1);
HXDLIN( 409)				int i = (_g2 - 1);
HXLINE( 410)				::String directory = directories->__get(i);
HXLINE( 411)				if (::sys::FileSystem_obj::exists(directory)) {
HXLINE( 412)					int _g = 0;
HXDLIN( 412)					::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN( 412)					while((_g < _g1->length)){
HXLINE( 412)						::String file = _g1->__get(_g);
HXDLIN( 412)						_g = (_g + 1);
HXLINE( 413)						::String path = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,directory)->init(1,file));
HXLINE( 414)						bool _hx_tmp;
HXDLIN( 414)						if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE( 414)							_hx_tmp = ::StringTools_obj::endsWith(file,HX_(".json",56,f1,d6,c2));
            						}
            						else {
HXLINE( 414)							_hx_tmp = false;
            						}
HXDLIN( 414)						if (_hx_tmp) {
HXLINE( 415)							::String charToCheck = file.substr(0,(file.length - 5));
HXLINE( 416)							bool _hx_tmp;
HXDLIN( 416)							if (!(::StringTools_obj::endsWith(charToCheck,HX_("-dead",51,69,6e,2b)))) {
HXLINE( 416)								_hx_tmp = !(tempMap->exists(charToCheck));
            							}
            							else {
HXLINE( 416)								_hx_tmp = false;
            							}
HXDLIN( 416)							if (_hx_tmp) {
HXLINE( 417)								tempMap->set(charToCheck,true);
HXLINE( 418)								characters->push(charToCheck);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 426)		Float player1DropDown = (stepperSpeed->y + 45);
HXDLIN( 426)		 ::FlxUIDropDownMenuCustom player1DropDown1 =  ::FlxUIDropDownMenuCustom_obj::__alloc( HX_CTX ,10,player1DropDown,::FlxUIDropDownMenuCustom_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_9(_gthis,characters)),null(),null(),null(),null());
HXLINE( 431)		player1DropDown1->set_selectedLabel(( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 432)		this->blockPressWhileScrolling->push(player1DropDown1);
HXLINE( 434)		Float player1DropDown2 = player1DropDown1->x;
HXDLIN( 434)		Float player3DropDown = (player1DropDown1->y + 40);
HXDLIN( 434)		 ::FlxUIDropDownMenuCustom player3DropDown1 =  ::FlxUIDropDownMenuCustom_obj::__alloc( HX_CTX ,player1DropDown2,player3DropDown,::FlxUIDropDownMenuCustom_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_10(_gthis,characters)),null(),null(),null(),null());
HXLINE( 439)		player3DropDown1->set_selectedLabel(( (::String)(this->_song->__Field(HX_("player3",b2,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 440)		this->blockPressWhileScrolling->push(player3DropDown1);
HXLINE( 442)		Float player1DropDown3 = player1DropDown1->x;
HXDLIN( 442)		Float player2DropDown = (player3DropDown1->y + 40);
HXDLIN( 442)		 ::FlxUIDropDownMenuCustom player2DropDown1 =  ::FlxUIDropDownMenuCustom_obj::__alloc( HX_CTX ,player1DropDown3,player2DropDown,::FlxUIDropDownMenuCustom_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_11(_gthis,characters)),null(),null(),null(),null());
HXLINE( 447)		player2DropDown1->set_selectedLabel(( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 448)		this->blockPressWhileScrolling->push(player2DropDown1);
HXLINE( 451)		::Array< ::String > directories1 = ::Array_obj< ::String >::__new(2)->init(0,(HX_("mods/",9e,2f,58,0c) + HX_("stages/",9a,7a,ca,2d)))->init(1,(HX_("assets/",4c,2a,dc,36) + HX_("stages/",9a,7a,ca,2d)));
HXLINE( 456)		tempMap->clear();
HXLINE( 457)		::String library1 = null();
HXDLIN( 457)		::Array< ::String > stages = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("stageList",3c,ea,b6,f7)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE( 458)		int i = 0;
HXLINE( 459)		int stageLength = stages->length;
HXLINE( 460)		while((i < stageLength)){
HXLINE( 461)			bool removeStage = true;
HXLINE( 462)			{
HXLINE( 462)				int _g = 0;
HXDLIN( 462)				int _g1 = directories1->length;
HXDLIN( 462)				while((_g < _g1)){
HXLINE( 462)					_g = (_g + 1);
HXDLIN( 462)					int j = (_g - 1);
HXLINE( 463)					::String file = ((directories1->__get(j) + stages->__get(i)) + HX_(".json",56,f1,d6,c2));
HXLINE( 467)					if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 472)						removeStage = false;
HXLINE( 473)						tempMap->set(stages->__get(i),true);
HXLINE( 474)						i = (i + 1);
HXLINE( 475)						goto _hx_goto_10;
            					}
            				}
            				_hx_goto_10:;
            			}
HXLINE( 479)			if (removeStage) {
HXLINE( 480)				stages->remove(stages->__get(i));
HXLINE( 481)				stageLength = stages->length;
            			}
            		}
HXLINE( 486)		{
HXLINE( 486)			int _g4 = 0;
HXDLIN( 486)			int _g5 = directories1->length;
HXDLIN( 486)			while((_g4 < _g5)){
HXLINE( 486)				_g4 = (_g4 + 1);
HXDLIN( 486)				int i = (_g4 - 1);
HXLINE( 487)				::String directory = directories1->__get(i);
HXLINE( 488)				if (::sys::FileSystem_obj::exists(directory)) {
HXLINE( 489)					int _g = 0;
HXDLIN( 489)					::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN( 489)					while((_g < _g1->length)){
HXLINE( 489)						::String file = _g1->__get(_g);
HXDLIN( 489)						_g = (_g + 1);
HXLINE( 490)						::String path = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,directory)->init(1,file));
HXLINE( 491)						bool _hx_tmp;
HXDLIN( 491)						if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE( 491)							_hx_tmp = ::StringTools_obj::endsWith(file,HX_(".json",56,f1,d6,c2));
            						}
            						else {
HXLINE( 491)							_hx_tmp = false;
            						}
HXDLIN( 491)						if (_hx_tmp) {
HXLINE( 492)							::String stageToCheck = file.substr(0,(file.length - 5));
HXLINE( 493)							if (!(tempMap->exists(stageToCheck))) {
HXLINE( 494)								tempMap->set(stageToCheck,true);
HXLINE( 495)								stages->push(stageToCheck);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 503)		if ((stages->length < 1)) {
HXLINE( 503)			stages->push(HX_("stage",be,6a,0b,84));
            		}
HXLINE( 505)		Float _hx_tmp = (player1DropDown1->x + 140);
HXDLIN( 505)		Float player1DropDown4 = player1DropDown1->y;
HXDLIN( 505)		this->stageDropDown =  ::FlxUIDropDownMenuCustom_obj::__alloc( HX_CTX ,_hx_tmp,player1DropDown4,::FlxUIDropDownMenuCustom_obj::makeStrIdLabelArray(stages,true), ::Dynamic(new _hx_Closure_12(stages,_gthis)),null(),null(),null(),null());
HXLINE( 509)		this->stageDropDown->set_selectedLabel(( (::String)(this->_song->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE( 510)		this->blockPressWhileScrolling->push(this->stageDropDown);
HXLINE( 512)		::String skin = ( (::String)(::PlayState_obj::SONG->__Field(HX_("arrowSkin",e6,d4,f8,07),::hx::paccDynamic)) );
HXLINE( 513)		if (::hx::IsNull( skin )) {
HXLINE( 513)			skin = HX_("",00,00,00,00);
            		}
HXLINE( 514)		this->noteSkinInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,player2DropDown1->x,(player2DropDown1->y + 50),150,skin,8,null(),null(),null());
HXLINE( 515)		this->blockPressWhileTypingOn->push(this->noteSkinInputText);
HXLINE( 517)		this->noteSplashesInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,this->noteSkinInputText->x,(this->noteSkinInputText->y + 35),150,( (::String)(this->_song->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic)) ),8,null(),null(),null());
HXLINE( 518)		this->blockPressWhileTypingOn->push(this->noteSplashesInputText);
HXLINE( 520)		 ::flixel::ui::FlxButton reloadNotesButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->noteSplashesInputText->x + 5),(this->noteSplashesInputText->y + 20),HX_("Change Notes",91,69,0f,79), ::Dynamic(new _hx_Closure_13(_gthis)));
HXLINE( 525)		 ::flixel::addons::ui::FlxUI tab_group_song =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 526)		tab_group_song->name = HX_("Song",f5,4f,31,37);
HXLINE( 527)		tab_group_song->add(this->UI_songTitle).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 529)		tab_group_song->add(check_voices).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 530)		tab_group_song->add(clear_events).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 531)		tab_group_song->add(clear_notes).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 532)		tab_group_song->add(saveButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 533)		tab_group_song->add(saveEvents).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 534)		tab_group_song->add(reloadSong).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 535)		tab_group_song->add(reloadSongJson).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 536)		tab_group_song->add(loadAutosaveBtn).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 537)		tab_group_song->add(loadEventJson).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 538)		tab_group_song->add(stepperBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 539)		tab_group_song->add(stepperSpeed).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 540)		tab_group_song->add(reloadNotesButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 541)		tab_group_song->add(this->noteSkinInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 542)		tab_group_song->add(this->noteSplashesInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 543)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,stepperBPM->x,(stepperBPM->y - ( (Float)(15) )),0,HX_("Song BPM:",a6,54,cf,d6),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 544)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,stepperSpeed->x,(stepperSpeed->y - ( (Float)(15) )),0,HX_("Song Speed:",be,13,ac,f1),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 545)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,player2DropDown1->x,(player2DropDown1->y - ( (Float)(15) )),0,HX_("Opponent:",dd,8f,bc,4a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 546)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,player3DropDown1->x,(player3DropDown1->y - ( (Float)(15) )),0,HX_("Girlfriend:",20,89,69,8b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 547)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,player1DropDown1->x,(player1DropDown1->y - ( (Float)(15) )),0,HX_("Boyfriend:",b0,17,1d,f1),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 548)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->stageDropDown->x,(this->stageDropDown->y - ( (Float)(15) )),0,HX_("Stage:",dc,6f,86,3a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 549)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->noteSkinInputText->x,(this->noteSkinInputText->y - ( (Float)(15) )),0,HX_("Note Texture:",ed,7c,7e,a2),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 550)		tab_group_song->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->noteSplashesInputText->x,(this->noteSplashesInputText->y - ( (Float)(15) )),0,HX_("Note Splashes Texture:",5c,83,7f,23),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 551)		tab_group_song->add(player2DropDown1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 552)		tab_group_song->add(player3DropDown1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 553)		tab_group_song->add(player1DropDown1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 554)		tab_group_song->add(this->stageDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 556)		this->UI_box->addGroup(tab_group_song);
HXLINE( 557)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 559)		::flixel::FlxG_obj::camera->follow(this->camPos,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSongUI,(void))

void ChartingState_obj::addSectionUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_603_addSectionUI)
HXLINE( 604)			_gthis->notesCopied = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 605)			{
HXLINE( 605)				int _g = 0;
HXDLIN( 605)				int _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length();
HXDLIN( 605)				while((_g < _g1)){
HXLINE( 605)					_g = (_g + 1);
HXDLIN( 605)					int i = (_g - 1);
HXLINE( 607)					::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE( 608)					_gthis->notesCopied->push(note);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_613_addSectionUI)
HXLINE( 614)			{
HXLINE( 614)				int _g = 0;
HXDLIN( 614)				::cpp::VirtualArray _g1 = _gthis->notesCopied;
HXDLIN( 614)				while((_g < _g1->get_length())){
HXLINE( 614)					 ::Dynamic note = _g1->__get(_g);
HXDLIN( 614)					_g = (_g + 1);
HXLINE( 616)					::cpp::VirtualArray copiedNote;
HXLINE( 617)					if (::hx::IsNotNull( note->__GetItem(4) )) {
HXLINE( 618)						copiedNote = ::cpp::VirtualArray_obj::__new(5)->init(0,(note->__GetItem(0) + (::Conductor_obj::stepCrochet * ( (Float)((( (int)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->sectionToCopy)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * (::editors::ChartingState_obj::curSection - _gthis->sectionToCopy))) ))))->init(1,note->__GetItem(1))->init(2,note->__GetItem(2))->init(3,note->__GetItem(3))->init(4,note->__GetItem(4));
            					}
            					else {
HXLINE( 620)						copiedNote = ::cpp::VirtualArray_obj::__new(4)->init(0,(note->__GetItem(0) + (::Conductor_obj::stepCrochet * ( (Float)((( (int)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->sectionToCopy)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * (::editors::ChartingState_obj::curSection - _gthis->sectionToCopy))) ))))->init(1,note->__GetItem(1))->init(2,note->__GetItem(2))->init(3,note->__GetItem(3));
            					}
HXLINE( 622)					( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(copiedNote);
            				}
            			}
HXLINE( 624)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_628_addSectionUI)
HXLINE( 629)			 ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
HXLINE( 630)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_634_addSectionUI)
HXLINE( 635)			{
HXLINE( 635)				int _g = 0;
HXDLIN( 635)				int _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length();
HXDLIN( 635)				while((_g < _g1)){
HXLINE( 635)					_g = (_g + 1);
HXDLIN( 635)					int i = (_g - 1);
HXLINE( 637)					::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE( 638)					if (::hx::IsGreater( note->__get(1),-1 )) {
HXLINE( 639)						note->set(1,::hx::Mod((note->__get(1) + 4),8));
HXLINE( 640)						 ::Dynamic( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__SetItem(i,note);
            					}
            				}
            			}
HXLINE( 643)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::editors::ChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperCopy) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_649_addSectionUI)
HXLINE( 650)			int value = ::Std_obj::_hx_int(stepperCopy->value);
HXLINE( 651)			int a = ::editors::ChartingState_obj::curSection;
HXDLIN( 651)			int daSec;
HXDLIN( 651)			if ((a > value)) {
HXLINE( 651)				daSec = a;
            			}
            			else {
HXLINE( 651)				daSec = value;
            			}
HXLINE( 653)			{
HXLINE( 653)				int _g = 0;
HXDLIN( 653)				::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((daSec - value))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 653)				while((_g < _g1->get_length())){
HXLINE( 653)					 ::Dynamic note = _g1->__get(_g);
HXDLIN( 653)					_g = (_g + 1);
HXLINE( 655)					Float strum = (note->__GetItem(0) + (::Conductor_obj::stepCrochet * ( (Float)((( (int)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * value)) )));
HXLINE( 657)					::cpp::VirtualArray copiedNote = ::cpp::VirtualArray_obj::__new(4)->init(0,strum)->init(1,note->__GetItem(1))->init(2,note->__GetItem(2))->init(3,note->__GetItem(3));
HXLINE( 658)					if (::hx::IsLess( note->__GetItem(1),0 )) {
HXLINE( 659)						copiedNote = ::cpp::VirtualArray_obj::__new(5)->init(0,strum)->init(1,note->__GetItem(1))->init(2,note->__GetItem(2))->init(3,note->__GetItem(3))->init(4,note->__GetItem(4));
            					}
HXLINE( 661)					( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(copiedNote);
            				}
            			}
HXLINE( 663)			_gthis->updateGrid();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_572_addSectionUI)
HXLINE( 571)		 ::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 573)		 ::flixel::addons::ui::FlxUI tab_group_section =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 574)		tab_group_section->name = HX_("Section",c5,2d,29,2b);
HXLINE( 576)		this->stepperLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,10,4,0,0,999,0,null(),null(),null(),null(),null());
HXLINE( 577)		this->stepperLength->set_value(( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ));
HXLINE( 578)		this->stepperLength->name = HX_("section_length",40,57,01,c1);
HXLINE( 580)		this->check_mustHitSection =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,30,null(),null(),HX_("Must hit section",a1,02,f0,99),100,null(),null());
HXLINE( 581)		this->check_mustHitSection->name = HX_("check_mustHit",13,36,be,48);
HXLINE( 582)		this->check_mustHitSection->set_checked(( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE( 585)		this->check_altAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,60,null(),null(),HX_("Alt Animation",0d,81,c1,cd),100,null(),null());
HXLINE( 586)		this->check_altAnim->set_checked(( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ));
HXLINE( 587)		this->check_altAnim->name = HX_("check_altAnim",23,ee,53,2e);
HXLINE( 589)		this->check_changeBPM =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,90,null(),null(),HX_("Change BPM",2f,3c,7a,fb),100,null(),null());
HXLINE( 590)		this->check_changeBPM->set_checked(( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) ));
HXLINE( 591)		this->check_changeBPM->name = HX_("check_changeBPM",d8,2d,43,fc);
HXLINE( 593)		this->stepperSectionBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,110,1,::Conductor_obj::bpm,0,999,1,null(),null(),null(),null(),null());
HXLINE( 594)		if (this->check_changeBPM->checked) {
HXLINE( 595)			this->stepperSectionBPM->set_value(( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 597)			this->stepperSectionBPM->set_value(::Conductor_obj::bpm);
            		}
HXLINE( 599)		this->stepperSectionBPM->name = HX_("section_bpm",45,60,97,44);
HXLINE( 602)		 ::flixel::ui::FlxButton copyButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,150,HX_("Copy Section",7a,b6,b0,3b), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 612)		 ::flixel::ui::FlxButton pasteButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,180,HX_("Paste Section",d8,1f,0e,46), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 627)		 ::flixel::ui::FlxButton clearSectionButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,210,HX_("Clear",6d,e1,88,db), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 633)		 ::flixel::ui::FlxButton swapSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,240,HX_("Swap section",78,0b,70,e2), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 646)		 ::flixel::addons::ui::FlxUINumericStepper stepperCopy =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,110,276,1,1,-999,999,0,null(),null(),null(),null(),null());
HXLINE( 648)		 ::flixel::ui::FlxButton copyLastButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,270,HX_("Copy last section",46,61,ca,99), ::Dynamic(new _hx_Closure_4(_gthis,stepperCopy)));
HXLINE( 665)		copyLastButton->setGraphicSize(80,30);
HXLINE( 666)		copyLastButton->updateHitbox();
HXLINE( 668)		tab_group_section->add(this->stepperLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 669)		tab_group_section->add(this->stepperSectionBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 670)		tab_group_section->add(this->check_mustHitSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 671)		tab_group_section->add(this->check_altAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 672)		tab_group_section->add(this->check_changeBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 673)		tab_group_section->add(copyButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 674)		tab_group_section->add(pasteButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 675)		tab_group_section->add(clearSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 676)		tab_group_section->add(swapSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 677)		tab_group_section->add(stepperCopy).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 678)		tab_group_section->add(copyLastButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 680)		this->UI_box->addGroup(tab_group_section);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSectionUI,(void))

void ChartingState_obj::addNoteUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::editors::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_733_addNoteUI)
HXLINE( 734)			_gthis->currentType = ( (int)(::Std_obj::parseInt(character)) );
HXLINE( 735)			bool _hx_tmp;
HXDLIN( 735)			if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE( 735)				_hx_tmp = ::hx::IsGreater( _gthis->curSelectedNote->__get(1),-1 );
            			}
            			else {
HXLINE( 735)				_hx_tmp = false;
            			}
HXDLIN( 735)			if (_hx_tmp) {
HXLINE( 736)				_gthis->curSelectedNote->set(3,_gthis->noteTypeIntMap->get(_gthis->currentType));
HXLINE( 737)				_gthis->updateGrid();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_689_addNoteUI)
HXLINE( 688)		 ::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 690)		 ::flixel::addons::ui::FlxUI tab_group_note =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 691)		tab_group_note->name = HX_("Note",12,44,e3,33);
HXLINE( 693)		this->stepperSusLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,25,(::Conductor_obj::stepCrochet / ( (Float)(2) )),0,0,(::Conductor_obj::stepCrochet * ( (Float)(32) )),null(),null(),null(),null(),null(),null());
HXLINE( 694)		this->stepperSusLength->set_value(( (Float)(0) ));
HXLINE( 695)		this->stepperSusLength->name = HX_("note_susLength",8a,6b,51,4b);
HXLINE( 697)		this->strumTimeInputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,65,180,HX_("0",30,00,00,00),null(),null(),null(),null());
HXLINE( 698)		tab_group_note->add(this->strumTimeInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 699)		this->blockPressWhileTypingOn->push(this->strumTimeInputText);
HXLINE( 701)		int key = 0;
HXLINE( 702)		::Array< ::String > displayNameList = ::Array_obj< ::String >::__new(0);
HXLINE( 703)		while((key < ::editors::ChartingState_obj::noteTypeList->length)){
HXLINE( 704)			displayNameList->push(::editors::ChartingState_obj::noteTypeList->__get(key));
HXLINE( 705)			this->noteTypeMap->set(::editors::ChartingState_obj::noteTypeList->__get(key),key);
HXLINE( 706)			this->noteTypeIntMap->set(key,::editors::ChartingState_obj::noteTypeList->__get(key));
HXLINE( 707)			key = (key + 1);
            		}
HXLINE( 711)		::String directory = (HX_("mods/",9e,2f,58,0c) + HX_("custom_notetypes/",16,04,18,a1));
HXLINE( 712)		if (::sys::FileSystem_obj::exists(directory)) {
HXLINE( 713)			int _g = 0;
HXDLIN( 713)			::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN( 713)			while((_g < _g1->length)){
HXLINE( 713)				::String file = _g1->__get(_g);
HXDLIN( 713)				_g = (_g + 1);
HXLINE( 714)				::String path = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,directory)->init(1,file));
HXLINE( 715)				bool _hx_tmp;
HXDLIN( 715)				if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE( 715)					_hx_tmp = ::StringTools_obj::endsWith(file,HX_(".lua",4a,2a,ba,1e));
            				}
            				else {
HXLINE( 715)					_hx_tmp = false;
            				}
HXDLIN( 715)				if (_hx_tmp) {
HXLINE( 716)					::String fileToCheck = file.substr(0,(file.length - 4));
HXLINE( 717)					if (!(this->noteTypeMap->exists(fileToCheck))) {
HXLINE( 718)						displayNameList->push(fileToCheck);
HXLINE( 719)						this->noteTypeMap->set(fileToCheck,key);
HXLINE( 720)						this->noteTypeIntMap->set(key,fileToCheck);
HXLINE( 721)						key = (key + 1);
            					}
            				}
            			}
            		}
HXLINE( 728)		{
HXLINE( 728)			int _g = 1;
HXDLIN( 728)			int _g1 = displayNameList->length;
HXDLIN( 728)			while((_g < _g1)){
HXLINE( 728)				_g = (_g + 1);
HXDLIN( 728)				int i = (_g - 1);
HXLINE( 729)				displayNameList[i] = ((i + HX_(". ",32,28,00,00)) + displayNameList->__get(i));
            			}
            		}
HXLINE( 732)		this->noteTypeDropDown =  ::FlxUIDropDownMenuCustom_obj::__alloc( HX_CTX ,10,105,::FlxUIDropDownMenuCustom_obj::makeStrIdLabelArray(displayNameList,true), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null(),null());
HXLINE( 740)		this->blockPressWhileScrolling->push(this->noteTypeDropDown);
HXLINE( 742)		tab_group_note->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,HX_("Sustain length:",f7,d7,77,6b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 743)		tab_group_note->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,50,0,HX_("Strum time (in miliseconds):",28,c6,f8,8e),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 744)		tab_group_note->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,90,0,HX_("Note type:",b2,99,67,46),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 745)		tab_group_note->add(this->stepperSusLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 746)		tab_group_note->add(this->strumTimeInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 747)		tab_group_note->add(this->noteTypeDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 749)		this->UI_box->addGroup(tab_group_note);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addNoteUI,(void))

void ChartingState_obj::addEventsUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::editors::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String pressed){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_787_addEventsUI)
HXLINE( 788)			int selectedEvent = ( (int)(::Std_obj::parseInt(pressed)) );
HXLINE( 789)			_gthis->descText->set_text(( (::String)(_gthis->eventStuff->__get(selectedEvent)->__GetItem(1)) ));
HXLINE( 790)			if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE( 791)				_gthis->curSelectedNote->set(2,_gthis->eventStuff->__get(selectedEvent)->__GetItem(0));
HXLINE( 792)				_gthis->updateGrid();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_755_addEventsUI)
HXLINE( 754)		 ::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 756)		 ::flixel::addons::ui::FlxUI tab_group_event =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 757)		tab_group_event->name = HX_("Events",39,c3,fe,ca);
HXLINE( 760)		 ::haxe::ds::StringMap eventPushedMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 761)		::String directory = (HX_("mods/",9e,2f,58,0c) + HX_("custom_events/",28,61,2e,89));
HXLINE( 762)		if (::sys::FileSystem_obj::exists(directory)) {
HXLINE( 763)			int _g = 0;
HXDLIN( 763)			::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN( 763)			while((_g < _g1->length)){
HXLINE( 763)				::String file = _g1->__get(_g);
HXDLIN( 763)				_g = (_g + 1);
HXLINE( 764)				::String path = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,directory)->init(1,file));
HXLINE( 765)				bool _hx_tmp;
HXDLIN( 765)				bool _hx_tmp1;
HXDLIN( 765)				if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE( 765)					_hx_tmp1 = (file != HX_("readme.txt",30,9a,06,a0));
            				}
            				else {
HXLINE( 765)					_hx_tmp1 = false;
            				}
HXDLIN( 765)				if (_hx_tmp1) {
HXLINE( 765)					_hx_tmp = ::StringTools_obj::endsWith(file,HX_(".txt",02,3f,c0,1e));
            				}
            				else {
HXLINE( 765)					_hx_tmp = false;
            				}
HXDLIN( 765)				if (_hx_tmp) {
HXLINE( 766)					::String fileToCheck = file.substr(0,(file.length - 4));
HXLINE( 767)					if (!(eventPushedMap->exists(fileToCheck))) {
HXLINE( 768)						eventPushedMap->set(fileToCheck,true);
HXLINE( 769)						::cpp::VirtualArray _hx_tmp = this->eventStuff;
HXDLIN( 769)						_hx_tmp->push(::cpp::VirtualArray_obj::__new(2)->init(0,fileToCheck)->init(1,::sys::io::File_obj::getContent(path)));
            					}
            				}
            			}
            		}
HXLINE( 774)		eventPushedMap->clear();
HXLINE( 775)		eventPushedMap = null();
HXLINE( 778)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,200,0,( (::String)(this->eventStuff->__get(0)->__GetItem(0)) ),null(),null());
HXLINE( 780)		::Array< ::String > leEvents = ::Array_obj< ::String >::__new(0);
HXLINE( 781)		{
HXLINE( 781)			int _g = 0;
HXDLIN( 781)			int _g1 = this->eventStuff->get_length();
HXDLIN( 781)			while((_g < _g1)){
HXLINE( 781)				_g = (_g + 1);
HXDLIN( 781)				int i = (_g - 1);
HXLINE( 782)				leEvents->push(this->eventStuff->__get(i)->__GetItem(0));
            			}
            		}
HXLINE( 785)		 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,30,0,HX_("Event:",00,c3,fe,ca),null(),null());
HXLINE( 786)		tab_group_event->add(text).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 787)		this->eventDropDown =  ::FlxUIDropDownMenuCustom_obj::__alloc( HX_CTX ,20,50,::FlxUIDropDownMenuCustom_obj::makeStrIdLabelArray(leEvents,true), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null(),null());
HXLINE( 795)		this->blockPressWhileScrolling->push(this->eventDropDown);
HXLINE( 797)		 ::flixel::text::FlxText text1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,90,0,HX_("Value 1:",58,2c,dc,c7),null(),null());
HXLINE( 798)		tab_group_event->add(text1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 799)		this->value1InputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,20,110,100,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 800)		this->blockPressWhileTypingOn->push(this->value1InputText);
HXLINE( 802)		 ::flixel::text::FlxText text2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,130,0,HX_("Value 2:",37,2d,dc,c7),null(),null());
HXLINE( 803)		tab_group_event->add(text2).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 804)		this->value2InputText =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,20,150,100,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 805)		this->blockPressWhileTypingOn->push(this->value2InputText);
HXLINE( 807)		tab_group_event->add(this->descText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 808)		tab_group_event->add(this->value1InputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 809)		tab_group_event->add(this->value2InputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 810)		tab_group_event->add(this->eventDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 812)		this->UI_box->addGroup(tab_group_event);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addEventsUI,(void))

void ChartingState_obj::addChartingUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_833_addChartingUI)
HXLINE( 833)			_gthis->updateWaveform();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_840_addChartingUI)
HXLINE( 840)			_gthis->updateWaveform();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_847_addChartingUI)
HXLINE( 848)			Float vol = ( (Float)(1) );
HXLINE( 850)			if (_gthis->check_mute_inst->checked) {
HXLINE( 851)				vol = ( (Float)(0) );
            			}
HXLINE( 853)			::flixel::FlxG_obj::sound->music->set_volume(vol);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::editors::ChartingState,_gthis, ::flixel::addons::ui::FlxUICheckBox,check_mute_vocals) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_860_addChartingUI)
HXLINE( 860)			if (::hx::IsNotNull( _gthis->vocals )) {
HXLINE( 861)				Float vol = ( (Float)(1) );
HXLINE( 863)				if (check_mute_vocals->checked) {
HXLINE( 864)					vol = ( (Float)(0) );
            				}
HXLINE( 866)				_gthis->vocals->set_volume(vol);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_824_addChartingUI)
HXDLIN( 824)		 ::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 825)		 ::flixel::addons::ui::FlxUI tab_group_chart =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 826)		tab_group_chart->name = HX_("Charting",e4,0a,35,96);
HXLINE( 829)		this->waveformEnabled =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,90,null(),null(),HX_("Visible Waveform",2b,39,fa,a4),100,null(),null());
HXLINE( 830)		this->waveformEnabled->set_checked(false);
HXLINE( 831)		this->waveformEnabled->callback =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 836)		this->waveformUseInstrumental =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(this->waveformEnabled->x + 120),this->waveformEnabled->y,null(),null(),HX_("Waveform for Instrumental",4c,1f,56,f6),100,null(),null());
HXLINE( 837)		this->waveformUseInstrumental->set_checked(false);
HXLINE( 838)		this->waveformUseInstrumental->callback =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 844)		this->check_mute_inst =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,310,null(),null(),HX_("Mute Instrumental (in editor)",a2,93,a5,ab),100,null(),null());
HXLINE( 845)		this->check_mute_inst->set_checked(false);
HXLINE( 846)		this->check_mute_inst->callback =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE( 856)		 ::flixel::addons::ui::FlxUICheckBox check_mute_vocals =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(this->check_mute_inst->x + 120),this->check_mute_inst->y,null(),null(),HX_("Mute Vocals (in editor)",ee,ce,e8,5f),100,null(),null());
HXLINE( 857)		check_mute_vocals->set_checked(false);
HXLINE( 858)		check_mute_vocals->callback =  ::Dynamic(new _hx_Closure_3(_gthis,check_mute_vocals));
HXLINE( 870)		this->playSoundBf =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,this->check_mute_inst->x,(check_mute_vocals->y + 30),null(),null(),HX_("Play Sound (Boyfriend notes)",49,43,a0,7b),100,null(),null());
HXLINE( 871)		this->playSoundBf->set_checked(false);
HXLINE( 872)		this->playSoundDad =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(this->check_mute_inst->x + 120),this->playSoundBf->y,null(),null(),HX_("Play Sound (Opponent notes)",c0,1c,0f,a2),100,null(),null());
HXLINE( 873)		this->playSoundDad->set_checked(false);
HXLINE( 875)		this->metronome =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,15,15,null(),null(),HX_("Metronome Enabled",53,d5,75,16),100,null(),null());
HXLINE( 876)		this->metronomeStepper =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,15,55,5,this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic),1,1500,1,null(),null(),null(),null(),null());
HXLINE( 877)		this->metronomeOffsetStepper =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(this->metronomeStepper->x + 100),this->metronomeStepper->y,25,0,0,1000,1,null(),null(),null(),null(),null());
HXLINE( 879)		this->instVolume =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,this->metronomeStepper->x,270,((Float)0.1),1,0,1,1,null(),null(),null(),null(),null());
HXLINE( 880)		this->instVolume->set_value(::flixel::FlxG_obj::sound->music->_volume);
HXLINE( 881)		this->instVolume->name = HX_("inst_volume",73,9c,51,f6);
HXLINE( 882)		this->voicesVolume =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(this->instVolume->x + 100),this->instVolume->y,((Float)0.1),1,0,1,1,null(),null(),null(),null(),null());
HXLINE( 883)		this->voicesVolume->set_value(this->vocals->_volume);
HXLINE( 884)		this->voicesVolume->name = HX_("voices_volume",18,a7,72,99);
HXLINE( 886)		tab_group_chart->add(this->metronome).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 887)		tab_group_chart->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->metronomeStepper->x,(this->metronomeStepper->y - ( (Float)(15) )),0,HX_("BPM:",9b,0c,dd,2b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 888)		tab_group_chart->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->metronomeOffsetStepper->x,(this->metronomeOffsetStepper->y - ( (Float)(15) )),0,HX_("Offset (ms):",d2,bc,46,87),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 889)		tab_group_chart->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->instVolume->x,(this->instVolume->y - ( (Float)(15) )),0,HX_("Inst Volume",f4,6e,50,d3),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 890)		tab_group_chart->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->voicesVolume->x,(this->voicesVolume->y - ( (Float)(15) )),0,HX_("Voices Volume",99,31,2f,da),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 891)		tab_group_chart->add(this->metronomeStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 892)		tab_group_chart->add(this->metronomeOffsetStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 894)		tab_group_chart->add(this->waveformEnabled).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 895)		tab_group_chart->add(this->waveformUseInstrumental).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 897)		tab_group_chart->add(this->instVolume).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 898)		tab_group_chart->add(this->voicesVolume).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 899)		tab_group_chart->add(this->check_mute_inst).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 900)		tab_group_chart->add(check_mute_vocals).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 901)		tab_group_chart->add(this->playSoundBf).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 902)		tab_group_chart->add(this->playSoundDad).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 903)		this->UI_box->addGroup(tab_group_chart);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addChartingUI,(void))

void ChartingState_obj::loadSong(){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_907_loadSong)
HXLINE( 908)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 910)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 910)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 914)		::String song = this->currentSongName;
HXDLIN( 914)		::String file = (HX_("mods/",9e,2f,58,0c) + (((HX_("songs/",71,e7,88,2d) + (::StringTools_obj::replace(song.toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)) + HX_("/Voices",10,18,4f,34))) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)));
HXDLIN( 914)		 ::openfl::media::Sound file1;
HXDLIN( 914)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 914)			if (!(::Paths_obj::customSoundsLoaded->exists(file))) {
HXLINE( 914)				::Dynamic this1 = ::Paths_obj::customSoundsLoaded;
HXDLIN( 914)				( ( ::haxe::ds::StringMap)(this1) )->set(file,::openfl::media::Sound_obj::fromFile(file));
            			}
HXDLIN( 914)			file1 = ( ( ::openfl::media::Sound)(::Paths_obj::customSoundsLoaded->get(file)) );
            		}
            		else {
HXLINE( 914)			file1 = null();
            		}
HXDLIN( 914)		 ::Dynamic file2;
HXDLIN( 914)		if (::hx::IsNotNull( file1 )) {
HXLINE( 914)			file2 = file1;
            		}
            		else {
HXLINE( 914)			file2 = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + ::StringTools_obj::replace(song.toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00))) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
            		}
HXLINE( 915)		this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXLINE( 916)		bool _hx_tmp;
HXDLIN( 916)		if (!(::Std_obj::isOfType(file2,::hx::ClassOf< ::openfl::media::Sound >()))) {
HXLINE( 916)			_hx_tmp = ::openfl::utils::Assets_obj::exists(( (::String)(file2) ),null());
            		}
            		else {
HXLINE( 916)			_hx_tmp = true;
            		}
HXDLIN( 916)		if (_hx_tmp) {
HXLINE( 917)			this->vocals->loadEmbedded(file2,null(),null(),null());
HXLINE( 918)			::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
            		}
HXLINE( 920)		this->generateSong();
HXLINE( 921)		::flixel::FlxG_obj::sound->music->pause();
HXLINE( 922)		::Conductor_obj::songPosition = this->sectionStartTime(null());
HXLINE( 923)		::flixel::FlxG_obj::sound->music->set_time(::Conductor_obj::songPosition);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadSong,(void))

void ChartingState_obj::generateSong(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_92f3de805789c16b_932_generateSong)
HXLINE( 933)			_gthis->generateSong();
HXLINE( 934)			::flixel::FlxG_obj::sound->music->pause();
HXLINE( 935)			::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE( 936)			if (::hx::IsNotNull( _gthis->vocals )) {
HXLINE( 937)				_gthis->vocals->play(null(),null(),null());
HXLINE( 938)				_gthis->vocals->pause();
HXLINE( 939)				_gthis->vocals->set_time(( (Float)(0) ));
            			}
HXLINE( 941)			_gthis->changeSection(null(),null());
HXLINE( 942)			::editors::ChartingState_obj::curSection = 0;
HXLINE( 943)			_gthis->updateGrid();
HXLINE( 944)			_gthis->updateSectionUI();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_926_generateSong)
HXDLIN( 926)		 ::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 927)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 927)		::String song = this->currentSongName;
HXDLIN( 927)		::String file = (HX_("mods/",9e,2f,58,0c) + (((HX_("songs/",71,e7,88,2d) + (::StringTools_obj::replace(song.toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)) + HX_("/Inst",95,b3,69,40))) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)));
HXDLIN( 927)		 ::openfl::media::Sound file1;
HXDLIN( 927)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 927)			if (!(::Paths_obj::customSoundsLoaded->exists(file))) {
HXLINE( 927)				::Dynamic this1 = ::Paths_obj::customSoundsLoaded;
HXDLIN( 927)				( ( ::haxe::ds::StringMap)(this1) )->set(file,::openfl::media::Sound_obj::fromFile(file));
            			}
HXDLIN( 927)			file1 = ( ( ::openfl::media::Sound)(::Paths_obj::customSoundsLoaded->get(file)) );
            		}
            		else {
HXLINE( 927)			file1 = null();
            		}
HXDLIN( 927)		 ::Dynamic this1;
HXDLIN( 927)		if (::hx::IsNotNull( file1 )) {
HXLINE( 927)			this1 = file1;
            		}
            		else {
HXLINE( 927)			this1 = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + ::StringTools_obj::replace(song.toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00))) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
            		}
HXDLIN( 927)		_hx_tmp->playMusic(this1,((Float)0.6),false,null());
HXLINE( 928)		if (::hx::IsNotNull( this->instVolume )) {
HXLINE( 928)			::flixel::FlxG_obj::sound->music->set_volume(this->instVolume->value);
            		}
HXLINE( 929)		bool _hx_tmp1;
HXDLIN( 929)		if (::hx::IsNotNull( this->check_mute_inst )) {
HXLINE( 929)			_hx_tmp1 = this->check_mute_inst->checked;
            		}
            		else {
HXLINE( 929)			_hx_tmp1 = false;
            		}
HXDLIN( 929)		if (_hx_tmp1) {
HXLINE( 929)			::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
            		}
HXLINE( 931)		::flixel::FlxG_obj::sound->music->onComplete =  ::Dynamic(new _hx_Closure_0(_gthis));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateSong,(void))

void ChartingState_obj::generateUI(){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_949_generateUI)
HXLINE( 950)		while((this->bullshitUI->members->get_length() > 0)){
HXLINE( 952)			this->bullshitUI->remove(Dynamic( this->bullshitUI->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE( 956)		 ::flixel::text::FlxText title =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->UI_box->x + 20),(this->UI_box->y + 20),0,null(),null(),null());
HXLINE( 957)		this->bullshitUI->add(title).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateUI,(void))

void ChartingState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_969_getEvent)
HXDLIN( 969)		if ((id == HX_("click_check_box",dd,c1,1e,a8))) {
HXLINE( 971)			 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(sender) );
HXLINE( 972)			::String label = check->getLabel()->text;
HXLINE( 973)			::String _hx_switch_0 = label;
            			if (  (_hx_switch_0==HX_("Alt Animation",0d,81,c1,cd)) ){
HXLINE( 985)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__SetField(HX_("altAnim",da,f3,f2,e5),check->checked,::hx::paccDynamic);
HXDLIN( 985)				goto _hx_goto_57;
            			}
            			if (  (_hx_switch_0==HX_("Change BPM",2f,3c,7a,fb)) ){
HXLINE( 982)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__SetField(HX_("changeBPM",4f,4f,f8,1d),check->checked,::hx::paccDynamic);
HXDLIN( 982)				goto _hx_goto_57;
            			}
            			if (  (_hx_switch_0==HX_("Must hit section",a1,02,f0,99)) ){
HXLINE( 976)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__SetField(HX_("mustHitSection",3b,5f,87,62),check->checked,::hx::paccDynamic);
HXLINE( 978)				this->updateGrid();
HXLINE( 979)				this->updateHeads();
HXLINE( 975)				goto _hx_goto_57;
            			}
            			_hx_goto_57:;
            		}
            		else {
HXLINE( 988)			bool _hx_tmp;
HXDLIN( 988)			if ((id == HX_("change_numeric_stepper",50,0a,cc,bb))) {
HXLINE( 988)				_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUINumericStepper >());
            			}
            			else {
HXLINE( 988)				_hx_tmp = false;
            			}
HXDLIN( 988)			if (_hx_tmp) {
HXLINE( 990)				 ::flixel::addons::ui::FlxUINumericStepper nums = ( ( ::flixel::addons::ui::FlxUINumericStepper)(sender) );
HXLINE( 991)				::String wname = nums->name;
HXLINE( 993)				if ((wname == HX_("section_length",40,57,01,c1))) {
HXLINE( 995)					 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__SetField(HX_("lengthInSteps",3c,ed,41,db),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE( 996)					this->updateGrid();
            				}
            				else {
HXLINE( 998)					if ((wname == HX_("song_speed",5d,10,41,a4))) {
HXLINE(1000)						this->_song->__SetField(HX_("speed",87,97,69,81),nums->value,::hx::paccDynamic);
            					}
            					else {
HXLINE(1002)						if ((wname == HX_("song_bpm",35,36,15,42))) {
HXLINE(1004)							this->tempBpm = nums->value;
HXLINE(1005)							::Conductor_obj::mapBPMChanges(this->_song);
HXLINE(1006)							::Conductor_obj::changeBPM(nums->value);
            						}
            						else {
HXLINE(1008)							if ((wname == HX_("note_susLength",8a,6b,51,4b))) {
HXLINE(1010)								bool _hx_tmp;
HXDLIN(1010)								if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1010)									_hx_tmp = ::hx::IsGreater( this->curSelectedNote->__get(1),-1 );
            								}
            								else {
HXLINE(1010)									_hx_tmp = false;
            								}
HXDLIN(1010)								if (_hx_tmp) {
HXLINE(1011)									this->curSelectedNote->set(2,nums->value);
HXLINE(1012)									this->updateGrid();
            								}
            								else {
HXLINE(1014)									sender->__SetField(HX_("value",71,7f,b8,31),0,::hx::paccDynamic);
            								}
            							}
            							else {
HXLINE(1017)								if ((wname == HX_("section_bpm",45,60,97,44))) {
HXLINE(1019)									 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__SetField(HX_("bpm",df,be,4a,00),nums->value,::hx::paccDynamic);
HXLINE(1020)									this->updateGrid();
            								}
            								else {
HXLINE(1022)									if ((wname == HX_("inst_volume",73,9c,51,f6))) {
HXLINE(1024)										::flixel::FlxG_obj::sound->music->set_volume(nums->value);
            									}
            									else {
HXLINE(1026)										if ((wname == HX_("voices_volume",18,a7,72,99))) {
HXLINE(1028)											this->vocals->set_volume(nums->value);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE(1031)				bool _hx_tmp;
HXDLIN(1031)				if ((id == HX_("change_input_text",f1,11,47,68))) {
HXLINE(1031)					_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUIInputText >());
            				}
            				else {
HXLINE(1031)					_hx_tmp = false;
            				}
HXDLIN(1031)				if (_hx_tmp) {
HXLINE(1032)					if (::hx::IsEq( sender,this->noteSplashesInputText )) {
HXLINE(1033)						this->_song->__SetField(HX_("splashSkin",84,03,e1,a1),this->noteSplashesInputText->text,::hx::paccDynamic);
            					}
            					else {
HXLINE(1035)						if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1037)							if (::hx::IsEq( sender,this->value1InputText )) {
HXLINE(1038)								this->curSelectedNote->set(3,this->value1InputText->text);
HXLINE(1039)								this->updateGrid();
            							}
            							else {
HXLINE(1041)								if (::hx::IsEq( sender,this->value2InputText )) {
HXLINE(1042)									this->curSelectedNote->set(4,this->value2InputText->text);
HXLINE(1043)									this->updateGrid();
            								}
            								else {
HXLINE(1045)									if (::hx::IsEq( sender,this->strumTimeInputText )) {
HXLINE(1046)										Float value = ::Std_obj::parseFloat(this->strumTimeInputText->text);
HXLINE(1047)										if (::Math_obj::isNaN(value)) {
HXLINE(1047)											value = ( (Float)(0) );
            										}
HXLINE(1048)										this->curSelectedNote->set(0,value);
HXLINE(1049)										this->updateGrid();
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


Float ChartingState_obj::sectionStartTime(::hx::Null< int >  __o_add){
            		int add = __o_add.Default(0);
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1068_sectionStartTime)
HXLINE(1069)		Float daBPM = ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(1070)		Float daPos = ( (Float)(0) );
HXLINE(1071)		{
HXLINE(1071)			int _g = 0;
HXDLIN(1071)			int _g1 = (::editors::ChartingState_obj::curSection + add);
HXDLIN(1071)			while((_g < _g1)){
HXLINE(1071)				_g = (_g + 1);
HXDLIN(1071)				int i = (_g - 1);
HXLINE(1073)				if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(1075)					daBPM = ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
HXLINE(1077)				daPos = (daPos + (( (Float)(4) ) * (( (Float)(60000) ) / daBPM)));
            			}
            		}
HXLINE(1079)		return daPos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,sectionStartTime,return )

void ChartingState_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1, ::editors::ChartingState,_gthis,::Array< bool >,playedSound,Float,elapsed) HXARGC(1)
            		void _hx_run( ::Note note){
            			HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_1339_update)
HXLINE(1340)			note->set_alpha(( (Float)(1) ));
HXLINE(1342)			if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE(1343)				int noteDataToCheck = note->noteData;
HXLINE(1344)				bool _hx_tmp;
HXDLIN(1344)				if ((noteDataToCheck > -1)) {
HXLINE(1344)					_hx_tmp = ::hx::IsNotEq( note->mustPress, ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) );
            				}
            				else {
HXLINE(1344)					_hx_tmp = false;
            				}
HXDLIN(1344)				if (_hx_tmp) {
HXLINE(1344)					noteDataToCheck = (noteDataToCheck + 4);
            				}
HXLINE(1346)				bool _hx_tmp1;
HXDLIN(1346)				if (::hx::IsEq( _gthis->curSelectedNote->__get(0),note->strumTime )) {
HXLINE(1346)					_hx_tmp1 = ::hx::IsEq( _gthis->curSelectedNote->__get(1),noteDataToCheck );
            				}
            				else {
HXLINE(1346)					_hx_tmp1 = false;
            				}
HXDLIN(1346)				if (_hx_tmp1) {
HXLINE(1348)					 ::editors::ChartingState _gthis1 = _gthis;
HXDLIN(1348)					_gthis1->colorSine = (_gthis1->colorSine + (( (Float)(180) ) * elapsed));
HXLINE(1349)					Float colorVal = (((Float)0.7) + (::Math_obj::sin(((::Math_obj::PI * _gthis->colorSine) / ( (Float)(180) ))) * ((Float)0.3)));
HXLINE(1350)					{
HXLINE(1350)						Float Hue = ::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(note->color);
HXDLIN(1350)						Float Alpha = (( (Float)(((note->color >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN(1350)						Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((( (Float)(2) ) * colorVal) - ( (Float)(1) )))) * ((::Math_obj::max((( (Float)(((note->color >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((note->color >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((note->color & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((note->color >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((note->color >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((note->color & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((note->color >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((note->color >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((note->color & 255)) ) / ( (Float)(255) ))))));
HXDLIN(1350)						Float match = (colorVal - (chroma / ( (Float)(2) )));
HXDLIN(1350)						{
HXLINE(1350)							Float Hue1 = Hue;
HXDLIN(1350)							Float Chroma = chroma;
HXDLIN(1350)							Hue1 = ::hx::Mod(Hue1,360);
HXDLIN(1350)							Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN(1350)							Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN(1350)							Chroma = (Chroma + match);
HXDLIN(1350)							switch((int)(::Std_obj::_hx_int(hueD))){
            								case (int)0: {
HXLINE(1350)									{
HXLINE(1350)										int Value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note1 = note;
HXDLIN(1350)										note1->color = (note1->color & -16711681);
HXDLIN(1350)										 ::Note note2 = note;
HXDLIN(1350)										int _hx_tmp;
HXDLIN(1350)										if ((Value > 255)) {
HXLINE(1350)											_hx_tmp = 255;
            										}
            										else {
HXLINE(1350)											if ((Value < 0)) {
HXLINE(1350)												_hx_tmp = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp = Value;
            											}
            										}
HXDLIN(1350)										note2->color = (note2->color | (_hx_tmp << 16));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note3 = note;
HXDLIN(1350)										note3->color = (note3->color & -65281);
HXDLIN(1350)										 ::Note note4 = note;
HXDLIN(1350)										int _hx_tmp1;
HXDLIN(1350)										if ((Value1 > 255)) {
HXLINE(1350)											_hx_tmp1 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value1 < 0)) {
HXLINE(1350)												_hx_tmp1 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp1 = Value1;
            											}
            										}
HXDLIN(1350)										note4->color = (note4->color | (_hx_tmp1 << 8));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value2 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note5 = note;
HXDLIN(1350)										note5->color = (note5->color & -256);
HXDLIN(1350)										 ::Note note6 = note;
HXDLIN(1350)										int _hx_tmp2;
HXDLIN(1350)										if ((Value2 > 255)) {
HXLINE(1350)											_hx_tmp2 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value2 < 0)) {
HXLINE(1350)												_hx_tmp2 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp2 = Value2;
            											}
            										}
HXDLIN(1350)										note6->color = (note6->color | _hx_tmp2);
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note7 = note;
HXDLIN(1350)										note7->color = (note7->color & 16777215);
HXDLIN(1350)										 ::Note note8 = note;
HXDLIN(1350)										int _hx_tmp3;
HXDLIN(1350)										if ((Value3 > 255)) {
HXLINE(1350)											_hx_tmp3 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value3 < 0)) {
HXLINE(1350)												_hx_tmp3 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp3 = Value3;
            											}
            										}
HXDLIN(1350)										note8->color = (note8->color | (_hx_tmp3 << 24));
            									}
            								}
            								break;
            								case (int)1: {
HXLINE(1350)									{
HXLINE(1350)										int Value = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note1 = note;
HXDLIN(1350)										note1->color = (note1->color & -16711681);
HXDLIN(1350)										 ::Note note2 = note;
HXDLIN(1350)										int _hx_tmp;
HXDLIN(1350)										if ((Value > 255)) {
HXLINE(1350)											_hx_tmp = 255;
            										}
            										else {
HXLINE(1350)											if ((Value < 0)) {
HXLINE(1350)												_hx_tmp = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp = Value;
            											}
            										}
HXDLIN(1350)										note2->color = (note2->color | (_hx_tmp << 16));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note3 = note;
HXDLIN(1350)										note3->color = (note3->color & -65281);
HXDLIN(1350)										 ::Note note4 = note;
HXDLIN(1350)										int _hx_tmp1;
HXDLIN(1350)										if ((Value1 > 255)) {
HXLINE(1350)											_hx_tmp1 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value1 < 0)) {
HXLINE(1350)												_hx_tmp1 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp1 = Value1;
            											}
            										}
HXDLIN(1350)										note4->color = (note4->color | (_hx_tmp1 << 8));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value2 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note5 = note;
HXDLIN(1350)										note5->color = (note5->color & -256);
HXDLIN(1350)										 ::Note note6 = note;
HXDLIN(1350)										int _hx_tmp2;
HXDLIN(1350)										if ((Value2 > 255)) {
HXLINE(1350)											_hx_tmp2 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value2 < 0)) {
HXLINE(1350)												_hx_tmp2 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp2 = Value2;
            											}
            										}
HXDLIN(1350)										note6->color = (note6->color | _hx_tmp2);
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note7 = note;
HXDLIN(1350)										note7->color = (note7->color & 16777215);
HXDLIN(1350)										 ::Note note8 = note;
HXDLIN(1350)										int _hx_tmp3;
HXDLIN(1350)										if ((Value3 > 255)) {
HXLINE(1350)											_hx_tmp3 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value3 < 0)) {
HXLINE(1350)												_hx_tmp3 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp3 = Value3;
            											}
            										}
HXDLIN(1350)										note8->color = (note8->color | (_hx_tmp3 << 24));
            									}
            								}
            								break;
            								case (int)2: {
HXLINE(1350)									{
HXLINE(1350)										int Value = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note1 = note;
HXDLIN(1350)										note1->color = (note1->color & -16711681);
HXDLIN(1350)										 ::Note note2 = note;
HXDLIN(1350)										int _hx_tmp;
HXDLIN(1350)										if ((Value > 255)) {
HXLINE(1350)											_hx_tmp = 255;
            										}
            										else {
HXLINE(1350)											if ((Value < 0)) {
HXLINE(1350)												_hx_tmp = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp = Value;
            											}
            										}
HXDLIN(1350)										note2->color = (note2->color | (_hx_tmp << 16));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value1 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note3 = note;
HXDLIN(1350)										note3->color = (note3->color & -65281);
HXDLIN(1350)										 ::Note note4 = note;
HXDLIN(1350)										int _hx_tmp1;
HXDLIN(1350)										if ((Value1 > 255)) {
HXLINE(1350)											_hx_tmp1 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value1 < 0)) {
HXLINE(1350)												_hx_tmp1 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp1 = Value1;
            											}
            										}
HXDLIN(1350)										note4->color = (note4->color | (_hx_tmp1 << 8));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note5 = note;
HXDLIN(1350)										note5->color = (note5->color & -256);
HXDLIN(1350)										 ::Note note6 = note;
HXDLIN(1350)										int _hx_tmp2;
HXDLIN(1350)										if ((Value2 > 255)) {
HXLINE(1350)											_hx_tmp2 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value2 < 0)) {
HXLINE(1350)												_hx_tmp2 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp2 = Value2;
            											}
            										}
HXDLIN(1350)										note6->color = (note6->color | _hx_tmp2);
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note7 = note;
HXDLIN(1350)										note7->color = (note7->color & 16777215);
HXDLIN(1350)										 ::Note note8 = note;
HXDLIN(1350)										int _hx_tmp3;
HXDLIN(1350)										if ((Value3 > 255)) {
HXLINE(1350)											_hx_tmp3 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value3 < 0)) {
HXLINE(1350)												_hx_tmp3 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp3 = Value3;
            											}
            										}
HXDLIN(1350)										note8->color = (note8->color | (_hx_tmp3 << 24));
            									}
            								}
            								break;
            								case (int)3: {
HXLINE(1350)									{
HXLINE(1350)										int Value = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note1 = note;
HXDLIN(1350)										note1->color = (note1->color & -16711681);
HXDLIN(1350)										 ::Note note2 = note;
HXDLIN(1350)										int _hx_tmp;
HXDLIN(1350)										if ((Value > 255)) {
HXLINE(1350)											_hx_tmp = 255;
            										}
            										else {
HXLINE(1350)											if ((Value < 0)) {
HXLINE(1350)												_hx_tmp = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp = Value;
            											}
            										}
HXDLIN(1350)										note2->color = (note2->color | (_hx_tmp << 16));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note3 = note;
HXDLIN(1350)										note3->color = (note3->color & -65281);
HXDLIN(1350)										 ::Note note4 = note;
HXDLIN(1350)										int _hx_tmp1;
HXDLIN(1350)										if ((Value1 > 255)) {
HXLINE(1350)											_hx_tmp1 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value1 < 0)) {
HXLINE(1350)												_hx_tmp1 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp1 = Value1;
            											}
            										}
HXDLIN(1350)										note4->color = (note4->color | (_hx_tmp1 << 8));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value2 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note5 = note;
HXDLIN(1350)										note5->color = (note5->color & -256);
HXDLIN(1350)										 ::Note note6 = note;
HXDLIN(1350)										int _hx_tmp2;
HXDLIN(1350)										if ((Value2 > 255)) {
HXLINE(1350)											_hx_tmp2 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value2 < 0)) {
HXLINE(1350)												_hx_tmp2 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp2 = Value2;
            											}
            										}
HXDLIN(1350)										note6->color = (note6->color | _hx_tmp2);
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note7 = note;
HXDLIN(1350)										note7->color = (note7->color & 16777215);
HXDLIN(1350)										 ::Note note8 = note;
HXDLIN(1350)										int _hx_tmp3;
HXDLIN(1350)										if ((Value3 > 255)) {
HXLINE(1350)											_hx_tmp3 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value3 < 0)) {
HXLINE(1350)												_hx_tmp3 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp3 = Value3;
            											}
            										}
HXDLIN(1350)										note8->color = (note8->color | (_hx_tmp3 << 24));
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1350)									{
HXLINE(1350)										int Value = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note1 = note;
HXDLIN(1350)										note1->color = (note1->color & -16711681);
HXDLIN(1350)										 ::Note note2 = note;
HXDLIN(1350)										int _hx_tmp;
HXDLIN(1350)										if ((Value > 255)) {
HXLINE(1350)											_hx_tmp = 255;
            										}
            										else {
HXLINE(1350)											if ((Value < 0)) {
HXLINE(1350)												_hx_tmp = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp = Value;
            											}
            										}
HXDLIN(1350)										note2->color = (note2->color | (_hx_tmp << 16));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value1 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note3 = note;
HXDLIN(1350)										note3->color = (note3->color & -65281);
HXDLIN(1350)										 ::Note note4 = note;
HXDLIN(1350)										int _hx_tmp1;
HXDLIN(1350)										if ((Value1 > 255)) {
HXLINE(1350)											_hx_tmp1 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value1 < 0)) {
HXLINE(1350)												_hx_tmp1 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp1 = Value1;
            											}
            										}
HXDLIN(1350)										note4->color = (note4->color | (_hx_tmp1 << 8));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value2 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note5 = note;
HXDLIN(1350)										note5->color = (note5->color & -256);
HXDLIN(1350)										 ::Note note6 = note;
HXDLIN(1350)										int _hx_tmp2;
HXDLIN(1350)										if ((Value2 > 255)) {
HXLINE(1350)											_hx_tmp2 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value2 < 0)) {
HXLINE(1350)												_hx_tmp2 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp2 = Value2;
            											}
            										}
HXDLIN(1350)										note6->color = (note6->color | _hx_tmp2);
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note7 = note;
HXDLIN(1350)										note7->color = (note7->color & 16777215);
HXDLIN(1350)										 ::Note note8 = note;
HXDLIN(1350)										int _hx_tmp3;
HXDLIN(1350)										if ((Value3 > 255)) {
HXLINE(1350)											_hx_tmp3 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value3 < 0)) {
HXLINE(1350)												_hx_tmp3 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp3 = Value3;
            											}
            										}
HXDLIN(1350)										note8->color = (note8->color | (_hx_tmp3 << 24));
            									}
            								}
            								break;
            								case (int)5: {
HXLINE(1350)									{
HXLINE(1350)										int Value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note1 = note;
HXDLIN(1350)										note1->color = (note1->color & -16711681);
HXDLIN(1350)										 ::Note note2 = note;
HXDLIN(1350)										int _hx_tmp;
HXDLIN(1350)										if ((Value > 255)) {
HXLINE(1350)											_hx_tmp = 255;
            										}
            										else {
HXLINE(1350)											if ((Value < 0)) {
HXLINE(1350)												_hx_tmp = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp = Value;
            											}
            										}
HXDLIN(1350)										note2->color = (note2->color | (_hx_tmp << 16));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value1 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note3 = note;
HXDLIN(1350)										note3->color = (note3->color & -65281);
HXDLIN(1350)										 ::Note note4 = note;
HXDLIN(1350)										int _hx_tmp1;
HXDLIN(1350)										if ((Value1 > 255)) {
HXLINE(1350)											_hx_tmp1 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value1 < 0)) {
HXLINE(1350)												_hx_tmp1 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp1 = Value1;
            											}
            										}
HXDLIN(1350)										note4->color = (note4->color | (_hx_tmp1 << 8));
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value2 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note5 = note;
HXDLIN(1350)										note5->color = (note5->color & -256);
HXDLIN(1350)										 ::Note note6 = note;
HXDLIN(1350)										int _hx_tmp2;
HXDLIN(1350)										if ((Value2 > 255)) {
HXLINE(1350)											_hx_tmp2 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value2 < 0)) {
HXLINE(1350)												_hx_tmp2 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp2 = Value2;
            											}
            										}
HXDLIN(1350)										note6->color = (note6->color | _hx_tmp2);
            									}
HXDLIN(1350)									{
HXLINE(1350)										int Value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(1350)										 ::Note note7 = note;
HXDLIN(1350)										note7->color = (note7->color & 16777215);
HXDLIN(1350)										 ::Note note8 = note;
HXDLIN(1350)										int _hx_tmp3;
HXDLIN(1350)										if ((Value3 > 255)) {
HXLINE(1350)											_hx_tmp3 = 255;
            										}
            										else {
HXLINE(1350)											if ((Value3 < 0)) {
HXLINE(1350)												_hx_tmp3 = 0;
            											}
            											else {
HXLINE(1350)												_hx_tmp3 = Value3;
            											}
            										}
HXDLIN(1350)										note8->color = (note8->color | (_hx_tmp3 << 24));
            									}
            								}
            								break;
            							}
            						}
            					}
HXLINE(1351)					note->set_alpha(((Float)0.999));
            				}
            			}
HXLINE(1356)			if ((note->strumTime <= ::Conductor_obj::songPosition)) {
HXLINE(1357)				note->set_alpha(((Float)0.4));
HXLINE(1358)				bool _hx_tmp;
HXDLIN(1358)				bool _hx_tmp1;
HXDLIN(1358)				bool _hx_tmp2;
HXDLIN(1358)				if ((note->strumTime > _gthis->lastConductorPos)) {
HXLINE(1358)					bool _hx_tmp;
HXDLIN(1358)					if (_gthis->playSoundBf->checked) {
HXLINE(1358)						_hx_tmp = note->mustPress;
            					}
            					else {
HXLINE(1358)						_hx_tmp = false;
            					}
HXDLIN(1358)					if (!(_hx_tmp)) {
HXLINE(1358)						if (_gthis->playSoundDad->checked) {
HXLINE(1358)							_hx_tmp2 = !(note->mustPress);
            						}
            						else {
HXLINE(1358)							_hx_tmp2 = false;
            						}
            					}
            					else {
HXLINE(1358)						_hx_tmp2 = true;
            					}
            				}
            				else {
HXLINE(1358)					_hx_tmp2 = false;
            				}
HXDLIN(1358)				if (_hx_tmp2) {
HXLINE(1358)					_hx_tmp1 = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            				}
            				else {
HXLINE(1358)					_hx_tmp1 = false;
            				}
HXDLIN(1358)				if (_hx_tmp1) {
HXLINE(1358)					_hx_tmp = (note->noteData > -1);
            				}
            				else {
HXLINE(1358)					_hx_tmp = false;
            				}
HXDLIN(1358)				if (_hx_tmp) {
HXLINE(1359)					int data = ::hx::Mod(note->noteData,4);
HXLINE(1360)					if (!(playedSound->__get(data))) {
HXLINE(1361)						::String soundToPlay = HX_("ChartingTick",61,3c,b4,d5);
HXLINE(1362)						if (::hx::IsEq( _gthis->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic),HX_("gf",1f,5a,00,00) )) {
HXLINE(1363)							soundToPlay = (HX_("GF_",60,1d,36,00) + ::Std_obj::string((data + 1)));
            						}
HXLINE(1365)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1365)						_hx_tmp->play(::Paths_obj::sound(soundToPlay,null()),null(),null(),null(),null(),null());
HXLINE(1366)						playedSound[data] = true;
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_1085_update)
HXLINE(1084)		 ::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1086)		this->curStep = this->recalculateSteps(null());
HXLINE(1088)		if ((::flixel::FlxG_obj::sound->music->_time < 0)) {
HXLINE(1089)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1090)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            		}
            		else {
HXLINE(1092)			if ((::flixel::FlxG_obj::sound->music->_time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(1093)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1094)				::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE(1095)				this->changeSection(null(),null());
            			}
            		}
HXLINE(1097)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1098)		this->_song->__SetField(HX_("song",d5,23,58,4c),this->UI_songTitle->text,::hx::paccDynamic);
HXLINE(1100)		 ::flixel::FlxSprite _hx_tmp = this->strumLine;
HXDLIN(1100)		Float _hx_tmp1 = ::Conductor_obj::songPosition;
HXDLIN(1100)		Float _hx_tmp2 = (_hx_tmp1 - this->sectionStartTime(null()));
HXDLIN(1100)		_hx_tmp->set_y(this->getYfromStrum((_hx_tmp2 / ::hx::Mod(this->curZoom,(::Conductor_obj::stepCrochet * ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) )))),null()));
HXLINE(1101)		this->camPos->set_y(this->strumLine->y);
HXLINE(1103)		bool _hx_tmp3;
HXDLIN(1103)		if ((::hx::Mod(this->curBeat,4) == 0)) {
HXLINE(1103)			_hx_tmp3 = (this->curStep >= (16 * (::editors::ChartingState_obj::curSection + 1)));
            		}
            		else {
HXLINE(1103)			_hx_tmp3 = false;
            		}
HXDLIN(1103)		if (_hx_tmp3) {
HXLINE(1105)			::haxe::Log_obj::trace(this->curStep,::hx::SourceInfo(HX_("source/editors/ChartingState.hx",8e,d0,8b,e6),1105,HX_("editors.ChartingState",45,48,cb,fe),HX_("update",09,86,05,87)));
HXLINE(1106)			::haxe::Log_obj::trace((( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * (::editors::ChartingState_obj::curSection + 1)),::hx::SourceInfo(HX_("source/editors/ChartingState.hx",8e,d0,8b,e6),1106,HX_("editors.ChartingState",45,48,cb,fe),HX_("update",09,86,05,87)));
HXLINE(1107)			::haxe::Log_obj::trace(HX_("DUMBSHIT",e6,67,07,01),::hx::SourceInfo(HX_("source/editors/ChartingState.hx",8e,d0,8b,e6),1107,HX_("editors.ChartingState",45,48,cb,fe),HX_("update",09,86,05,87)));
HXLINE(1109)			if (::hx::IsNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((::editors::ChartingState_obj::curSection + 1)) )) {
HXLINE(1111)				this->addSection(null());
            			}
HXLINE(1114)			this->changeSection((::editors::ChartingState_obj::curSection + 1),false);
            		}
            		else {
HXLINE(1115)			if ((this->strumLine->y < -10)) {
HXLINE(1116)				this->changeSection((::editors::ChartingState_obj::curSection - 1),false);
            			}
            		}
HXLINE(1122)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(1124)			if (::flixel::FlxG_obj::mouse->overlaps(this->curRenderedNotes,null())) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::editors::ChartingState,_gthis) HXARGC(1)
            				void _hx_run( ::Note note){
            					HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1128_update)
HXLINE(1128)					if (::flixel::FlxG_obj::mouse->overlaps(note,null())) {
HXLINE(1130)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1130)						if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE(1132)							_gthis->selectNote(note);
            						}
            						else {
HXLINE(1136)							::haxe::Log_obj::trace(HX_("tryin to delete note...",0c,35,c3,ba),::hx::SourceInfo(HX_("source/editors/ChartingState.hx",8e,d0,8b,e6),1136,HX_("editors.ChartingState",45,48,cb,fe),HX_("update",09,86,05,87)));
HXLINE(1137)							_gthis->deleteNote(note);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1126)				this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            			else {
HXLINE(1144)				bool _hx_tmp;
HXDLIN(1144)				bool _hx_tmp1;
HXDLIN(1144)				bool _hx_tmp2;
HXDLIN(1144)				if ((::flixel::FlxG_obj::mouse->x > this->gridBG->x)) {
HXLINE(1145)					int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN(1145)					Float _hx_tmp1 = this->gridBG->x;
HXLINE(1144)					_hx_tmp2 = (_hx_tmp < (_hx_tmp1 + this->gridBG->get_width()));
            				}
            				else {
HXLINE(1144)					_hx_tmp2 = false;
            				}
HXDLIN(1144)				if (_hx_tmp2) {
HXLINE(1144)					_hx_tmp1 = (::flixel::FlxG_obj::mouse->y > this->gridBG->y);
            				}
            				else {
HXLINE(1144)					_hx_tmp1 = false;
            				}
HXDLIN(1144)				if (_hx_tmp1) {
HXLINE(1144)					_hx_tmp = (::flixel::FlxG_obj::mouse->y < (this->gridBG->y + (( (Float)((::editors::ChartingState_obj::GRID_SIZE * ( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ))) ) * this->curZoom)));
            				}
            				else {
HXLINE(1144)					_hx_tmp = false;
            				}
HXDLIN(1144)				if (_hx_tmp) {
HXLINE(1150)					this->addNote();
            				}
            			}
            		}
HXLINE(1155)		bool _hx_tmp4;
HXDLIN(1155)		bool _hx_tmp5;
HXDLIN(1155)		bool _hx_tmp6;
HXDLIN(1155)		if ((::flixel::FlxG_obj::mouse->x > this->gridBG->x)) {
HXLINE(1156)			int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN(1156)			Float _hx_tmp1 = this->gridBG->x;
HXLINE(1155)			_hx_tmp6 = (_hx_tmp < (_hx_tmp1 + this->gridBG->get_width()));
            		}
            		else {
HXLINE(1155)			_hx_tmp6 = false;
            		}
HXDLIN(1155)		if (_hx_tmp6) {
HXLINE(1155)			_hx_tmp5 = (::flixel::FlxG_obj::mouse->y > this->gridBG->y);
            		}
            		else {
HXLINE(1155)			_hx_tmp5 = false;
            		}
HXDLIN(1155)		if (_hx_tmp5) {
HXLINE(1155)			_hx_tmp4 = (::flixel::FlxG_obj::mouse->y < (this->gridBG->y + (( (Float)((::editors::ChartingState_obj::GRID_SIZE * ( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ))) ) * this->curZoom)));
            		}
            		else {
HXLINE(1155)			_hx_tmp4 = false;
            		}
HXDLIN(1155)		if (_hx_tmp4) {
HXLINE(1160)			this->dummyArrow->set_x(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(::editors::ChartingState_obj::GRID_SIZE) ))) * ::editors::ChartingState_obj::GRID_SIZE)) ));
HXLINE(1161)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1161)			if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(1162)				this->dummyArrow->set_y(( (Float)(::flixel::FlxG_obj::mouse->y) ));
            			}
            			else {
HXLINE(1164)				this->dummyArrow->set_y(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->y) ) / ( (Float)(::editors::ChartingState_obj::GRID_SIZE) ))) * ::editors::ChartingState_obj::GRID_SIZE)) ));
            			}
            		}
HXLINE(1167)		bool blockInput = false;
HXLINE(1168)		{
HXLINE(1168)			int _g = 0;
HXDLIN(1168)			::Array< ::Dynamic> _g1 = this->blockPressWhileTypingOn;
HXDLIN(1168)			while((_g < _g1->length)){
HXLINE(1168)				 ::flixel::addons::ui::FlxUIInputText inputText = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUIInputText >();
HXDLIN(1168)				_g = (_g + 1);
HXLINE(1169)				if (inputText->hasFocus) {
HXLINE(1170)					::flixel::FlxG_obj::sound->muteKeys = ::Array_obj< int >::__new(0);
HXLINE(1171)					::flixel::FlxG_obj::sound->volumeDownKeys = ::Array_obj< int >::__new(0);
HXLINE(1172)					::flixel::FlxG_obj::sound->volumeUpKeys = ::Array_obj< int >::__new(0);
HXLINE(1173)					blockInput = true;
HXLINE(1174)					goto _hx_goto_61;
            				}
            			}
            			_hx_goto_61:;
            		}
HXLINE(1177)		if (!(blockInput)) {
HXLINE(1178)			::flixel::FlxG_obj::sound->muteKeys = ::TitleState_obj::muteKeys;
HXLINE(1179)			::flixel::FlxG_obj::sound->volumeDownKeys = ::TitleState_obj::volumeDownKeys;
HXLINE(1180)			::flixel::FlxG_obj::sound->volumeUpKeys = ::TitleState_obj::volumeUpKeys;
HXLINE(1181)			{
HXLINE(1181)				int _g = 0;
HXDLIN(1181)				::Array< ::Dynamic> _g1 = this->blockPressWhileScrolling;
HXDLIN(1181)				while((_g < _g1->length)){
HXLINE(1181)					 ::FlxUIDropDownMenuCustom dropDownMenu = _g1->__get(_g).StaticCast<  ::FlxUIDropDownMenuCustom >();
HXDLIN(1181)					_g = (_g + 1);
HXLINE(1182)					if (dropDownMenu->dropPanel->visible) {
HXLINE(1183)						blockInput = true;
HXLINE(1184)						goto _hx_goto_62;
            					}
            				}
            				_hx_goto_62:;
            			}
            		}
HXLINE(1189)		if (!(blockInput)) {
HXLINE(1191)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1191)			if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE(1193)				::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(1194)				::PlayState_obj::SONG = this->_song;
HXLINE(1195)				{
HXLINE(1195)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1195)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(1196)				if (::hx::IsNotNull( this->vocals )) {
HXLINE(1196)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(1196)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(1199)				::StageData_obj::loadDirectory(this->_song);
HXLINE(1200)				::MusicBeatState_obj::switchState(::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false));
            			}
HXLINE(1203)			bool _hx_tmp;
HXDLIN(1203)			if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1203)				_hx_tmp = ::hx::IsGreater( this->curSelectedNote->__get(1),-1 );
            			}
            			else {
HXLINE(1203)				_hx_tmp = false;
            			}
HXDLIN(1203)			if (_hx_tmp) {
HXLINE(1204)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1204)				if (_this->keyManager->checkStatus(69,_this->status)) {
HXLINE(1206)					this->changeNoteSustain(::Conductor_obj::stepCrochet);
            				}
HXLINE(1208)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1208)				if (_this1->keyManager->checkStatus(81,_this1->status)) {
HXLINE(1210)					this->changeNoteSustain(-(::Conductor_obj::stepCrochet));
            				}
            			}
HXLINE(1214)			bool _hx_tmp1;
HXDLIN(1214)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1214)			if (_this1->keyManager->checkStatus(90,_this1->status)) {
HXLINE(1214)				_hx_tmp1 = (this->zoomMult > 0);
            			}
            			else {
HXLINE(1214)				_hx_tmp1 = false;
            			}
HXDLIN(1214)			if (_hx_tmp1) {
HXLINE(1215)				--this->zoomMult;
HXLINE(1216)				this->updateZoom();
            			}
HXLINE(1218)			bool _hx_tmp2;
HXDLIN(1218)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1218)			if (_this2->keyManager->checkStatus(88,_this2->status)) {
HXLINE(1218)				_hx_tmp2 = (this->zoomMult < 4);
            			}
            			else {
HXLINE(1218)				_hx_tmp2 = false;
            			}
HXDLIN(1218)			if (_hx_tmp2) {
HXLINE(1219)				this->zoomMult++;
HXLINE(1220)				this->updateZoom();
            			}
HXLINE(1223)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1223)			if (_this3->keyManager->checkStatus(9,_this3->status)) {
HXLINE(1225)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1225)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(1227)					{
HXLINE(1227)						 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN(1227)						_g->set_selected_tab((_g->get_selected_tab() - 1));
            					}
HXLINE(1228)					if ((this->UI_box->get_selected_tab() < 0)) {
HXLINE(1229)						this->UI_box->set_selected_tab(2);
            					}
            				}
            				else {
HXLINE(1233)					{
HXLINE(1233)						 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN(1233)						_g->set_selected_tab((_g->get_selected_tab() + 1));
            					}
HXLINE(1234)					if ((this->UI_box->get_selected_tab() >= 3)) {
HXLINE(1235)						this->UI_box->set_selected_tab(0);
            					}
            				}
            			}
HXLINE(1239)			 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1239)			if (_this4->keyManager->checkStatus(32,_this4->status)) {
HXLINE(1241)				if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(1243)					::flixel::FlxG_obj::sound->music->pause();
HXLINE(1244)					if (::hx::IsNotNull( this->vocals )) {
HXLINE(1244)						this->vocals->pause();
            					}
            				}
            				else {
HXLINE(1248)					if (::hx::IsNotNull( this->vocals )) {
HXLINE(1249)						this->vocals->play(null(),null(),null());
HXLINE(1250)						this->vocals->pause();
HXLINE(1251)						this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE(1252)						this->vocals->play(null(),null(),null());
            					}
HXLINE(1254)					::flixel::FlxG_obj::sound->music->play(null(),null(),null());
            				}
            			}
HXLINE(1258)			 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1258)			if (_this5->keyManager->checkStatus(82,_this5->status)) {
HXLINE(1260)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1260)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(1261)					this->resetSection(true);
            				}
            				else {
HXLINE(1263)					this->resetSection(null());
            				}
            			}
HXLINE(1266)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE(1268)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1269)				{
HXLINE(1269)					 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(1269)					_g->set_time((_g->_time - ((( (Float)(::flixel::FlxG_obj::mouse->wheel) ) * ::Conductor_obj::stepCrochet) * ((Float)0.4))));
            				}
HXLINE(1270)				if (::hx::IsNotNull( this->vocals )) {
HXLINE(1271)					this->vocals->pause();
HXLINE(1272)					this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            				}
            			}
HXLINE(1276)			bool _hx_tmp3;
HXDLIN(1276)			 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1276)			if (!(_this6->keyManager->checkStatus(87,_this6->status))) {
HXLINE(1276)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1276)				_hx_tmp3 = _this->keyManager->checkStatus(83,_this->status);
            			}
            			else {
HXLINE(1276)				_hx_tmp3 = true;
            			}
HXDLIN(1276)			if (_hx_tmp3) {
HXLINE(1278)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1280)				Float holdingShift;
HXDLIN(1280)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1280)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(1280)					holdingShift = ( (Float)(3) );
            				}
            				else {
HXLINE(1280)					holdingShift = ( (Float)(1) );
            				}
HXLINE(1281)				Float daTime = ((( (Float)(700) ) * ::flixel::FlxG_obj::elapsed) * holdingShift);
HXLINE(1283)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1283)				if (_this1->keyManager->checkStatus(87,_this1->status)) {
HXLINE(1285)					 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(1285)					_g->set_time((_g->_time - daTime));
            				}
            				else {
HXLINE(1288)					 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(1288)					_g->set_time((_g->_time + daTime));
            				}
HXLINE(1290)				if (::hx::IsNotNull( this->vocals )) {
HXLINE(1291)					this->vocals->pause();
HXLINE(1292)					this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            				}
            			}
HXLINE(1296)			int shiftThing = 1;
HXLINE(1297)			 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1297)			if (_this7->keyManager->checkStatus(16,_this7->status)) {
HXLINE(1298)				shiftThing = 4;
            			}
HXLINE(1300)			bool _hx_tmp4;
HXDLIN(1300)			 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1300)			if (!(_this8->keyManager->checkStatus(39,_this8->status))) {
HXLINE(1300)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1300)				_hx_tmp4 = _this->keyManager->checkStatus(68,_this->status);
            			}
            			else {
HXLINE(1300)				_hx_tmp4 = true;
            			}
HXDLIN(1300)			if (_hx_tmp4) {
HXLINE(1301)				this->changeSection((::editors::ChartingState_obj::curSection + shiftThing),null());
            			}
HXLINE(1302)			bool _hx_tmp5;
HXDLIN(1302)			 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1302)			if (!(_this9->keyManager->checkStatus(37,_this9->status))) {
HXLINE(1302)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1302)				_hx_tmp5 = _this->keyManager->checkStatus(65,_this->status);
            			}
            			else {
HXLINE(1302)				_hx_tmp5 = true;
            			}
HXDLIN(1302)			if (_hx_tmp5) {
HXLINE(1303)				if ((::editors::ChartingState_obj::curSection <= 0)) {
HXLINE(1304)					this->changeSection((( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1),null());
            				}
            				else {
HXLINE(1306)					this->changeSection((::editors::ChartingState_obj::curSection - shiftThing),null());
            				}
            			}
            		}
            		else {
HXLINE(1309)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1309)			if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE(1310)				int _g = 0;
HXDLIN(1310)				int _g1 = this->blockPressWhileTypingOn->length;
HXDLIN(1310)				while((_g < _g1)){
HXLINE(1310)					_g = (_g + 1);
HXDLIN(1310)					int i = (_g - 1);
HXLINE(1311)					if (this->blockPressWhileTypingOn->__get(i).StaticCast<  ::flixel::addons::ui::FlxUIInputText >()->hasFocus) {
HXLINE(1312)						this->blockPressWhileTypingOn->__get(i).StaticCast<  ::flixel::addons::ui::FlxUIInputText >()->set_hasFocus(false);
            					}
            				}
            			}
            		}
HXLINE(1317)		this->_song->__SetField(HX_("bpm",df,be,4a,00),this->tempBpm,::hx::paccDynamic);
HXLINE(1319)		if ((::flixel::FlxG_obj::sound->music->_time < 0)) {
HXLINE(1320)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1321)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            		}
            		else {
HXLINE(1323)			if ((::flixel::FlxG_obj::sound->music->_time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(1324)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1325)				::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE(1326)				this->changeSection(null(),null());
            			}
            		}
HXLINE(1328)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1329)		 ::flixel::FlxSprite _hx_tmp7 = this->strumLine;
HXDLIN(1329)		Float _hx_tmp8 = ::Conductor_obj::songPosition;
HXDLIN(1329)		Float _hx_tmp9 = (_hx_tmp8 - this->sectionStartTime(null()));
HXDLIN(1329)		_hx_tmp7->set_y(this->getYfromStrum((_hx_tmp9 / ::hx::Mod(this->curZoom,(::Conductor_obj::stepCrochet * ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) )))),null()));
HXLINE(1330)		this->camPos->set_y(this->strumLine->y);
HXLINE(1332)		 ::flixel::text::FlxText _hx_tmp10 = this->bpmTxt;
HXLINE(1333)		::String _hx_tmp11 = (::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::Conductor_obj::songPosition / ( (Float)(1000) )),2)) + HX_(" / ",31,71,18,00));
HXDLIN(1333)		::String _hx_tmp12 = ((_hx_tmp11 + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),2))) + HX_("\nSection: ",61,ca,0c,ad));
HXLINE(1332)		_hx_tmp10->set_text((((((_hx_tmp12 + ::editors::ChartingState_obj::curSection) + HX_("\n\nBeat: ",7c,6a,4b,a7)) + this->curBeat) + HX_("\n\nStep: ",d2,11,01,19)) + this->curStep));
HXLINE(1338)		::Array< bool > playedSound = ::Array_obj< bool >::fromData( _hx_array_data_fecb4845_67,4);
HXLINE(1339)		this->curRenderedNotes->forEachAlive( ::Dynamic(new _hx_Closure_1(_gthis,playedSound,elapsed)),null());
HXLINE(1372)		bool _hx_tmp13;
HXDLIN(1372)		if (this->metronome->checked) {
HXLINE(1372)			_hx_tmp13 = (this->lastConductorPos != ::Conductor_obj::songPosition);
            		}
            		else {
HXLINE(1372)			_hx_tmp13 = false;
            		}
HXDLIN(1372)		if (_hx_tmp13) {
HXLINE(1373)			Float metroInterval = (( (Float)(60) ) / this->metronomeStepper->value);
HXLINE(1374)			int metroStep = ::Math_obj::floor((((::Conductor_obj::songPosition + this->metronomeOffsetStepper->value) / metroInterval) / ( (Float)(1000) )));
HXLINE(1375)			int lastMetroStep = ::Math_obj::floor((((this->lastConductorPos + this->metronomeOffsetStepper->value) / metroInterval) / ( (Float)(1000) )));
HXLINE(1376)			if ((metroStep != lastMetroStep)) {
HXLINE(1377)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1377)				_hx_tmp->play(::Paths_obj::sound(HX_("Metronome_Tick",0a,a7,57,13),null()),null(),null(),null(),null(),null());
            			}
            		}
HXLINE(1381)		this->lastConductorPos = ::Conductor_obj::songPosition;
HXLINE(1382)		this->super::update(elapsed);
            	}


void ChartingState_obj::updateZoom(){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1385_updateZoom)
HXLINE(1386)		this->curZoom = ((Float)0.5);
HXLINE(1387)		if ((this->zoomMult > 0)) {
HXLINE(1388)			this->curZoom = ( (Float)((1 << (this->zoomMult - 1))) );
            		}
HXLINE(1390)		this->zoomTxt->set_text(((HX_("Zoom: ",99,74,4a,2f) + this->curZoom) + HX_("x",78,00,00,00)));
HXLINE(1391)		this->reloadGridLayer();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateZoom,(void))

void ChartingState_obj::loadAudioBuffer(){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1394_loadAudioBuffer)
HXLINE(1395)		this->audioBuffers[0] = null();
HXLINE(1397)		if (::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + ((HX_("songs/",71,e7,88,2d) + this->currentSongName) + HX_("/Inst.ogg",f6,06,30,cc))))) {
HXLINE(1398)			this->audioBuffers[0] = ::lime::media::AudioBuffer_obj::fromFile((HX_("mods/",9e,2f,58,0c) + ((HX_("songs/",71,e7,88,2d) + this->currentSongName) + HX_("/Inst.ogg",f6,06,30,cc))));
            		}
            		else {
HXLINE(1402)			::String song = this->currentSongName;
HXDLIN(1402)			::String file = (HX_("mods/",9e,2f,58,0c) + (((HX_("songs/",71,e7,88,2d) + (::StringTools_obj::replace(song.toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)) + HX_("/Inst",95,b3,69,40))) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)));
HXDLIN(1402)			 ::openfl::media::Sound file1;
HXDLIN(1402)			if (::sys::FileSystem_obj::exists(file)) {
HXLINE(1402)				if (!(::Paths_obj::customSoundsLoaded->exists(file))) {
HXLINE(1402)					::Dynamic this1 = ::Paths_obj::customSoundsLoaded;
HXDLIN(1402)					( ( ::haxe::ds::StringMap)(this1) )->set(file,::openfl::media::Sound_obj::fromFile(file));
            				}
HXDLIN(1402)				file1 = ( ( ::openfl::media::Sound)(::Paths_obj::customSoundsLoaded->get(file)) );
            			}
            			else {
HXLINE(1402)				file1 = null();
            			}
HXDLIN(1402)			 ::Dynamic leVocals;
HXDLIN(1402)			if (::hx::IsNotNull( file1 )) {
HXLINE(1402)				leVocals = file1;
            			}
            			else {
HXLINE(1402)				leVocals = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + ::StringTools_obj::replace(song.toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00))) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
            			}
HXLINE(1403)			bool _hx_tmp;
HXDLIN(1403)			if (!(::Std_obj::isOfType(leVocals,::hx::ClassOf< ::openfl::media::Sound >()))) {
HXLINE(1403)				_hx_tmp = ::openfl::utils::Assets_obj::exists(( (::String)(leVocals) ),null());
            			}
            			else {
HXLINE(1403)				_hx_tmp = false;
            			}
HXDLIN(1403)			if (_hx_tmp) {
HXLINE(1404)				this->audioBuffers[0] = ::lime::media::AudioBuffer_obj::fromFile((HX_("./",41,28,00,00) + ::Std_obj::string(leVocals->__Field(HX_("substr",31,ef,0a,9a),::hx::paccDynamic)(6))));
            			}
            		}
HXLINE(1411)		this->audioBuffers[1] = null();
HXLINE(1413)		if (::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + ((HX_("songs/",71,e7,88,2d) + this->currentSongName) + HX_("/Voices.ogg",f1,c4,e0,fa))))) {
HXLINE(1414)			this->audioBuffers[1] = ::lime::media::AudioBuffer_obj::fromFile((HX_("mods/",9e,2f,58,0c) + ((HX_("songs/",71,e7,88,2d) + this->currentSongName) + HX_("/Voices.ogg",f1,c4,e0,fa))));
            		}
            		else {
HXLINE(1417)			::String song = this->currentSongName;
HXDLIN(1417)			::String file = (HX_("mods/",9e,2f,58,0c) + (((HX_("songs/",71,e7,88,2d) + (::StringTools_obj::replace(song.toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)) + HX_("/Voices",10,18,4f,34))) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)));
HXDLIN(1417)			 ::openfl::media::Sound file1;
HXDLIN(1417)			if (::sys::FileSystem_obj::exists(file)) {
HXLINE(1417)				if (!(::Paths_obj::customSoundsLoaded->exists(file))) {
HXLINE(1417)					::Dynamic this1 = ::Paths_obj::customSoundsLoaded;
HXDLIN(1417)					( ( ::haxe::ds::StringMap)(this1) )->set(file,::openfl::media::Sound_obj::fromFile(file));
            				}
HXDLIN(1417)				file1 = ( ( ::openfl::media::Sound)(::Paths_obj::customSoundsLoaded->get(file)) );
            			}
            			else {
HXLINE(1417)				file1 = null();
            			}
HXDLIN(1417)			 ::Dynamic leVocals;
HXDLIN(1417)			if (::hx::IsNotNull( file1 )) {
HXLINE(1417)				leVocals = file1;
            			}
            			else {
HXLINE(1417)				leVocals = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + ::StringTools_obj::replace(song.toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00))) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
            			}
HXLINE(1418)			bool _hx_tmp;
HXDLIN(1418)			if (!(::Std_obj::isOfType(leVocals,::hx::ClassOf< ::openfl::media::Sound >()))) {
HXLINE(1418)				_hx_tmp = ::openfl::utils::Assets_obj::exists(( (::String)(leVocals) ),null());
            			}
            			else {
HXLINE(1418)				_hx_tmp = false;
            			}
HXDLIN(1418)			if (_hx_tmp) {
HXLINE(1419)				this->audioBuffers[1] = ::lime::media::AudioBuffer_obj::fromFile((HX_("./",41,28,00,00) + ::Std_obj::string(leVocals->__Field(HX_("substr",31,ef,0a,9a),::hx::paccDynamic)(6))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadAudioBuffer,(void))

void ChartingState_obj::reloadGridLayer(){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_1427_reloadGridLayer)
HXLINE(1428)		this->gridLayer->clear();
HXLINE(1429)		int _hx_tmp = ::editors::ChartingState_obj::GRID_SIZE;
HXDLIN(1429)		int _hx_tmp1 = ::editors::ChartingState_obj::GRID_SIZE;
HXDLIN(1429)		int _hx_tmp2 = (::editors::ChartingState_obj::GRID_SIZE * 9);
HXDLIN(1429)		this->gridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(_hx_tmp,_hx_tmp1,_hx_tmp2,::Std_obj::_hx_int((( (Float)((::editors::ChartingState_obj::GRID_SIZE * 32)) ) * this->curZoom)),null(),null(),null());
HXLINE(1430)		this->gridLayer->add(this->gridBG).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1433)		if (::hx::IsNotNull( this->waveformEnabled )) {
HXLINE(1434)			this->updateWaveform();
            		}
HXLINE(1438)		 ::flixel::FlxSprite gridBlack =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(this->gridBG->get_height() / ( (Float)(2) )),null());
HXDLIN(1438)		int gridBlack1 = ::Std_obj::_hx_int(( (Float)((::editors::ChartingState_obj::GRID_SIZE * 9)) ));
HXDLIN(1438)		 ::flixel::FlxSprite gridBlack2 = gridBlack->makeGraphic(gridBlack1,::Std_obj::_hx_int((this->gridBG->get_height() / ( (Float)(2) ))),-16777216,null(),null());
HXLINE(1439)		gridBlack2->set_alpha(((Float)0.4));
HXLINE(1440)		this->gridLayer->add(gridBlack2).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1442)		Float gridBlackLine = this->gridBG->x;
HXDLIN(1442)		Float gridBlackLine1 = (gridBlackLine + this->gridBG->get_width());
HXDLIN(1442)		 ::flixel::FlxSprite gridBlackLine2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(gridBlackLine1 - ( (Float)((::editors::ChartingState_obj::GRID_SIZE * 4)) )),null(),null());
HXDLIN(1442)		 ::flixel::FlxSprite gridBlackLine3 = gridBlackLine2->makeGraphic(2,::Std_obj::_hx_int(this->gridBG->get_height()),-16777216,null(),null());
HXLINE(1443)		this->gridLayer->add(gridBlackLine3).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1445)		 ::flixel::FlxSprite gridBlackLine4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->gridBG->x + ::editors::ChartingState_obj::GRID_SIZE),null(),null());
HXDLIN(1445)		gridBlackLine3 = gridBlackLine4->makeGraphic(2,::Std_obj::_hx_int(this->gridBG->get_height()),-16777216,null(),null());
HXLINE(1446)		this->gridLayer->add(gridBlackLine3).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1447)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,reloadGridLayer,(void))

void ChartingState_obj::updateWaveform(){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_1451_updateWaveform)
HXLINE(1453)		 ::flixel::FlxSprite _hx_tmp = this->waveformSprite;
HXDLIN(1453)		int _hx_tmp1 = ::Std_obj::_hx_int(( (Float)((::editors::ChartingState_obj::GRID_SIZE * 8)) ));
HXDLIN(1453)		_hx_tmp->makeGraphic(_hx_tmp1,::Std_obj::_hx_int(this->gridBG->get_height()),16777215,null(),null());
HXLINE(1454)		 ::openfl::display::BitmapData _hx_tmp2 = this->waveformSprite->get_pixels();
HXDLIN(1454)		Float _hx_tmp3 = this->gridBG->get_width();
HXDLIN(1454)		_hx_tmp2->fillRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,_hx_tmp3,this->gridBG->get_height()),16777215);
HXLINE(1456)		int checkForVoices = 1;
HXLINE(1457)		if (this->waveformUseInstrumental->checked) {
HXLINE(1457)			checkForVoices = 0;
            		}
HXLINE(1459)		bool _hx_tmp4;
HXDLIN(1459)		if (this->waveformEnabled->checked) {
HXLINE(1459)			_hx_tmp4 = ::hx::IsNull( this->audioBuffers->__get(checkForVoices).StaticCast<  ::lime::media::AudioBuffer >() );
            		}
            		else {
HXLINE(1459)			_hx_tmp4 = true;
            		}
HXDLIN(1459)		if (_hx_tmp4) {
HXLINE(1461)			return;
            		}
HXLINE(1464)		Float sampleMult = (( (Float)(this->audioBuffers->__get(checkForVoices).StaticCast<  ::lime::media::AudioBuffer >()->sampleRate) ) / ( (Float)(44100) ));
HXLINE(1465)		int index = ::Std_obj::_hx_int(((this->sectionStartTime(null()) * ((Float)44.0875)) * sampleMult));
HXLINE(1466)		int drawIndex = 0;
HXLINE(1468)		Float curZoom = ((Float)0.5);
HXLINE(1469)		if ((this->zoomMult > 0)) {
HXLINE(1470)			curZoom = ( (Float)((1 << (this->zoomMult - 1))) );
            		}
HXLINE(1473)		int steps = ( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) );
HXLINE(1474)		bool _hx_tmp5;
HXDLIN(1474)		if (!(::Math_obj::isNaN(( (Float)(steps) )))) {
HXLINE(1474)			_hx_tmp5 = (steps < 1);
            		}
            		else {
HXLINE(1474)			_hx_tmp5 = true;
            		}
HXDLIN(1474)		if (_hx_tmp5) {
HXLINE(1474)			steps = 16;
            		}
HXLINE(1475)		int samplesPerRow = ::Std_obj::_hx_int((((((::Conductor_obj::stepCrochet * ( (Float)(steps) )) * ((Float)1.1)) * sampleMult) / ( (Float)(16) )) / curZoom));
HXLINE(1476)		if ((samplesPerRow < 1)) {
HXLINE(1476)			samplesPerRow = 1;
            		}
HXLINE(1477)		 ::haxe::io::Bytes waveBytes = this->audioBuffers->__get(checkForVoices).StaticCast<  ::lime::media::AudioBuffer >()->data->buffer;
HXLINE(1479)		Float min = ( (Float)(0) );
HXLINE(1480)		Float max = ( (Float)(0) );
HXLINE(1481)		while((index < (waveBytes->length - 1))){
HXLINE(1483)			int pos = (index * 4);
HXDLIN(1483)			int byte = (( (int)(waveBytes->b->__get(pos)) ) | (( (int)(waveBytes->b->__get((pos + 1))) ) << 8));
HXLINE(1485)			if ((byte > ((Float)32767.5))) {
HXLINE(1486)				byte = (byte - 65535);
            			}
HXLINE(1488)			Float sample = (( (Float)(byte) ) / ( (Float)(65535) ));
HXLINE(1490)			if ((sample > 0)) {
HXLINE(1492)				if ((sample > max)) {
HXLINE(1493)					max = sample;
            				}
            			}
            			else {
HXLINE(1495)				if ((sample < 0)) {
HXLINE(1497)					if ((sample < min)) {
HXLINE(1498)						min = sample;
            					}
            				}
            			}
HXLINE(1501)			if ((::hx::Mod(index,samplesPerRow) == 0)) {
HXLINE(1510)				Float pixelsMin = ::Math_obj::abs((min * ( (Float)((::editors::ChartingState_obj::GRID_SIZE * 8)) )));
HXLINE(1511)				Float pixelsMax = (max * ( (Float)((::editors::ChartingState_obj::GRID_SIZE * 8)) ));
HXLINE(1512)				 ::openfl::display::BitmapData _hx_tmp = this->waveformSprite->get_pixels();
HXDLIN(1512)				_hx_tmp->fillRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,::Std_obj::_hx_int((( (Float)((::editors::ChartingState_obj::GRID_SIZE * 4)) ) - pixelsMin)),drawIndex,(pixelsMin + pixelsMax),1),-16776961);
HXLINE(1513)				drawIndex = (drawIndex + 1);
HXLINE(1515)				min = ( (Float)(0) );
HXLINE(1516)				max = ( (Float)(0) );
HXLINE(1518)				if ((drawIndex > this->gridBG->get_height())) {
HXLINE(1518)					goto _hx_goto_71;
            				}
            			}
HXLINE(1521)			index = (index + 1);
            		}
            		_hx_goto_71:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateWaveform,(void))

void ChartingState_obj::changeNoteSustain(Float value){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1527_changeNoteSustain)
HXLINE(1528)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1530)			if (::hx::IsNotNull( this->curSelectedNote->__get(2) )) {
HXLINE(1532)				::cpp::VirtualArray _hx_tmp = this->curSelectedNote;
HXDLIN(1532)				int _hx_tmp1 = 2;
HXDLIN(1532)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + value));
HXLINE(1533)				this->curSelectedNote->set(2,::Math_obj::max(( (Float)(this->curSelectedNote->__get(2)) ),( (Float)(0) )));
            			}
            		}
HXLINE(1537)		this->updateNoteUI();
HXLINE(1538)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,changeNoteSustain,(void))

int ChartingState_obj::recalculateSteps(::hx::Null< Float >  __o_add){
            		Float add = __o_add.Default(0);
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1542_recalculateSteps)
HXLINE(1543)		 ::Dynamic lastChange =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("stepTime",79,75,25,a0),0)
            			->setFixed(1,HX_("bpm",df,be,4a,00),( (Float)(0) ))
            			->setFixed(2,HX_("songTime",82,2a,d5,3a),( (Float)(0) )));
HXLINE(1548)		{
HXLINE(1548)			int _g = 0;
HXDLIN(1548)			int _g1 = ::Conductor_obj::bpmChangeMap->length;
HXDLIN(1548)			while((_g < _g1)){
HXLINE(1548)				_g = (_g + 1);
HXDLIN(1548)				int i = (_g - 1);
HXLINE(1550)				if (::hx::IsGreater( ::flixel::FlxG_obj::sound->music->_time,::Conductor_obj::bpmChangeMap->__get(i)->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic) )) {
HXLINE(1551)					lastChange = ::Conductor_obj::bpmChangeMap->__get(i);
            				}
            			}
            		}
HXLINE(1554)		this->curStep = ( (int)((lastChange->__Field(HX_("stepTime",79,75,25,a0),::hx::paccDynamic) + ::Math_obj::floor((((::flixel::FlxG_obj::sound->music->_time - ( (Float)(lastChange->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic)) )) + add) / ::Conductor_obj::stepCrochet)))) );
HXLINE(1555)		this->updateBeat();
HXLINE(1557)		return this->curStep;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,recalculateSteps,return )

void ChartingState_obj::resetSection(::hx::Null< bool >  __o_songBeginning){
            		bool songBeginning = __o_songBeginning.Default(false);
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1561_resetSection)
HXLINE(1562)		this->updateGrid();
HXLINE(1564)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1566)		 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN(1566)		_hx_tmp->set_time(this->sectionStartTime(null()));
HXLINE(1568)		if (songBeginning) {
HXLINE(1570)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE(1571)			::editors::ChartingState_obj::curSection = 0;
            		}
HXLINE(1574)		if (::hx::IsNotNull( this->vocals )) {
HXLINE(1575)			this->vocals->pause();
HXLINE(1576)			this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            		}
HXLINE(1578)		this->updateCurStep();
HXLINE(1580)		this->updateGrid();
HXLINE(1581)		this->updateSectionUI();
HXLINE(1582)		this->updateWaveform();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,resetSection,(void))

void ChartingState_obj::changeSection(::hx::Null< int >  __o_sec, ::Dynamic __o_updateMusic){
            		int sec = __o_sec.Default(0);
            		 ::Dynamic updateMusic = __o_updateMusic;
            		if (::hx::IsNull(__o_updateMusic)) updateMusic = true;
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1586_changeSection)
HXLINE(1587)		::haxe::Log_obj::trace((HX_("changing section",72,75,c1,9c) + sec),::hx::SourceInfo(HX_("source/editors/ChartingState.hx",8e,d0,8b,e6),1587,HX_("editors.ChartingState",45,48,cb,fe),HX_("changeSection",55,aa,ac,be)));
HXLINE(1589)		if (::hx::IsNotNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec) )) {
HXLINE(1591)			::editors::ChartingState_obj::curSection = sec;
HXLINE(1593)			this->updateGrid();
HXLINE(1595)			if (( (bool)(updateMusic) )) {
HXLINE(1597)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1607)				 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN(1607)				_hx_tmp->set_time(this->sectionStartTime(null()));
HXLINE(1608)				if (::hx::IsNotNull( this->vocals )) {
HXLINE(1609)					this->vocals->pause();
HXLINE(1610)					this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            				}
HXLINE(1612)				this->updateCurStep();
            			}
HXLINE(1615)			this->updateGrid();
HXLINE(1616)			this->updateSectionUI();
            		}
            		else {
HXLINE(1620)			this->changeSection(null(),null());
            		}
HXLINE(1622)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1623)		this->updateWaveform();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,changeSection,(void))

void ChartingState_obj::updateSectionUI(){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1627_updateSectionUI)
HXLINE(1628)		 ::Dynamic sec =  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection);
HXLINE(1630)		this->stepperLength->set_value(( (Float)(sec->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ));
HXLINE(1631)		this->check_mustHitSection->set_checked(( (bool)(sec->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(1632)		this->check_altAnim->set_checked(( (bool)(sec->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ));
HXLINE(1633)		this->check_changeBPM->set_checked(( (bool)(sec->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) ));
HXLINE(1634)		this->stepperSectionBPM->set_value(( (Float)(sec->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(1636)		this->updateHeads();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateSectionUI,(void))

void ChartingState_obj::updateHeads(){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1640_updateHeads)
HXLINE(1641)		::String healthIconP1 = this->loadHealthIconFromCharacter(( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE(1642)		::String healthIconP2 = this->loadHealthIconFromCharacter(( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE(1644)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(1646)			this->leftIcon->changeIcon(healthIconP1);
HXLINE(1647)			this->rightIcon->changeIcon(healthIconP2);
            		}
            		else {
HXLINE(1651)			this->leftIcon->changeIcon(healthIconP2);
HXLINE(1652)			this->rightIcon->changeIcon(healthIconP1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateHeads,(void))

::String ChartingState_obj::loadHealthIconFromCharacter(::String _hx_char){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_1656_loadHealthIconFromCharacter)
HXLINE(1657)		::String characterPath = ((HX_("characters/",45,3c,bf,be) + _hx_char) + HX_(".json",56,f1,d6,c2));
HXLINE(1659)		::String path = (HX_("mods/",9e,2f,58,0c) + characterPath);
HXLINE(1660)		if (!(::sys::FileSystem_obj::exists(path))) {
HXLINE(1661)			path = (HX_("assets/",4c,2a,dc,36) + characterPath);
            		}
HXLINE(1664)		if (!(::sys::FileSystem_obj::exists(path))) {
HXLINE(1670)			path = (HX_("assets/",4c,2a,dc,36) + ((HX_("characters/",45,3c,bf,be) + ::Character_obj::DEFAULT_CHARACTER) + HX_(".json",56,f1,d6,c2)));
            		}
HXLINE(1674)		::String rawJson = ::sys::io::File_obj::getContent(path);
HXLINE(1679)		 ::Dynamic json =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,rawJson)->doParse();
HXLINE(1680)		return ( (::String)(json->__Field(HX_("healthicon",15,8e,6f,17),::hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadHealthIconFromCharacter,return )

void ChartingState_obj::updateNoteUI(){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1685_updateNoteUI)
HXDLIN(1685)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(1686)			if (::hx::IsGreater( this->curSelectedNote->__get(1),-1 )) {
HXLINE(1687)				this->stepperSusLength->set_value(( (Float)(this->curSelectedNote->__get(2)) ));
HXLINE(1688)				if (::hx::IsNotNull( this->curSelectedNote->__get(3) )) {
HXLINE(1689)					this->currentType = this->noteTypeMap->get_int(( (::String)(this->curSelectedNote->__get(3)) ));
HXLINE(1690)					if ((this->currentType <= 0)) {
HXLINE(1691)						this->noteTypeDropDown->set_selectedLabel(HX_("",00,00,00,00));
            					}
            					else {
HXLINE(1693)						 ::FlxUIDropDownMenuCustom _hx_tmp = this->noteTypeDropDown;
HXDLIN(1693)						::String _hx_tmp1 = (this->currentType + HX_(". ",32,28,00,00));
HXDLIN(1693)						_hx_tmp->set_selectedLabel((_hx_tmp1 + ::Std_obj::string(this->curSelectedNote->__get(3))));
            					}
            				}
            			}
            			else {
HXLINE(1697)				this->eventDropDown->set_selectedLabel(( (::String)(this->curSelectedNote->__get(2)) ));
HXLINE(1698)				int selected = ( (int)(::Std_obj::parseInt(this->eventDropDown->get_selectedId())) );
HXLINE(1699)				bool _hx_tmp;
HXDLIN(1699)				if ((selected > 0)) {
HXLINE(1699)					_hx_tmp = (selected < this->eventStuff->get_length());
            				}
            				else {
HXLINE(1699)					_hx_tmp = false;
            				}
HXDLIN(1699)				if (_hx_tmp) {
HXLINE(1700)					this->descText->set_text(( (::String)(this->eventStuff->__get(selected)->__GetItem(1)) ));
            				}
HXLINE(1702)				this->value1InputText->set_text(( (::String)(this->curSelectedNote->__get(3)) ));
HXLINE(1703)				this->value2InputText->set_text(( (::String)(this->curSelectedNote->__get(4)) ));
            			}
HXLINE(1705)			this->strumTimeInputText->set_text(( (::String)(this->curSelectedNote->__get(0)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateNoteUI,(void))

void ChartingState_obj::updateGrid(){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_1710_updateGrid)
HXLINE(1711)		this->curRenderedNotes->clear();
HXLINE(1712)		this->curRenderedSustains->clear();
HXLINE(1713)		this->curRenderedNoteType->clear();
HXLINE(1714)		this->nextRenderedNotes->clear();
HXLINE(1715)		this->nextRenderedSustains->clear();
HXLINE(1717)		bool _hx_tmp;
HXDLIN(1717)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(1717)			_hx_tmp = ::hx::IsGreater(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE(1717)			_hx_tmp = false;
            		}
HXDLIN(1717)		if (_hx_tmp) {
HXLINE(1719)			::Conductor_obj::changeBPM(( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(1720)			::haxe::Log_obj::trace(HX_("BPM of this section:",6f,46,65,9b),::hx::SourceInfo(HX_("source/editors/ChartingState.hx",8e,d0,8b,e6),1720,HX_("editors.ChartingState",45,48,cb,fe),HX_("updateGrid",6f,c1,20,fd)));
            		}
            		else {
HXLINE(1725)			Float daBPM = ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(1726)			{
HXLINE(1726)				int _g = 0;
HXDLIN(1726)				int _g1 = ::editors::ChartingState_obj::curSection;
HXDLIN(1726)				while((_g < _g1)){
HXLINE(1726)					_g = (_g + 1);
HXDLIN(1726)					int i = (_g - 1);
HXLINE(1727)					if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(1728)						daBPM = ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            					}
            				}
            			}
HXLINE(1729)			::Conductor_obj::changeBPM(daBPM);
            		}
HXLINE(1747)		{
HXLINE(1747)			int _g = 0;
HXDLIN(1747)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1747)			while((_g < _g1->get_length())){
HXLINE(1747)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(1747)				_g = (_g + 1);
HXLINE(1749)				 ::Note note = this->setupNoteData(( (::cpp::VirtualArray)(i) ),false);
HXLINE(1750)				this->curRenderedNotes->add(note).StaticCast<  ::Note >();
HXLINE(1751)				if ((note->sustainLength > 0)) {
HXLINE(1753)					 ::flixel::group::FlxTypedGroup _hx_tmp = this->curRenderedSustains;
HXDLIN(1753)					_hx_tmp->add(this->setupSusNote(note)).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(1756)				if ((note->y < -150)) {
HXLINE(1756)					note->set_y(( (Float)(-150) ));
            				}
HXLINE(1758)				if ((note->noteData < 0)) {
HXLINE(1759)					 ::editors::AttachedFlxText daText =  ::editors::AttachedFlxText_obj::__alloc( HX_CTX ,0,0,400,((((((((HX_("Event: ",20,dd,eb,d3) + note->eventName) + HX_(" (",08,1c,00,00)) + ::Math_obj::floor(note->strumTime)) + HX_(" ms)",e3,ed,79,15)) + HX_("\nValue 1: ",7e,4f,b3,9b)) + note->eventVal1) + HX_("\nValue 2: ",bf,11,b4,9b)) + note->eventVal2),12,null());
HXLINE(1760)					daText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),12,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1761)					daText->xAdd = ( (Float)(-410) );
HXLINE(1762)					daText->set_borderSize(( (Float)(1) ));
HXLINE(1763)					this->curRenderedNoteType->add(daText).StaticCast<  ::flixel::text::FlxText >();
HXLINE(1764)					daText->sprTracker = note;
            				}
            				else {
HXLINE(1766)					bool _hx_tmp;
HXDLIN(1766)					bool _hx_tmp1;
HXDLIN(1766)					if (::hx::IsNotNull( i->__GetItem(3) )) {
HXLINE(1766)						_hx_tmp1 = ::hx::IsNotNull( note->noteType );
            					}
            					else {
HXLINE(1766)						_hx_tmp1 = false;
            					}
HXDLIN(1766)					if (_hx_tmp1) {
HXLINE(1766)						_hx_tmp = (note->noteType.length > 0);
            					}
            					else {
HXLINE(1766)						_hx_tmp = false;
            					}
HXDLIN(1766)					if (_hx_tmp) {
HXLINE(1767)						 ::Dynamic typeInt = this->noteTypeMap->get(i->__GetItem(3));
HXLINE(1768)						::String theType = (HX_("",00,00,00,00) + typeInt);
HXLINE(1769)						if (::hx::IsNull( typeInt )) {
HXLINE(1769)							theType = HX_("?",3f,00,00,00);
            						}
HXLINE(1771)						 ::editors::AttachedFlxText daText =  ::editors::AttachedFlxText_obj::__alloc( HX_CTX ,0,0,100,theType,24,null());
HXLINE(1772)						daText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),24,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1773)						daText->xAdd = ( (Float)(-32) );
HXLINE(1774)						daText->yAdd = ( (Float)(6) );
HXLINE(1775)						daText->set_borderSize(( (Float)(1) ));
HXLINE(1776)						this->curRenderedNoteType->add(daText).StaticCast<  ::flixel::text::FlxText >();
HXLINE(1777)						daText->sprTracker = note;
            					}
HXLINE(1779)					note->mustPress = ( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1780)					if (::hx::IsGreater( i->__GetItem(1),3 )) {
HXLINE(1780)						note->mustPress = !(note->mustPress);
            					}
            				}
            			}
            		}
HXLINE(1785)		if ((::editors::ChartingState_obj::curSection < (( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1))) {
HXLINE(1786)			int _g = 0;
HXDLIN(1786)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((::editors::ChartingState_obj::curSection + 1))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1786)			while((_g < _g1->get_length())){
HXLINE(1786)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(1786)				_g = (_g + 1);
HXLINE(1788)				 ::Note note = this->setupNoteData(( (::cpp::VirtualArray)(i) ),true);
HXLINE(1789)				note->set_alpha(((Float)0.6));
HXLINE(1790)				this->nextRenderedNotes->add(note).StaticCast<  ::Note >();
HXLINE(1791)				if ((note->sustainLength > 0)) {
HXLINE(1793)					 ::flixel::group::FlxTypedGroup _hx_tmp = this->nextRenderedSustains;
HXDLIN(1793)					_hx_tmp->add(this->setupSusNote(note)).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateGrid,(void))

 ::Note ChartingState_obj::setupNoteData(::cpp::VirtualArray i,bool isNextSection){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_1800_setupNoteData)
HXLINE(1801)		int daNoteInfo = ( (int)(i->__get(1)) );
HXLINE(1802)		Float daStrumTime = ( (Float)(i->__get(0)) );
HXLINE(1803)		 ::Dynamic daSus = i->__get(2);
HXLINE(1805)		 ::Note note =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,::hx::Mod(daNoteInfo,4),null(),null(),true);
HXLINE(1806)		if ((daNoteInfo > -1)) {
HXLINE(1807)			if (!(::Std_obj::isOfType(i->__get(3),::hx::ClassOf< ::String >()))) {
HXLINE(1809)				i->set(3,this->noteTypeIntMap->get(( (int)(i->__get(3)) )));
            			}
HXLINE(1811)			bool _hx_tmp;
HXDLIN(1811)			if ((i->get_length() > 3)) {
HXLINE(1811)				if (::hx::IsNotNull( i->__get(3) )) {
HXLINE(1811)					_hx_tmp = ::hx::IsLess( i->__get(3)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),1 );
            				}
            				else {
HXLINE(1811)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1811)				_hx_tmp = false;
            			}
HXDLIN(1811)			if (_hx_tmp) {
HXLINE(1813)				i->remove(i->__get(3));
            			}
HXLINE(1815)			note->sustainLength = ( (Float)(daSus) );
HXLINE(1816)			note->set_noteType(( (::String)(i->__get(3)) ));
            		}
            		else {
HXLINE(1818)			::String library = null();
HXDLIN(1818)			 ::flixel::graphics::FlxGraphic imageToReturn = ::Paths_obj::addCustomGraphic(HX_("eventArrow",4f,83,ea,a1));
HXDLIN(1818)			 ::Dynamic _hx_tmp;
HXDLIN(1818)			if (::hx::IsNotNull( imageToReturn )) {
HXLINE(1818)				_hx_tmp = imageToReturn;
            			}
            			else {
HXLINE(1818)				_hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("eventArrow",4f,83,ea,a1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
            			}
HXDLIN(1818)			note->loadGraphic(_hx_tmp,null(),null(),null(),null(),null());
HXLINE(1819)			note->eventName = ( (::String)(daSus) );
HXLINE(1820)			note->eventVal1 = ( (::String)(i->__get(3)) );
HXLINE(1821)			note->eventVal2 = ( (::String)(i->__get(4)) );
            		}
HXLINE(1823)		note->setGraphicSize(::editors::ChartingState_obj::GRID_SIZE,::editors::ChartingState_obj::GRID_SIZE);
HXLINE(1824)		note->updateHitbox();
HXLINE(1825)		note->set_x(( (Float)((::Math_obj::floor(( (Float)((daNoteInfo * ::editors::ChartingState_obj::GRID_SIZE)) )) + ::editors::ChartingState_obj::GRID_SIZE)) ));
HXLINE(1826)		bool _hx_tmp;
HXDLIN(1826)		if (isNextSection) {
HXLINE(1826)			_hx_tmp = ::hx::IsNotEq(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic), ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((::editors::ChartingState_obj::curSection + 1))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) );
            		}
            		else {
HXLINE(1826)			_hx_tmp = false;
            		}
HXDLIN(1826)		if (_hx_tmp) {
HXLINE(1827)			if ((daNoteInfo > 3)) {
HXLINE(1828)				 ::Note _g = note;
HXDLIN(1828)				_g->set_x((_g->x - ( (Float)((::editors::ChartingState_obj::GRID_SIZE * 4)) )));
            			}
            			else {
HXLINE(1829)				if ((daNoteInfo > -1)) {
HXLINE(1830)					 ::Note _g = note;
HXDLIN(1830)					_g->set_x((_g->x + (::editors::ChartingState_obj::GRID_SIZE * 4)));
            				}
            			}
            		}
HXLINE(1834)		int _hx_tmp1;
HXDLIN(1834)		if (isNextSection) {
HXLINE(1834)			_hx_tmp1 = 16;
            		}
            		else {
HXLINE(1834)			_hx_tmp1 = 0;
            		}
HXDLIN(1834)		Float _hx_tmp2 = (( (Float)((::editors::ChartingState_obj::GRID_SIZE * _hx_tmp1)) ) * this->curZoom);
HXDLIN(1834)		int _hx_tmp3;
HXDLIN(1834)		if (isNextSection) {
HXLINE(1834)			_hx_tmp3 = 1;
            		}
            		else {
HXLINE(1834)			_hx_tmp3 = 0;
            		}
HXDLIN(1834)		Float _hx_tmp4 = (daStrumTime - this->sectionStartTime(_hx_tmp3));
HXDLIN(1834)		note->set_y((_hx_tmp2 + ::Math_obj::floor(this->getYfromStrum(::hx::Mod(_hx_tmp4,(::Conductor_obj::stepCrochet * ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ))),false))));
HXLINE(1835)		return note;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,setupNoteData,return )

 ::flixel::FlxSprite ChartingState_obj::setupSusNote( ::Note note){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_1838_setupSusNote)
HXLINE(1839)		Float note1 = note->sustainLength;
HXDLIN(1839)		Float height = (::Conductor_obj::stepCrochet * ( (Float)(16) ));
HXDLIN(1839)		Float height1 = this->gridBG->get_height();
HXDLIN(1839)		Float height2 = ::flixel::math::FlxMath_obj::remapToRange(note1,( (Float)(0) ),height,( (Float)(0) ),(height1 / ( (Float)(this->gridMult) )));
HXDLIN(1839)		int height3 = ::Math_obj::floor(((height2 + (( (Float)(::editors::ChartingState_obj::GRID_SIZE) ) * this->curZoom)) - (( (Float)(::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ))));
HXLINE(1840)		int minHeight = ::Std_obj::_hx_int((((( (Float)(::editors::ChartingState_obj::GRID_SIZE) ) * this->curZoom) / ( (Float)(2) )) + (( (Float)(::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ))));
HXLINE(1841)		if ((height3 < minHeight)) {
HXLINE(1841)			height3 = minHeight;
            		}
HXLINE(1842)		if ((height3 < 1)) {
HXLINE(1842)			height3 = 1;
            		}
HXLINE(1844)		 ::flixel::FlxSprite spr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((note->x + (( (Float)(::editors::ChartingState_obj::GRID_SIZE) ) * ((Float)0.5))) - ( (Float)(4) )),(note->y + (( (Float)(::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ))),null())->makeGraphic(8,height3,null(),null(),null());
HXLINE(1845)		return spr;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,setupSusNote,return )

void ChartingState_obj::addSection(::hx::Null< int >  __o_lengthInSteps){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1849_addSection)
HXLINE(1850)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(3,HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0))
            			->setFixed(4,HX_("bpm",df,be,4a,00), ::Dynamic(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(5,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(6,HX_("mustHitSection",3b,5f,87,62),true));
HXLINE(1860)		( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->push(sec);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addSection,(void))

void ChartingState_obj::selectNote( ::Note note){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1864_selectNote)
HXLINE(1865)		int noteDataToCheck = note->noteData;
HXLINE(1866)		bool _hx_tmp;
HXDLIN(1866)		if ((noteDataToCheck > -1)) {
HXLINE(1866)			_hx_tmp = ::hx::IsNotEq( note->mustPress, ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) );
            		}
            		else {
HXLINE(1866)			_hx_tmp = false;
            		}
HXDLIN(1866)		if (_hx_tmp) {
HXLINE(1866)			noteDataToCheck = (noteDataToCheck + 4);
            		}
HXLINE(1868)		{
HXLINE(1868)			int _g = 0;
HXDLIN(1868)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1868)			while((_g < _g1->get_length())){
HXLINE(1868)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(1868)				_g = (_g + 1);
HXLINE(1870)				bool _hx_tmp;
HXDLIN(1870)				bool _hx_tmp1;
HXDLIN(1870)				if (::hx::IsGreater( i->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),2 )) {
HXLINE(1870)					_hx_tmp1 = ::hx::IsEq( i->__GetItem(0),note->strumTime );
            				}
            				else {
HXLINE(1870)					_hx_tmp1 = false;
            				}
HXDLIN(1870)				if (_hx_tmp1) {
HXLINE(1870)					_hx_tmp = ::hx::IsEq( i->__GetItem(1),noteDataToCheck );
            				}
            				else {
HXLINE(1870)					_hx_tmp = false;
            				}
HXDLIN(1870)				if (_hx_tmp) {
HXLINE(1872)					this->curSelectedNote = ( (::cpp::VirtualArray)(i) );
HXLINE(1873)					goto _hx_goto_89;
            				}
            			}
            			_hx_goto_89:;
            		}
HXLINE(1877)		this->updateGrid();
HXLINE(1878)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,selectNote,(void))

void ChartingState_obj::deleteNote( ::Note note){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1882_deleteNote)
HXLINE(1883)		int noteDataToCheck = note->noteData;
HXLINE(1884)		bool _hx_tmp;
HXDLIN(1884)		if ((noteDataToCheck > -1)) {
HXLINE(1884)			_hx_tmp = ::hx::IsNotEq( note->mustPress, ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) );
            		}
            		else {
HXLINE(1884)			_hx_tmp = false;
            		}
HXDLIN(1884)		if (_hx_tmp) {
HXLINE(1884)			noteDataToCheck = (noteDataToCheck + 4);
            		}
HXLINE(1886)		{
HXLINE(1886)			int _g = 0;
HXDLIN(1886)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1886)			while((_g < _g1->get_length())){
HXLINE(1886)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(1886)				_g = (_g + 1);
HXLINE(1888)				bool _hx_tmp;
HXDLIN(1888)				if (::hx::IsEq( i->__GetItem(0),note->strumTime )) {
HXLINE(1888)					_hx_tmp = ::hx::IsEq( i->__GetItem(1),noteDataToCheck );
            				}
            				else {
HXLINE(1888)					_hx_tmp = false;
            				}
HXDLIN(1888)				if (_hx_tmp) {
HXLINE(1890)					if (::hx::IsEq( i,this->curSelectedNote )) {
HXLINE(1890)						this->curSelectedNote = null();
            					}
HXLINE(1892)					( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
HXLINE(1893)					goto _hx_goto_91;
            				}
            			}
            			_hx_goto_91:;
            		}
HXLINE(1897)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,deleteNote,(void))

void ChartingState_obj::clearSong(){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1901_clearSong)
HXLINE(1902)		{
HXLINE(1902)			int _g = 0;
HXDLIN(1902)			int _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(1902)			while((_g < _g1)){
HXLINE(1902)				_g = (_g + 1);
HXDLIN(1902)				int daSection = (_g - 1);
HXLINE(1904)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
            			}
            		}
HXLINE(1907)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSong,(void))

void ChartingState_obj::addNote(){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1911_addNote)
HXLINE(1912)		Float noteStrum = this->getStrumTime(this->dummyArrow->y,false);
HXDLIN(1912)		Float noteStrum1 = (noteStrum + this->sectionStartTime(null()));
HXLINE(1913)		int noteData = ::Math_obj::floor((( (Float)((::flixel::FlxG_obj::mouse->x - ::editors::ChartingState_obj::GRID_SIZE)) ) / ( (Float)(::editors::ChartingState_obj::GRID_SIZE) )));
HXLINE(1914)		int noteSus = 0;
HXLINE(1915)		bool daAlt = false;
HXLINE(1916)		int daType = this->currentType;
HXLINE(1918)		if ((noteData > -1)) {
HXLINE(1919)			::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1919)			_hx_tmp->push(::cpp::VirtualArray_obj::__new(4)->init(0,noteStrum1)->init(1,noteData)->init(2,noteSus)->init(3,this->noteTypeIntMap->get(daType)));
            		}
            		else {
HXLINE(1921)			 ::Dynamic event = this->eventStuff->__get(( (int)(::Std_obj::parseInt(this->eventDropDown->get_selectedId())) ))->__GetItem(0);
HXLINE(1922)			::String text1 = this->value1InputText->text;
HXLINE(1923)			::String text2 = this->value2InputText->text;
HXLINE(1924)			( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(5)->init(0,noteStrum1)->init(1,noteData)->init(2,event)->init(3,text1)->init(4,text2));
            		}
HXLINE(1926)		this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length() - 1))) );
HXLINE(1928)		bool _hx_tmp;
HXDLIN(1928)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1928)		if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE(1928)			_hx_tmp = (noteData > -1);
            		}
            		else {
HXLINE(1928)			_hx_tmp = false;
            		}
HXDLIN(1928)		if (_hx_tmp) {
HXLINE(1930)			::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::editors::ChartingState_obj::curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1930)			_hx_tmp->push(::cpp::VirtualArray_obj::__new(4)->init(0,noteStrum1)->init(1,::hx::Mod((noteData + 4),8))->init(2,noteSus)->init(3,this->noteTypeIntMap->get(daType)));
            		}
HXLINE(1933)		::haxe::Log_obj::trace(((((noteData + HX_(", ",74,26,00,00)) + noteStrum1) + HX_(", ",74,26,00,00)) + ::editors::ChartingState_obj::curSection),::hx::SourceInfo(HX_("source/editors/ChartingState.hx",8e,d0,8b,e6),1933,HX_("editors.ChartingState",45,48,cb,fe),HX_("addNote",b3,5a,47,85)));
HXLINE(1934)		this->strumTimeInputText->set_text(( (::String)(this->curSelectedNote->__get(0)) ));
HXLINE(1936)		this->updateGrid();
HXLINE(1937)		this->updateNoteUI();
HXLINE(1939)		this->autosaveSong();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addNote,(void))

Float ChartingState_obj::getStrumTime(Float yPos,::hx::Null< bool >  __o_doZoomCalc){
            		bool doZoomCalc = __o_doZoomCalc.Default(true);
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1943_getStrumTime)
HXLINE(1944)		Float leZoom = this->curZoom;
HXLINE(1945)		if (!(doZoomCalc)) {
HXLINE(1945)			leZoom = ( (Float)(1) );
            		}
HXLINE(1946)		Float _hx_tmp = this->gridBG->y;
HXDLIN(1946)		Float _hx_tmp1 = this->gridBG->y;
HXDLIN(1946)		Float _hx_tmp2 = this->gridBG->get_height();
HXDLIN(1946)		return ::flixel::math::FlxMath_obj::remapToRange(yPos,_hx_tmp,(_hx_tmp1 + ((_hx_tmp2 / ( (Float)(this->gridMult) )) * leZoom)),( (Float)(0) ),(( (Float)(16) ) * ::Conductor_obj::stepCrochet));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,getStrumTime,return )

Float ChartingState_obj::getYfromStrum(Float strumTime,::hx::Null< bool >  __o_doZoomCalc){
            		bool doZoomCalc = __o_doZoomCalc.Default(true);
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1950_getYfromStrum)
HXLINE(1951)		Float leZoom = this->curZoom;
HXLINE(1952)		if (!(doZoomCalc)) {
HXLINE(1952)			leZoom = ( (Float)(1) );
            		}
HXLINE(1953)		Float _hx_tmp = (( (Float)(16) ) * ::Conductor_obj::stepCrochet);
HXDLIN(1953)		Float _hx_tmp1 = this->gridBG->y;
HXDLIN(1953)		Float _hx_tmp2 = this->gridBG->y;
HXDLIN(1953)		Float _hx_tmp3 = this->gridBG->get_height();
HXDLIN(1953)		return ::flixel::math::FlxMath_obj::remapToRange(strumTime,( (Float)(0) ),_hx_tmp,_hx_tmp1,(_hx_tmp2 + ((_hx_tmp3 / ( (Float)(this->gridMult) )) * leZoom)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,getYfromStrum,return )

void ChartingState_obj::loadLevel(){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1983_loadLevel)
HXDLIN(1983)		::haxe::Log_obj::trace( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)),::hx::SourceInfo(HX_("source/editors/ChartingState.hx",8e,d0,8b,e6),1983,HX_("editors.ChartingState",45,48,cb,fe),HX_("loadLevel",7e,61,9a,8d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadLevel,(void))

::cpp::VirtualArray ChartingState_obj::getNotes(){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1987_getNotes)
HXLINE(1988)		::cpp::VirtualArray noteData = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1990)		{
HXLINE(1990)			int _g = 0;
HXDLIN(1990)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1990)			while((_g < _g1->length)){
HXLINE(1990)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(1990)				_g = (_g + 1);
HXLINE(1992)				noteData->push( ::Dynamic(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)));
            			}
            		}
HXLINE(1995)		return noteData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,getNotes,return )

void ChartingState_obj::loadJson(::String song){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_1999_loadJson)
HXLINE(2000)		::String _hx_tmp = song.toLowerCase();
HXDLIN(2000)		::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp,song.toLowerCase());
HXLINE(2001)		::MusicBeatState_obj::resetState();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadJson,(void))

void ChartingState_obj::autosaveSong(){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_2005_autosaveSong)
HXLINE(2006)		 ::Dynamic replacer = null();
HXDLIN(2006)		::String space = null();
HXDLIN(2006)		::String _hx_tmp = ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),this->_song)),replacer,space);
HXDLIN(2006)		::flixel::FlxG_obj::save->data->__SetField(HX_("autosave",2c,4e,9a,44),_hx_tmp,::hx::paccDynamic);
HXLINE(2009)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,autosaveSong,(void))

void ChartingState_obj::clearEvents(){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_2012_clearEvents)
HXLINE(2013)		{
HXLINE(2013)			int _g = 0;
HXDLIN(2013)			int _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(2013)			while((_g < _g1)){
HXLINE(2013)				_g = (_g + 1);
HXDLIN(2013)				int sec = (_g - 1);
HXLINE(2014)				int count = 0;
HXLINE(2015)				while((count < ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length())){
HXLINE(2016)					::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(count)) );
HXLINE(2017)					bool _hx_tmp;
HXDLIN(2017)					if (::hx::IsNotNull( note )) {
HXLINE(2017)						_hx_tmp = ::hx::IsLess( note->__get(1),0 );
            					}
            					else {
HXLINE(2017)						_hx_tmp = false;
            					}
HXDLIN(2017)					if (_hx_tmp) {
HXLINE(2018)						( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(note);
            					}
            					else {
HXLINE(2020)						count = (count + 1);
            					}
            				}
            			}
            		}
HXLINE(2024)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearEvents,(void))

void ChartingState_obj::saveLevel(){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_2028_saveLevel)
HXLINE(2029)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),this->_song));
HXLINE(2033)		 ::Dynamic replacer = null();
HXDLIN(2033)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,HX_("\t",09,00,00,00));
HXLINE(2035)		bool _hx_tmp;
HXDLIN(2035)		if (::hx::IsNotNull( data )) {
HXLINE(2035)			_hx_tmp = (data.length > 0);
            		}
            		else {
HXLINE(2035)			_hx_tmp = false;
            		}
HXDLIN(2035)		if (_hx_tmp) {
HXLINE(2037)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(2038)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(2039)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(2040)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(2041)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN(2041)			::String _hx_tmp1 = ::StringTools_obj::trim(data);
HXDLIN(2041)			_hx_tmp->save(_hx_tmp1,(::StringTools_obj::replace(( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)) + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,saveLevel,(void))

void ChartingState_obj::saveEvents(){
            	HX_GC_STACKFRAME(&_hx_pos_92f3de805789c16b_2046_saveEvents)
HXLINE(2047)		::Array< ::Dynamic> events = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2048)		{
HXLINE(2048)			int _g = 0;
HXDLIN(2048)			int _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(2048)			while((_g < _g1)){
HXLINE(2048)				_g = (_g + 1);
HXDLIN(2048)				int sec = (_g - 1);
HXLINE(2049)				if (::hx::IsNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec) )) {
HXLINE(2049)					continue;
            				}
HXLINE(2051)				::cpp::VirtualArray arrayNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE(2052)				{
HXLINE(2052)					int _g1 = 0;
HXDLIN(2052)					int _g2 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length();
HXDLIN(2052)					while((_g1 < _g2)){
HXLINE(2052)						_g1 = (_g1 + 1);
HXDLIN(2052)						int i = (_g1 - 1);
HXLINE(2053)						::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE(2054)						bool _hx_tmp;
HXDLIN(2054)						if (::hx::IsNotNull( note )) {
HXLINE(2054)							_hx_tmp = ::hx::IsLess( note->__get(1),0 );
            						}
            						else {
HXLINE(2054)							_hx_tmp = false;
            						}
HXDLIN(2054)						if (_hx_tmp) {
HXLINE(2055)							arrayNotes->push(note);
            						}
            					}
            				}
HXLINE(2059)				 ::Dynamic sex =  ::Dynamic(::hx::Anon_obj::Create(7)
            					->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),16)
            					->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            					->setFixed(2,HX_("typeOfSection",74,f3,25,fb),0)
            					->setFixed(3,HX_("sectionNotes",1c,c8,a7,fe),arrayNotes)
            					->setFixed(4,HX_("bpm",df,be,4a,00),( (Float)(0) ))
            					->setFixed(5,HX_("changeBPM",4f,4f,f8,1d),false)
            					->setFixed(6,HX_("mustHitSection",3b,5f,87,62),false));
HXLINE(2068)				events->push(sex);
            			}
            		}
HXLINE(2071)		 ::Dynamic eventsSong =  ::Dynamic(::hx::Anon_obj::Create(12)
            			->setFixed(0,HX_("speed",87,97,69,81), ::Dynamic(this->_song->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)))
            			->setFixed(1,HX_("stage",be,6a,0b,84), ::Dynamic(this->_song->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)))
            			->setFixed(2,HX_("player1",b0,09,15,8a), ::Dynamic(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)))
            			->setFixed(3,HX_("player2",b1,09,15,8a), ::Dynamic(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)))
            			->setFixed(4,HX_("player3",b2,09,15,8a), ::Dynamic(this->_song->__Field(HX_("player3",b2,09,15,8a),::hx::paccDynamic)))
            			->setFixed(5,HX_("notes",41,dc,ca,9f),events)
            			->setFixed(6,HX_("splashSkin",84,03,e1,a1), ::Dynamic(this->_song->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic)))
            			->setFixed(7,HX_("validScore",b6,dc,18,c7),false)
            			->setFixed(8,HX_("bpm",df,be,4a,00), ::Dynamic(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(9,HX_("arrowSkin",e6,d4,f8,07), ::Dynamic(this->_song->__Field(HX_("arrowSkin",e6,d4,f8,07),::hx::paccDynamic)))
            			->setFixed(10,HX_("needsVoices",be,05,e9,0d), ::Dynamic(this->_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)))
            			->setFixed(11,HX_("song",d5,23,58,4c), ::Dynamic(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic))));
HXLINE(2086)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),eventsSong));
HXLINE(2090)		 ::Dynamic replacer = null();
HXDLIN(2090)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,HX_("\t",09,00,00,00));
HXLINE(2092)		bool _hx_tmp;
HXDLIN(2092)		if (::hx::IsNotNull( data )) {
HXLINE(2092)			_hx_tmp = (data.length > 0);
            		}
            		else {
HXLINE(2092)			_hx_tmp = false;
            		}
HXDLIN(2092)		if (_hx_tmp) {
HXLINE(2094)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(2095)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(2096)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(2097)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(2098)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN(2098)			_hx_tmp->save(::StringTools_obj::trim(data),HX_("events.json",9d,47,9a,dc));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,saveEvents,(void))

void ChartingState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_2103_onSaveComplete)
HXLINE(2104)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(2105)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(2106)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(2107)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveComplete,(void))

void ChartingState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_2115_onSaveCancel)
HXLINE(2116)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(2117)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(2118)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(2119)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveCancel,(void))

void ChartingState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_2126_onSaveError)
HXLINE(2127)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(2128)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(2129)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(2130)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveError,(void))

::Array< ::String > ChartingState_obj::noteTypeList;

int ChartingState_obj::curSection;

int ChartingState_obj::lastSection;

::String ChartingState_obj::lastSong;

int ChartingState_obj::GRID_SIZE;


::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< ChartingState_obj > __this = new ChartingState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	ChartingState_obj *__this = (ChartingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChartingState_obj), true, "editors.ChartingState"));
	*(void **)__this = ChartingState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

ChartingState_obj::ChartingState_obj()
{
}

void ChartingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChartingState);
	HX_MARK_MEMBER_NAME(noteTypeIntMap,"noteTypeIntMap");
	HX_MARK_MEMBER_NAME(noteTypeMap,"noteTypeMap");
	HX_MARK_MEMBER_NAME(eventStuff,"eventStuff");
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_MARK_MEMBER_NAME(camPos,"camPos");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(amountSteps,"amountSteps");
	HX_MARK_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_MARK_MEMBER_NAME(highlight,"highlight");
	HX_MARK_MEMBER_NAME(CAM_OFFSET,"CAM_OFFSET");
	HX_MARK_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_MARK_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_MARK_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_MARK_MEMBER_NAME(curRenderedNoteType,"curRenderedNoteType");
	HX_MARK_MEMBER_NAME(nextRenderedSustains,"nextRenderedSustains");
	HX_MARK_MEMBER_NAME(nextRenderedNotes,"nextRenderedNotes");
	HX_MARK_MEMBER_NAME(gridBG,"gridBG");
	HX_MARK_MEMBER_NAME(gridMult,"gridMult");
	HX_MARK_MEMBER_NAME(curZoom,"curZoom");
	HX_MARK_MEMBER_NAME(_song,"_song");
	HX_MARK_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_MARK_MEMBER_NAME(tempBpm,"tempBpm");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(leftIcon,"leftIcon");
	HX_MARK_MEMBER_NAME(rightIcon,"rightIcon");
	HX_MARK_MEMBER_NAME(value1InputText,"value1InputText");
	HX_MARK_MEMBER_NAME(value2InputText,"value2InputText");
	HX_MARK_MEMBER_NAME(currentSongName,"currentSongName");
	HX_MARK_MEMBER_NAME(zoomMult,"zoomMult");
	HX_MARK_MEMBER_NAME(zoomTxt,"zoomTxt");
	HX_MARK_MEMBER_NAME(blockPressWhileTypingOn,"blockPressWhileTypingOn");
	HX_MARK_MEMBER_NAME(blockPressWhileScrolling,"blockPressWhileScrolling");
	HX_MARK_MEMBER_NAME(waveformSprite,"waveformSprite");
	HX_MARK_MEMBER_NAME(gridLayer,"gridLayer");
	HX_MARK_MEMBER_NAME(check_mute_inst,"check_mute_inst");
	HX_MARK_MEMBER_NAME(playSoundBf,"playSoundBf");
	HX_MARK_MEMBER_NAME(playSoundDad,"playSoundDad");
	HX_MARK_MEMBER_NAME(UI_songTitle,"UI_songTitle");
	HX_MARK_MEMBER_NAME(noteSkinInputText,"noteSkinInputText");
	HX_MARK_MEMBER_NAME(noteSplashesInputText,"noteSplashesInputText");
	HX_MARK_MEMBER_NAME(stageDropDown,"stageDropDown");
	HX_MARK_MEMBER_NAME(stepperLength,"stepperLength");
	HX_MARK_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_MARK_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_MARK_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_MARK_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_MARK_MEMBER_NAME(sectionToCopy,"sectionToCopy");
	HX_MARK_MEMBER_NAME(notesCopied,"notesCopied");
	HX_MARK_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_MARK_MEMBER_NAME(strumTimeInputText,"strumTimeInputText");
	HX_MARK_MEMBER_NAME(noteTypeDropDown,"noteTypeDropDown");
	HX_MARK_MEMBER_NAME(currentType,"currentType");
	HX_MARK_MEMBER_NAME(eventDropDown,"eventDropDown");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(metronome,"metronome");
	HX_MARK_MEMBER_NAME(metronomeStepper,"metronomeStepper");
	HX_MARK_MEMBER_NAME(metronomeOffsetStepper,"metronomeOffsetStepper");
	HX_MARK_MEMBER_NAME(waveformEnabled,"waveformEnabled");
	HX_MARK_MEMBER_NAME(waveformUseInstrumental,"waveformUseInstrumental");
	HX_MARK_MEMBER_NAME(instVolume,"instVolume");
	HX_MARK_MEMBER_NAME(voicesVolume,"voicesVolume");
	HX_MARK_MEMBER_NAME(updatedSection,"updatedSection");
	HX_MARK_MEMBER_NAME(lastConductorPos,"lastConductorPos");
	HX_MARK_MEMBER_NAME(colorSine,"colorSine");
	HX_MARK_MEMBER_NAME(audioBuffers,"audioBuffers");
	HX_MARK_MEMBER_NAME(daSpacing,"daSpacing");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChartingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(noteTypeIntMap,"noteTypeIntMap");
	HX_VISIT_MEMBER_NAME(noteTypeMap,"noteTypeMap");
	HX_VISIT_MEMBER_NAME(eventStuff,"eventStuff");
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_VISIT_MEMBER_NAME(camPos,"camPos");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(amountSteps,"amountSteps");
	HX_VISIT_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_VISIT_MEMBER_NAME(highlight,"highlight");
	HX_VISIT_MEMBER_NAME(CAM_OFFSET,"CAM_OFFSET");
	HX_VISIT_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_VISIT_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_VISIT_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_VISIT_MEMBER_NAME(curRenderedNoteType,"curRenderedNoteType");
	HX_VISIT_MEMBER_NAME(nextRenderedSustains,"nextRenderedSustains");
	HX_VISIT_MEMBER_NAME(nextRenderedNotes,"nextRenderedNotes");
	HX_VISIT_MEMBER_NAME(gridBG,"gridBG");
	HX_VISIT_MEMBER_NAME(gridMult,"gridMult");
	HX_VISIT_MEMBER_NAME(curZoom,"curZoom");
	HX_VISIT_MEMBER_NAME(_song,"_song");
	HX_VISIT_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_VISIT_MEMBER_NAME(tempBpm,"tempBpm");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(leftIcon,"leftIcon");
	HX_VISIT_MEMBER_NAME(rightIcon,"rightIcon");
	HX_VISIT_MEMBER_NAME(value1InputText,"value1InputText");
	HX_VISIT_MEMBER_NAME(value2InputText,"value2InputText");
	HX_VISIT_MEMBER_NAME(currentSongName,"currentSongName");
	HX_VISIT_MEMBER_NAME(zoomMult,"zoomMult");
	HX_VISIT_MEMBER_NAME(zoomTxt,"zoomTxt");
	HX_VISIT_MEMBER_NAME(blockPressWhileTypingOn,"blockPressWhileTypingOn");
	HX_VISIT_MEMBER_NAME(blockPressWhileScrolling,"blockPressWhileScrolling");
	HX_VISIT_MEMBER_NAME(waveformSprite,"waveformSprite");
	HX_VISIT_MEMBER_NAME(gridLayer,"gridLayer");
	HX_VISIT_MEMBER_NAME(check_mute_inst,"check_mute_inst");
	HX_VISIT_MEMBER_NAME(playSoundBf,"playSoundBf");
	HX_VISIT_MEMBER_NAME(playSoundDad,"playSoundDad");
	HX_VISIT_MEMBER_NAME(UI_songTitle,"UI_songTitle");
	HX_VISIT_MEMBER_NAME(noteSkinInputText,"noteSkinInputText");
	HX_VISIT_MEMBER_NAME(noteSplashesInputText,"noteSplashesInputText");
	HX_VISIT_MEMBER_NAME(stageDropDown,"stageDropDown");
	HX_VISIT_MEMBER_NAME(stepperLength,"stepperLength");
	HX_VISIT_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_VISIT_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_VISIT_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_VISIT_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_VISIT_MEMBER_NAME(sectionToCopy,"sectionToCopy");
	HX_VISIT_MEMBER_NAME(notesCopied,"notesCopied");
	HX_VISIT_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_VISIT_MEMBER_NAME(strumTimeInputText,"strumTimeInputText");
	HX_VISIT_MEMBER_NAME(noteTypeDropDown,"noteTypeDropDown");
	HX_VISIT_MEMBER_NAME(currentType,"currentType");
	HX_VISIT_MEMBER_NAME(eventDropDown,"eventDropDown");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(metronome,"metronome");
	HX_VISIT_MEMBER_NAME(metronomeStepper,"metronomeStepper");
	HX_VISIT_MEMBER_NAME(metronomeOffsetStepper,"metronomeOffsetStepper");
	HX_VISIT_MEMBER_NAME(waveformEnabled,"waveformEnabled");
	HX_VISIT_MEMBER_NAME(waveformUseInstrumental,"waveformUseInstrumental");
	HX_VISIT_MEMBER_NAME(instVolume,"instVolume");
	HX_VISIT_MEMBER_NAME(voicesVolume,"voicesVolume");
	HX_VISIT_MEMBER_NAME(updatedSection,"updatedSection");
	HX_VISIT_MEMBER_NAME(lastConductorPos,"lastConductorPos");
	HX_VISIT_MEMBER_NAME(colorSine,"colorSine");
	HX_VISIT_MEMBER_NAME(audioBuffers,"audioBuffers");
	HX_VISIT_MEMBER_NAME(daSpacing,"daSpacing");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChartingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		if (HX_FIELD_EQ(inName,"_song") ) { return ::hx::Val( _song ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { return ::hx::Val( bpmTxt ); }
		if (HX_FIELD_EQ(inName,"camPos") ) { return ::hx::Val( camPos ); }
		if (HX_FIELD_EQ(inName,"gridBG") ) { return ::hx::Val( gridBG ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"curZoom") ) { return ::hx::Val( curZoom ); }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { return ::hx::Val( tempBpm ); }
		if (HX_FIELD_EQ(inName,"zoomTxt") ) { return ::hx::Val( zoomTxt ); }
		if (HX_FIELD_EQ(inName,"addNote") ) { return ::hx::Val( addNote_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gridMult") ) { return ::hx::Val( gridMult ); }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { return ::hx::Val( leftIcon ); }
		if (HX_FIELD_EQ(inName,"zoomMult") ) { return ::hx::Val( zoomMult ); }
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNotes") ) { return ::hx::Val( getNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadJson") ) { return ::hx::Val( loadJson_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"highlight") ) { return ::hx::Val( highlight ); }
		if (HX_FIELD_EQ(inName,"rightIcon") ) { return ::hx::Val( rightIcon ); }
		if (HX_FIELD_EQ(inName,"gridLayer") ) { return ::hx::Val( gridLayer ); }
		if (HX_FIELD_EQ(inName,"addSongUI") ) { return ::hx::Val( addSongUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addNoteUI") ) { return ::hx::Val( addNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"metronome") ) { return ::hx::Val( metronome ); }
		if (HX_FIELD_EQ(inName,"colorSine") ) { return ::hx::Val( colorSine ); }
		if (HX_FIELD_EQ(inName,"clearSong") ) { return ::hx::Val( clearSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { return ::hx::Val( daSpacing ); }
		if (HX_FIELD_EQ(inName,"loadLevel") ) { return ::hx::Val( loadLevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveLevel") ) { return ::hx::Val( saveLevel_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventStuff") ) { return ::hx::Val( eventStuff ); }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { return ::hx::Val( bullshitUI ); }
		if (HX_FIELD_EQ(inName,"CAM_OFFSET") ) { return ::hx::Val( CAM_OFFSET ); }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { return ::hx::Val( dummyArrow ); }
		if (HX_FIELD_EQ(inName,"instVolume") ) { return ::hx::Val( instVolume ); }
		if (HX_FIELD_EQ(inName,"generateUI") ) { return ::hx::Val( generateUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateZoom") ) { return ::hx::Val( updateZoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateGrid") ) { return ::hx::Val( updateGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSection") ) { return ::hx::Val( addSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectNote") ) { return ::hx::Val( selectNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteNote") ) { return ::hx::Val( deleteNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveEvents") ) { return ::hx::Val( saveEvents_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"noteTypeMap") ) { return ::hx::Val( noteTypeMap ); }
		if (HX_FIELD_EQ(inName,"amountSteps") ) { return ::hx::Val( amountSteps ); }
		if (HX_FIELD_EQ(inName,"playSoundBf") ) { return ::hx::Val( playSoundBf ); }
		if (HX_FIELD_EQ(inName,"notesCopied") ) { return ::hx::Val( notesCopied ); }
		if (HX_FIELD_EQ(inName,"currentType") ) { return ::hx::Val( currentType ); }
		if (HX_FIELD_EQ(inName,"addEventsUI") ) { return ::hx::Val( addEventsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateHeads") ) { return ::hx::Val( updateHeads_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearEvents") ) { return ::hx::Val( clearEvents_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playSoundDad") ) { return ::hx::Val( playSoundDad ); }
		if (HX_FIELD_EQ(inName,"UI_songTitle") ) { return ::hx::Val( UI_songTitle ); }
		if (HX_FIELD_EQ(inName,"addSectionUI") ) { return ::hx::Val( addSectionUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"voicesVolume") ) { return ::hx::Val( voicesVolume ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"audioBuffers") ) { return ::hx::Val( audioBuffers ); }
		if (HX_FIELD_EQ(inName,"resetSection") ) { return ::hx::Val( resetSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateNoteUI") ) { return ::hx::Val( updateNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"setupSusNote") ) { return ::hx::Val( setupSusNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStrumTime") ) { return ::hx::Val( getStrumTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"autosaveSong") ) { return ::hx::Val( autosaveSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stageDropDown") ) { return ::hx::Val( stageDropDown ); }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { return ::hx::Val( stepperLength ); }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { return ::hx::Val( check_altAnim ); }
		if (HX_FIELD_EQ(inName,"sectionToCopy") ) { return ::hx::Val( sectionToCopy ); }
		if (HX_FIELD_EQ(inName,"eventDropDown") ) { return ::hx::Val( eventDropDown ); }
		if (HX_FIELD_EQ(inName,"addChartingUI") ) { return ::hx::Val( addChartingUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeSection") ) { return ::hx::Val( changeSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"setupNoteData") ) { return ::hx::Val( setupNoteData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYfromStrum") ) { return ::hx::Val( getYfromStrum_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"noteTypeIntMap") ) { return ::hx::Val( noteTypeIntMap ); }
		if (HX_FIELD_EQ(inName,"waveformSprite") ) { return ::hx::Val( waveformSprite ); }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { return ::hx::Val( updatedSection ); }
		if (HX_FIELD_EQ(inName,"updateWaveform") ) { return ::hx::Val( updateWaveform_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { return ::hx::Val( curSelectedNote ); }
		if (HX_FIELD_EQ(inName,"value1InputText") ) { return ::hx::Val( value1InputText ); }
		if (HX_FIELD_EQ(inName,"value2InputText") ) { return ::hx::Val( value2InputText ); }
		if (HX_FIELD_EQ(inName,"currentSongName") ) { return ::hx::Val( currentSongName ); }
		if (HX_FIELD_EQ(inName,"check_mute_inst") ) { return ::hx::Val( check_mute_inst ); }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { return ::hx::Val( check_changeBPM ); }
		if (HX_FIELD_EQ(inName,"waveformEnabled") ) { return ::hx::Val( waveformEnabled ); }
		if (HX_FIELD_EQ(inName,"loadAudioBuffer") ) { return ::hx::Val( loadAudioBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadGridLayer") ) { return ::hx::Val( reloadGridLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateSectionUI") ) { return ::hx::Val( updateSectionUI_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { return ::hx::Val( curRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { return ::hx::Val( stepperSusLength ); }
		if (HX_FIELD_EQ(inName,"noteTypeDropDown") ) { return ::hx::Val( noteTypeDropDown ); }
		if (HX_FIELD_EQ(inName,"metronomeStepper") ) { return ::hx::Val( metronomeStepper ); }
		if (HX_FIELD_EQ(inName,"sectionStartTime") ) { return ::hx::Val( sectionStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastConductorPos") ) { return ::hx::Val( lastConductorPos ); }
		if (HX_FIELD_EQ(inName,"recalculateSteps") ) { return ::hx::Val( recalculateSteps_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nextRenderedNotes") ) { return ::hx::Val( nextRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"noteSkinInputText") ) { return ::hx::Val( noteSkinInputText ); }
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { return ::hx::Val( stepperSectionBPM ); }
		if (HX_FIELD_EQ(inName,"changeNoteSustain") ) { return ::hx::Val( changeNoteSustain_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"strumTimeInputText") ) { return ::hx::Val( strumTimeInputText ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { return ::hx::Val( curRenderedSustains ); }
		if (HX_FIELD_EQ(inName,"curRenderedNoteType") ) { return ::hx::Val( curRenderedNoteType ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nextRenderedSustains") ) { return ::hx::Val( nextRenderedSustains ); }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { return ::hx::Val( check_mustHitSection ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"noteSplashesInputText") ) { return ::hx::Val( noteSplashesInputText ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"metronomeOffsetStepper") ) { return ::hx::Val( metronomeOffsetStepper ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"blockPressWhileTypingOn") ) { return ::hx::Val( blockPressWhileTypingOn ); }
		if (HX_FIELD_EQ(inName,"waveformUseInstrumental") ) { return ::hx::Val( waveformUseInstrumental ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"blockPressWhileScrolling") ) { return ::hx::Val( blockPressWhileScrolling ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"loadHealthIconFromCharacter") ) { return ::hx::Val( loadHealthIconFromCharacter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ChartingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"lastSong") ) { outValue = ( lastSong ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { outValue = ( GRID_SIZE ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { outValue = ( curSection ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { outValue = ( lastSection ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"noteTypeList") ) { outValue = ( noteTypeList ); return true; }
	}
	return false;
}

::hx::Val ChartingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_song") ) { _song=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { bpmTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camPos") ) { camPos=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBG") ) { gridBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curZoom") ) { curZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { tempBpm=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomTxt") ) { zoomTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gridMult") ) { gridMult=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { leftIcon=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomMult") ) { zoomMult=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlight") ) { highlight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightIcon") ) { rightIcon=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridLayer") ) { gridLayer=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"metronome") ) { metronome=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorSine") ) { colorSine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { daSpacing=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventStuff") ) { eventStuff=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { bullshitUI=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CAM_OFFSET") ) { CAM_OFFSET=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { dummyArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instVolume") ) { instVolume=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"noteTypeMap") ) { noteTypeMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"amountSteps") ) { amountSteps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playSoundBf") ) { playSoundBf=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notesCopied") ) { notesCopied=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentType") ) { currentType=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playSoundDad") ) { playSoundDad=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UI_songTitle") ) { UI_songTitle=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"voicesVolume") ) { voicesVolume=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"audioBuffers") ) { audioBuffers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stageDropDown") ) { stageDropDown=inValue.Cast<  ::FlxUIDropDownMenuCustom >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { stepperLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { check_altAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sectionToCopy") ) { sectionToCopy=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventDropDown") ) { eventDropDown=inValue.Cast<  ::FlxUIDropDownMenuCustom >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"noteTypeIntMap") ) { noteTypeIntMap=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waveformSprite") ) { waveformSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { updatedSection=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { curSelectedNote=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value1InputText") ) { value1InputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value2InputText") ) { value2InputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentSongName") ) { currentSongName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_mute_inst") ) { check_mute_inst=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { check_changeBPM=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waveformEnabled") ) { waveformEnabled=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { curRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { stepperSusLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteTypeDropDown") ) { noteTypeDropDown=inValue.Cast<  ::FlxUIDropDownMenuCustom >(); return inValue; }
		if (HX_FIELD_EQ(inName,"metronomeStepper") ) { metronomeStepper=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastConductorPos") ) { lastConductorPos=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nextRenderedNotes") ) { nextRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteSkinInputText") ) { noteSkinInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { stepperSectionBPM=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"strumTimeInputText") ) { strumTimeInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { curRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curRenderedNoteType") ) { curRenderedNoteType=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nextRenderedSustains") ) { nextRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { check_mustHitSection=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"noteSplashesInputText") ) { noteSplashesInputText=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"metronomeOffsetStepper") ) { metronomeOffsetStepper=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"blockPressWhileTypingOn") ) { blockPressWhileTypingOn=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waveformUseInstrumental") ) { waveformUseInstrumental=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"blockPressWhileScrolling") ) { blockPressWhileScrolling=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ChartingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"lastSong") ) { lastSong=ioValue.Cast< ::String >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { GRID_SIZE=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { lastSection=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"noteTypeList") ) { noteTypeList=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void ChartingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("noteTypeIntMap",d9,a1,0a,95));
	outFields->push(HX_("noteTypeMap",30,92,3e,ac));
	outFields->push(HX_("eventStuff",7a,a0,75,00));
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("bpmTxt",d1,bc,26,f4));
	outFields->push(HX_("camPos",c5,54,7c,b7));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("amountSteps",af,2a,91,a5));
	outFields->push(HX_("bullshitUI",67,a9,a3,d3));
	outFields->push(HX_("highlight",34,56,00,ed));
	outFields->push(HX_("CAM_OFFSET",23,b1,2e,98));
	outFields->push(HX_("dummyArrow",81,8a,75,ae));
	outFields->push(HX_("curRenderedSustains",65,b2,8a,50));
	outFields->push(HX_("curRenderedNotes",2c,e1,fb,dc));
	outFields->push(HX_("curRenderedNoteType",c1,b7,da,f3));
	outFields->push(HX_("nextRenderedSustains",d8,07,f7,96));
	outFields->push(HX_("nextRenderedNotes",d9,f5,6d,f4));
	outFields->push(HX_("gridBG",0b,ce,23,18));
	outFields->push(HX_("gridMult",d6,45,a4,4a));
	outFields->push(HX_("curZoom",b3,14,0e,bc));
	outFields->push(HX_("_song",b4,3f,69,ff));
	outFields->push(HX_("curSelectedNote",8d,49,f4,47));
	outFields->push(HX_("tempBpm",2b,d8,ac,46));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("leftIcon",20,2b,ae,4c));
	outFields->push(HX_("rightIcon",75,3d,79,b0));
	outFields->push(HX_("value1InputText",17,f2,52,45));
	outFields->push(HX_("value2InputText",f6,69,9d,05));
	outFields->push(HX_("currentSongName",19,8a,29,0b));
	outFields->push(HX_("zoomMult",a3,bc,61,a1));
	outFields->push(HX_("zoomTxt",1d,71,9e,64));
	outFields->push(HX_("blockPressWhileTypingOn",71,5f,34,ba));
	outFields->push(HX_("blockPressWhileScrolling",9a,a6,3b,0c));
	outFields->push(HX_("waveformSprite",62,23,1b,4c));
	outFields->push(HX_("gridLayer",2b,cd,83,64));
	outFields->push(HX_("check_mute_inst",b5,5c,b4,05));
	outFields->push(HX_("playSoundBf",df,38,00,fb));
	outFields->push(HX_("playSoundDad",cc,0a,33,a5));
	outFields->push(HX_("UI_songTitle",98,d4,53,2f));
	outFields->push(HX_("noteSkinInputText",48,c4,a8,3c));
	outFields->push(HX_("noteSplashesInputText",30,65,ff,7a));
	outFields->push(HX_("stageDropDown",0f,b5,6b,4d));
	outFields->push(HX_("stepperLength",d7,b0,3a,4b));
	outFields->push(HX_("check_mustHitSection",12,30,fc,78));
	outFields->push(HX_("check_changeBPM",d8,2d,43,fc));
	outFields->push(HX_("stepperSectionBPM",6b,ba,b7,95));
	outFields->push(HX_("check_altAnim",23,ee,53,2e));
	outFields->push(HX_("sectionToCopy",95,9a,ef,19));
	outFields->push(HX_("notesCopied",65,7e,06,92));
	outFields->push(HX_("stepperSusLength",06,e6,fc,95));
	outFields->push(HX_("strumTimeInputText",01,cd,57,94));
	outFields->push(HX_("noteTypeDropDown",1d,20,c5,82));
	outFields->push(HX_("currentType",93,cb,9a,85));
	outFields->push(HX_("eventDropDown",6b,ce,0b,a2));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("metronome",32,23,9e,00));
	outFields->push(HX_("metronomeStepper",ff,b3,47,cf));
	outFields->push(HX_("metronomeOffsetStepper",2c,93,6c,12));
	outFields->push(HX_("waveformEnabled",84,2e,4a,6a));
	outFields->push(HX_("waveformUseInstrumental",bc,fb,27,e6));
	outFields->push(HX_("instVolume",40,fa,90,9f));
	outFields->push(HX_("voicesVolume",3b,cb,86,73));
	outFields->push(HX_("updatedSection",ea,f8,55,de));
	outFields->push(HX_("lastConductorPos",63,a7,e7,75));
	outFields->push(HX_("colorSine",50,21,c1,27));
	outFields->push(HX_("audioBuffers",3d,b9,0b,bd));
	outFields->push(HX_("daSpacing",86,9d,76,71));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChartingState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(ChartingState_obj,noteTypeIntMap),HX_("noteTypeIntMap",d9,a1,0a,95)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ChartingState_obj,noteTypeMap),HX_("noteTypeMap",30,92,3e,ac)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,eventStuff),HX_("eventStuff",7a,a0,75,00)},
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(ChartingState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,bpmTxt),HX_("bpmTxt",d1,bc,26,f4)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(ChartingState_obj,camPos),HX_("camPos",c5,54,7c,b7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,amountSteps),HX_("amountSteps",af,2a,91,a5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,bullshitUI),HX_("bullshitUI",67,a9,a3,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,highlight),HX_("highlight",34,56,00,ed)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,CAM_OFFSET),HX_("CAM_OFFSET",23,b1,2e,98)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,dummyArrow),HX_("dummyArrow",81,8a,75,ae)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedSustains),HX_("curRenderedSustains",65,b2,8a,50)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNotes),HX_("curRenderedNotes",2c,e1,fb,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNoteType),HX_("curRenderedNoteType",c1,b7,da,f3)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,nextRenderedSustains),HX_("nextRenderedSustains",d8,07,f7,96)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,nextRenderedNotes),HX_("nextRenderedNotes",d9,f5,6d,f4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBG),HX_("gridBG",0b,ce,23,18)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,gridMult),HX_("gridMult",d6,45,a4,4a)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,curZoom),HX_("curZoom",b3,14,0e,bc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,_song),HX_("_song",b4,3f,69,ff)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,curSelectedNote),HX_("curSelectedNote",8d,49,f4,47)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,tempBpm),HX_("tempBpm",2b,d8,ac,46)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(ChartingState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(ChartingState_obj,leftIcon),HX_("leftIcon",20,2b,ae,4c)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(ChartingState_obj,rightIcon),HX_("rightIcon",75,3d,79,b0)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,value1InputText),HX_("value1InputText",17,f2,52,45)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,value2InputText),HX_("value2InputText",f6,69,9d,05)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,currentSongName),HX_("currentSongName",19,8a,29,0b)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,zoomMult),HX_("zoomMult",a3,bc,61,a1)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,zoomTxt),HX_("zoomTxt",1d,71,9e,64)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,blockPressWhileTypingOn),HX_("blockPressWhileTypingOn",71,5f,34,ba)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,blockPressWhileScrolling),HX_("blockPressWhileScrolling",9a,a6,3b,0c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,waveformSprite),HX_("waveformSprite",62,23,1b,4c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,gridLayer),HX_("gridLayer",2b,cd,83,64)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mute_inst),HX_("check_mute_inst",b5,5c,b4,05)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,playSoundBf),HX_("playSoundBf",df,38,00,fb)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,playSoundDad),HX_("playSoundDad",cc,0a,33,a5)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,UI_songTitle),HX_("UI_songTitle",98,d4,53,2f)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,noteSkinInputText),HX_("noteSkinInputText",48,c4,a8,3c)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,noteSplashesInputText),HX_("noteSplashesInputText",30,65,ff,7a)},
	{::hx::fsObject /*  ::FlxUIDropDownMenuCustom */ ,(int)offsetof(ChartingState_obj,stageDropDown),HX_("stageDropDown",0f,b5,6b,4d)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperLength),HX_("stepperLength",d7,b0,3a,4b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mustHitSection),HX_("check_mustHitSection",12,30,fc,78)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_changeBPM),HX_("check_changeBPM",d8,2d,43,fc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSectionBPM),HX_("stepperSectionBPM",6b,ba,b7,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_altAnim),HX_("check_altAnim",23,ee,53,2e)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,sectionToCopy),HX_("sectionToCopy",95,9a,ef,19)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,notesCopied),HX_("notesCopied",65,7e,06,92)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSusLength),HX_("stepperSusLength",06,e6,fc,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(ChartingState_obj,strumTimeInputText),HX_("strumTimeInputText",01,cd,57,94)},
	{::hx::fsObject /*  ::FlxUIDropDownMenuCustom */ ,(int)offsetof(ChartingState_obj,noteTypeDropDown),HX_("noteTypeDropDown",1d,20,c5,82)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,currentType),HX_("currentType",93,cb,9a,85)},
	{::hx::fsObject /*  ::FlxUIDropDownMenuCustom */ ,(int)offsetof(ChartingState_obj,eventDropDown),HX_("eventDropDown",6b,ce,0b,a2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,metronome),HX_("metronome",32,23,9e,00)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,metronomeStepper),HX_("metronomeStepper",ff,b3,47,cf)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,metronomeOffsetStepper),HX_("metronomeOffsetStepper",2c,93,6c,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,waveformEnabled),HX_("waveformEnabled",84,2e,4a,6a)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,waveformUseInstrumental),HX_("waveformUseInstrumental",bc,fb,27,e6)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,instVolume),HX_("instVolume",40,fa,90,9f)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,voicesVolume),HX_("voicesVolume",3b,cb,86,73)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,updatedSection),HX_("updatedSection",ea,f8,55,de)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,lastConductorPos),HX_("lastConductorPos",63,a7,e7,75)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,colorSine),HX_("colorSine",50,21,c1,27)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,audioBuffers),HX_("audioBuffers",3d,b9,0b,bd)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,daSpacing),HX_("daSpacing",86,9d,76,71)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ChartingState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &ChartingState_obj::noteTypeList,HX_("noteTypeList",4a,36,de,09)},
	{::hx::fsInt,(void *) &ChartingState_obj::curSection,HX_("curSection",45,58,c1,68)},
	{::hx::fsInt,(void *) &ChartingState_obj::lastSection,HX_("lastSection",2f,ba,83,12)},
	{::hx::fsString,(void *) &ChartingState_obj::lastSong,HX_("lastSong",4b,3d,a1,df)},
	{::hx::fsInt,(void *) &ChartingState_obj::GRID_SIZE,HX_("GRID_SIZE",1a,98,25,c9)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ChartingState_obj_sMemberFields[] = {
	HX_("noteTypeIntMap",d9,a1,0a,95),
	HX_("noteTypeMap",30,92,3e,ac),
	HX_("eventStuff",7a,a0,75,00),
	HX_("_file",5b,ea,cc,f6),
	HX_("UI_box",60,07,ac,43),
	HX_("bpmTxt",d1,bc,26,f4),
	HX_("camPos",c5,54,7c,b7),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSong",75,95,6d,b7),
	HX_("amountSteps",af,2a,91,a5),
	HX_("bullshitUI",67,a9,a3,d3),
	HX_("highlight",34,56,00,ed),
	HX_("CAM_OFFSET",23,b1,2e,98),
	HX_("dummyArrow",81,8a,75,ae),
	HX_("curRenderedSustains",65,b2,8a,50),
	HX_("curRenderedNotes",2c,e1,fb,dc),
	HX_("curRenderedNoteType",c1,b7,da,f3),
	HX_("nextRenderedSustains",d8,07,f7,96),
	HX_("nextRenderedNotes",d9,f5,6d,f4),
	HX_("gridBG",0b,ce,23,18),
	HX_("gridMult",d6,45,a4,4a),
	HX_("curZoom",b3,14,0e,bc),
	HX_("_song",b4,3f,69,ff),
	HX_("curSelectedNote",8d,49,f4,47),
	HX_("tempBpm",2b,d8,ac,46),
	HX_("vocals",5e,10,51,59),
	HX_("leftIcon",20,2b,ae,4c),
	HX_("rightIcon",75,3d,79,b0),
	HX_("value1InputText",17,f2,52,45),
	HX_("value2InputText",f6,69,9d,05),
	HX_("currentSongName",19,8a,29,0b),
	HX_("zoomMult",a3,bc,61,a1),
	HX_("zoomTxt",1d,71,9e,64),
	HX_("blockPressWhileTypingOn",71,5f,34,ba),
	HX_("blockPressWhileScrolling",9a,a6,3b,0c),
	HX_("waveformSprite",62,23,1b,4c),
	HX_("gridLayer",2b,cd,83,64),
	HX_("create",fc,66,0f,7c),
	HX_("check_mute_inst",b5,5c,b4,05),
	HX_("playSoundBf",df,38,00,fb),
	HX_("playSoundDad",cc,0a,33,a5),
	HX_("UI_songTitle",98,d4,53,2f),
	HX_("noteSkinInputText",48,c4,a8,3c),
	HX_("noteSplashesInputText",30,65,ff,7a),
	HX_("stageDropDown",0f,b5,6b,4d),
	HX_("addSongUI",6a,02,ad,e5),
	HX_("stepperLength",d7,b0,3a,4b),
	HX_("check_mustHitSection",12,30,fc,78),
	HX_("check_changeBPM",d8,2d,43,fc),
	HX_("stepperSectionBPM",6b,ba,b7,95),
	HX_("check_altAnim",23,ee,53,2e),
	HX_("sectionToCopy",95,9a,ef,19),
	HX_("notesCopied",65,7e,06,92),
	HX_("addSectionUI",18,75,a5,87),
	HX_("stepperSusLength",06,e6,fc,95),
	HX_("strumTimeInputText",01,cd,57,94),
	HX_("noteTypeDropDown",1d,20,c5,82),
	HX_("currentType",93,cb,9a,85),
	HX_("addNoteUI",c7,f7,d9,e9),
	HX_("eventDropDown",6b,ce,0b,a2),
	HX_("descText",9e,53,35,f3),
	HX_("addEventsUI",ee,88,4b,f2),
	HX_("metronome",32,23,9e,00),
	HX_("metronomeStepper",ff,b3,47,cf),
	HX_("metronomeOffsetStepper",2c,93,6c,12),
	HX_("waveformEnabled",84,2e,4a,6a),
	HX_("waveformUseInstrumental",bc,fb,27,e6),
	HX_("instVolume",40,fa,90,9f),
	HX_("voicesVolume",3b,cb,86,73),
	HX_("addChartingUI",99,1b,51,c9),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("generateUI",c9,a0,60,4e),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("updatedSection",ea,f8,55,de),
	HX_("sectionStartTime",ea,ba,df,45),
	HX_("lastConductorPos",63,a7,e7,75),
	HX_("colorSine",50,21,c1,27),
	HX_("update",09,86,05,87),
	HX_("updateZoom",bc,8d,ad,09),
	HX_("loadAudioBuffer",f0,71,7c,e3),
	HX_("reloadGridLayer",92,a6,58,0d),
	HX_("audioBuffers",3d,b9,0b,bd),
	HX_("updateWaveform",a6,8a,94,26),
	HX_("changeNoteSustain",41,6b,40,3c),
	HX_("recalculateSteps",54,5b,74,a1),
	HX_("resetSection",d6,4b,b6,cf),
	HX_("changeSection",55,aa,ac,be),
	HX_("updateSectionUI",30,24,dc,d7),
	HX_("updateHeads",8a,3c,51,0a),
	HX_("loadHealthIconFromCharacter",e4,83,84,63),
	HX_("updateNoteUI",af,69,79,31),
	HX_("updateGrid",6f,c1,20,fd),
	HX_("setupNoteData",d9,2a,b6,01),
	HX_("setupSusNote",26,7d,12,9f),
	HX_("addSection",c4,31,62,c5),
	HX_("selectNote",0e,8d,a5,b7),
	HX_("deleteNote",bd,f5,56,9c),
	HX_("clearSong",02,0c,19,c0),
	HX_("addNote",b3,5a,47,85),
	HX_("getStrumTime",80,ca,77,03),
	HX_("getYfromStrum",1c,4c,46,78),
	HX_("daSpacing",86,9d,76,71),
	HX_("loadLevel",7e,61,9a,8d),
	HX_("getNotes",cb,eb,a1,ff),
	HX_("loadJson",6e,13,08,b7),
	HX_("autosaveSong",21,24,ac,67),
	HX_("clearEvents",86,5c,57,2a),
	HX_("saveLevel",07,1d,10,01),
	HX_("saveEvents",36,da,23,df),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	::String(null()) };

static void ChartingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChartingState_obj::noteTypeList,"noteTypeList");
	HX_MARK_MEMBER_NAME(ChartingState_obj::curSection,"curSection");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lastSong,"lastSong");
	HX_MARK_MEMBER_NAME(ChartingState_obj::GRID_SIZE,"GRID_SIZE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChartingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChartingState_obj::noteTypeList,"noteTypeList");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::curSection,"curSection");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lastSong,"lastSong");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::GRID_SIZE,"GRID_SIZE");
};

#endif

::hx::Class ChartingState_obj::__mClass;

static ::String ChartingState_obj_sStaticFields[] = {
	HX_("noteTypeList",4a,36,de,09),
	HX_("curSection",45,58,c1,68),
	HX_("lastSection",2f,ba,83,12),
	HX_("lastSong",4b,3d,a1,df),
	HX_("GRID_SIZE",1a,98,25,c9),
	::String(null())
};

void ChartingState_obj::__register()
{
	ChartingState_obj _hx_dummy;
	ChartingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("editors.ChartingState",45,48,cb,fe);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ChartingState_obj::__GetStatic;
	__mClass->mSetStaticField = &ChartingState_obj::__SetStatic;
	__mClass->mMarkFunc = ChartingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ChartingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChartingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChartingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChartingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChartingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChartingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ChartingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_54_boot)
HXDLIN(  54)		noteTypeList = ::Array_obj< ::String >::fromData( _hx_array_data_fecb4845_114,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_88_boot)
HXDLIN(  88)		curSection = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_89_boot)
HXDLIN(  89)		lastSection = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_90_boot)
HXDLIN(  90)		lastSong = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_92f3de805789c16b_102_boot)
HXDLIN( 102)		GRID_SIZE = 40;
            	}
}

} // end namespace editors
