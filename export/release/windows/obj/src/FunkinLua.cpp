// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_b51bf83fd355e1db
#define INCLUDED_b51bf83fd355e1db
#include "hxcpp.h"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_DialogueBoxPsych
#include <DialogueBoxPsych.h>
#endif
#ifndef INCLUDED_FunkinLua
#include <FunkinLua.h>
#endif
#ifndef INCLUDED_ModchartSprite
#include <ModchartSprite.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_WeekData
#include <WeekData.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_llua_Convert
#include <llua/Convert.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_28_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",28,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_136_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",136,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_147_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",147,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_158_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",158,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_173_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",173,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_186_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",186,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_199_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",199,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_210_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",210,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_224_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",224,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_226_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",226,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_239_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",239,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_245_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",245,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_263_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",263,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_271_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",271,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_275_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",275,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_293_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",293,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_309_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",309,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_313_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",313,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_322_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",322,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_326_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",326,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_335_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",335,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_339_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",339,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_348_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",348,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_352_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",352,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_361_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",361,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_368_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",368,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_378_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",378,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_381_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",381,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_383_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",383,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_391_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",391,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_427_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",427,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_431_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",431,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_435_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",435,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_439_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",439,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_443_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",443,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_447_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",447,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_452_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",452,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_456_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",456,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_470_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",470,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_480_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",480,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_490_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",490,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_498_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",498,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_505_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",505,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_509_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",509,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_512_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",512,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_516_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",516,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_526_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",526,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_530_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",530,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_535_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",535,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_540_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",540,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_545_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",545,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_555_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",555,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_559_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",559,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_564_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",564,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_569_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",569,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_573_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",573,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_581_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",581,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_584_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",584,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_586_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",586,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_590_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",590,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_595_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",595,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_608_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",608,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_615_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",615,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_626_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",626,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_633_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",633,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_642_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",642,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_651_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",651,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_665_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",665,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_671_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",671,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_676_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",676,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_690_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",690,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_697_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",697,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_700_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",700,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_715_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",715,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_729_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",729,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_737_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",737,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_756_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",756,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_767_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",767,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_770_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",770,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_774_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",774,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_776_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",776,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_782_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",782,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_791_resetSpriteTag,"FunkinLua","resetSpriteTag",0x3513682d,"FunkinLua.resetSpriteTag","FunkinLua.hx",791,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_810_cancelTween,"FunkinLua","cancelTween",0xb2cc778a,"FunkinLua.cancelTween","FunkinLua.hx",810,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_817_tweenShit,"FunkinLua","tweenShit",0xb737bc84,"FunkinLua.tweenShit","FunkinLua.hx",817,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_832_cancelTimer,"FunkinLua","cancelTimer",0xa9918ce4,"FunkinLua.cancelTimer","FunkinLua.hx",832,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_841_getFlxEaseByString,"FunkinLua","getFlxEaseByString",0x2e3003d9,"FunkinLua.getFlxEaseByString","FunkinLua.hx",841,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_883_cameraFromString,"FunkinLua","cameraFromString",0x153f0d47,"FunkinLua.cameraFromString","FunkinLua.hx",883,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_893_luaTrace,"FunkinLua","luaTrace",0x51031f14,"FunkinLua.luaTrace","FunkinLua.hx",893,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_903_call,"FunkinLua","call",0x3eec4e85,"FunkinLua.call","FunkinLua.hx",903,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_935_resultIsAllowed,"FunkinLua","resultIsAllowed",0x9872373a,"FunkinLua.resultIsAllowed","FunkinLua.hx",935,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_944_set,"FunkinLua","set",0x0f40df9b,"FunkinLua.set","FunkinLua.hx",944,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_956_getBool,"FunkinLua","getBool",0x82ab6859,"FunkinLua.getBool","FunkinLua.hx",956,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_972_stop,"FunkinLua","stop",0x498e25e9,"FunkinLua.stop","FunkinLua.hx",972,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_29_boot,"FunkinLua","boot",0x3e4dba19,"FunkinLua.boot","FunkinLua.hx",29,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_30_boot,"FunkinLua","boot",0x3e4dba19,"FunkinLua.boot","FunkinLua.hx",30,0x00117937)

void FunkinLua_obj::__construct(::String script){
            	HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_28_new)
HXLINE(  40)		this->accessedProps = null();
HXLINE(  38)		this->gonnaClose = false;
HXLINE(  37)		this->scriptName = HX_("",00,00,00,00);
HXLINE(  36)		this->lePlayState = null();
HXLINE(  33)		this->lua = null();
HXLINE(  41)		 ::FunkinLua _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  43)		this->lua = luaL_newstate();
HXLINE(  44)		luaL_openlibs(this->lua);
HXLINE(  45)		{
HXLINE(  45)			 cpp::Reference<lua_State> l = this->lua;
HXDLIN(  45)			linc::callbacks::set_callbacks_function(::cpp::Function< int ( cpp::Reference<lua_State>,::String)>(::hx::AnyCast(&::llua::Lua_helper_obj::callback_handler )));
            		}
HXLINE(  50)		 ::Dynamic result = luaL_dofile(this->lua,script);
HXLINE(  51)		::String resultStr = linc::lua::tostring(this->lua,( (int)(result) ));
HXLINE(  52)		bool _hx_tmp;
HXDLIN(  52)		if (::hx::IsNotNull( resultStr )) {
HXLINE(  52)			_hx_tmp = ::hx::IsNotEq( result,0 );
            		}
            		else {
HXLINE(  52)			_hx_tmp = false;
            		}
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  53)			::lime::app::Application_obj::current->_hx___window->alert(resultStr,HX_("Error on .LUA script!",e9,36,0d,31));
HXLINE(  54)			::haxe::Log_obj::trace((HX_("Error on .LUA script! ",17,d5,82,ba) + resultStr),::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),54,HX_("FunkinLua",e7,f3,7b,36),HX_("new",60,d0,53,00)));
HXLINE(  55)			this->lua = null();
HXLINE(  56)			return;
            		}
HXLINE(  58)		this->scriptName = script;
HXLINE(  59)		::haxe::Log_obj::trace((HX_("Lua file loaded succesfully:",7f,6a,cb,37) + script),::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),59,HX_("FunkinLua",e7,f3,7b,36),HX_("new",60,d0,53,00)));
HXLINE(  62)		this->accessedProps =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  67)		 ::Dynamic curState = ::flixel::FlxG_obj::game->_state;
HXLINE(  68)		this->lePlayState = ( ( ::PlayState)(curState) );
HXLINE(  71)		this->set(HX_("Function_Stop",c9,a5,e8,d3),::FunkinLua_obj::Function_Stop);
HXLINE(  72)		this->set(HX_("Function_Continue",ae,85,11,8b),::FunkinLua_obj::Function_Continue);
HXLINE(  73)		this->set(HX_("luaDebugMode",7e,06,20,4c),false);
HXLINE(  74)		this->set(HX_("luaDeprecatedWarnings",02,69,36,70),true);
HXLINE(  77)		this->set(HX_("curBpm",3f,61,c3,3e),::Conductor_obj::bpm);
HXLINE(  78)		this->set(HX_("bpm",df,be,4a,00), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)));
HXLINE(  79)		this->set(HX_("scrollSpeed",3a,e0,46,cb), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)));
HXLINE(  80)		this->set(HX_("crochet",34,d5,b5,d4),::Conductor_obj::crochet);
HXLINE(  81)		this->set(HX_("stepCrochet",48,d7,ff,e6),::Conductor_obj::stepCrochet);
HXLINE(  82)		this->set(HX_("songLength",9b,3a,8c,fa),::flixel::FlxG_obj::sound->music->_length);
HXLINE(  83)		this->set(HX_("songName",c0,d0,d7,36), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)));
HXLINE(  84)		this->set(HX_("startedCountdown",30,57,28,9b),false);
HXLINE(  86)		this->set(HX_("isStoryMode",ae,68,02,07),::PlayState_obj::isStoryMode);
HXLINE(  87)		this->set(HX_("difficulty",3b,4e,8e,47),::PlayState_obj::storyDifficulty);
HXLINE(  88)		this->set(HX_("weekRaw",54,9e,f6,24),::PlayState_obj::storyWeek);
HXLINE(  89)		this->set(HX_("week",f4,5f,f5,4e),::WeekData_obj::weeksList->__get(::PlayState_obj::storyWeek));
HXLINE(  90)		this->set(HX_("seenCutscene",25,d1,95,b5),::PlayState_obj::seenCutscene);
HXLINE(  93)		this->set(HX_("cameraX",13,8a,31,e3),0);
HXLINE(  94)		this->set(HX_("cameraY",14,8a,31,e3),0);
HXLINE(  97)		this->set(HX_("screenWidth",fa,02,e8,81),::flixel::FlxG_obj::width);
HXLINE(  98)		this->set(HX_("screenHeight",73,10,6a,df),::flixel::FlxG_obj::height);
HXLINE( 101)		this->set(HX_("curBeat",16,53,29,ac),0);
HXLINE( 102)		this->set(HX_("curStep",ec,58,71,b7),0);
HXLINE( 104)		this->set(HX_("score",52,73,d9,78),0);
HXLINE( 105)		this->set(HX_("misses",6a,62,54,56),0);
HXLINE( 106)		this->set(HX_("ghostMisses",19,4b,b6,82),0);
HXLINE( 107)		this->set(HX_("hits",c0,42,0e,45),0);
HXLINE( 109)		this->set(HX_("rating",1d,34,8a,bb),0);
HXLINE( 110)		this->set(HX_("ratingName",08,a5,2b,05),HX_("",00,00,00,00));
HXLINE( 112)		this->set(HX_("inGameOver",6b,97,d6,11),false);
HXLINE( 113)		this->set(HX_("mustHitSection",3b,5f,87,62),false);
HXLINE( 114)		this->set(HX_("botPlay",9b,27,83,4c),::PlayState_obj::cpuControlled);
HXLINE( 116)		{
HXLINE( 116)			{
HXLINE( 117)				this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 0),0);
HXLINE( 118)				this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 0),0);
HXLINE( 119)				this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 0),0);
HXLINE( 120)				this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 0),0);
            			}
HXLINE( 116)			{
HXLINE( 117)				this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 1),0);
HXLINE( 118)				this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 1),0);
HXLINE( 119)				this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 1),0);
HXLINE( 120)				this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 1),0);
            			}
HXLINE( 116)			{
HXLINE( 117)				this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 2),0);
HXLINE( 118)				this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 2),0);
HXLINE( 119)				this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 2),0);
HXLINE( 120)				this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 2),0);
            			}
HXLINE( 116)			{
HXLINE( 117)				this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 3),0);
HXLINE( 118)				this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 3),0);
HXLINE( 119)				this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 3),0);
HXLINE( 120)				this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 3),0);
            			}
            		}
HXLINE( 124)		this->set(HX_("downscroll",ef,45,d4,4f),::ClientPrefs_obj::downScroll);
HXLINE( 125)		this->set(HX_("middlescroll",22,59,c4,2d),::ClientPrefs_obj::middleScroll);
HXLINE( 126)		this->set(HX_("framerate",8d,e5,4b,4e),::ClientPrefs_obj::framerate);
HXLINE( 127)		this->set(HX_("ghostTapping",c6,6a,da,10),::ClientPrefs_obj::ghostTapping);
HXLINE( 128)		this->set(HX_("hideHud",15,b9,3c,b7),::ClientPrefs_obj::hideHud);
HXLINE( 129)		this->set(HX_("hideTime",ef,b5,ca,a5),::ClientPrefs_obj::hideTime);
HXLINE( 130)		this->set(HX_("cameraZoomOnBeat",ad,fc,ca,a9),::ClientPrefs_obj::camZooms);
HXLINE( 131)		this->set(HX_("flashingLights",af,15,62,da),::ClientPrefs_obj::flashing);
HXLINE( 132)		this->set(HX_("noteOffset",25,a5,53,fe),::ClientPrefs_obj::noteOffset);
HXLINE( 133)		this->set(HX_("lowQuality",8b,52,27,3e),::ClientPrefs_obj::lowQuality);
HXLINE( 136)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::FunkinLua,_gthis) HXARGC(1)
            			 ::Dynamic _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_136_new)
HXLINE( 137)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE( 138)				if ((killMe->length > 1)) {
HXLINE( 139)					 ::Dynamic coverMeInPiss = ::Reflect_obj::getProperty(_gthis->lePlayState,killMe->__get(0));
HXLINE( 140)					{
HXLINE( 140)						int _g = 1;
HXDLIN( 140)						int _g1 = (killMe->length - 1);
HXDLIN( 140)						while((_g < _g1)){
HXLINE( 140)							_g = (_g + 1);
HXDLIN( 140)							int i = (_g - 1);
HXLINE( 141)							coverMeInPiss = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(i));
            						}
            					}
HXLINE( 143)					return ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get((killMe->length - 1)));
            				}
HXLINE( 145)				return ::Reflect_obj::getProperty(_gthis->lePlayState,variable);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 136)			 cpp::Reference<lua_State> l1 = this->lua;
HXDLIN( 136)			::llua::Lua_helper_obj::callbacks->set(HX_("getProperty",0b,0b,2c,d2), ::Dynamic(new _hx_Closure_0(_gthis)));
HXDLIN( 136)			linc::callbacks::add_callback_function(l1,HX_("getProperty",0b,0b,2c,d2));
            		}
HXLINE( 147)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_147_new)
HXLINE( 148)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE( 149)				if ((killMe->length > 1)) {
HXLINE( 150)					 ::Dynamic coverMeInPiss = ::Reflect_obj::getProperty(_gthis->lePlayState,killMe->__get(0));
HXLINE( 151)					{
HXLINE( 151)						int _g = 1;
HXDLIN( 151)						int _g1 = (killMe->length - 1);
HXDLIN( 151)						while((_g < _g1)){
HXLINE( 151)							_g = (_g + 1);
HXDLIN( 151)							int i = (_g - 1);
HXLINE( 152)							coverMeInPiss = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(i));
            						}
            					}
HXLINE( 154)					::Reflect_obj::setProperty(coverMeInPiss,killMe->__get((killMe->length - 1)),value);
HXDLIN( 154)					return;
            				}
HXLINE( 156)				::Reflect_obj::setProperty(_gthis->lePlayState,variable,value);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 147)			 cpp::Reference<lua_State> l2 = this->lua;
HXDLIN( 147)			::llua::Lua_helper_obj::callbacks->set(HX_("setProperty",17,12,99,dc), ::Dynamic(new _hx_Closure_1(_gthis)));
HXDLIN( 147)			linc::callbacks::add_callback_function(l2,HX_("setProperty",17,12,99,dc));
            		}
HXLINE( 158)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::FunkinLua,_gthis) HXARGC(3)
            			 ::Dynamic _hx_run(::String obj,int index, ::Dynamic variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_158_new)
HXLINE( 159)				if (::Std_obj::isOfType(::Reflect_obj::getProperty(_gthis->lePlayState,obj),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 160)					return ::Reflect_obj::getProperty( ::Dynamic(::Reflect_obj::getProperty(_gthis->lePlayState,obj)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ));
            				}
HXLINE( 163)				 ::Dynamic leArray = ::Reflect_obj::getProperty(_gthis->lePlayState,obj)->__GetItem(index);
HXLINE( 164)				if (::hx::IsNotNull( leArray )) {
HXLINE( 165)					if (::hx::IsEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE( 166)						return leArray->__GetItem(( (int)(variable) ));
            					}
HXLINE( 168)					return ::Reflect_obj::getProperty(leArray,( (::String)(variable) ));
            				}
HXLINE( 170)				_gthis->luaTrace(((((HX_("Object #",a2,c4,dd,5c) + index) + HX_(" from group: ",0f,87,ba,2b)) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
HXLINE( 171)				return null();
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 158)			 cpp::Reference<lua_State> l3 = this->lua;
HXDLIN( 158)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyFromGroup",ea,38,fe,ee), ::Dynamic(new _hx_Closure_2(_gthis)));
HXDLIN( 158)			linc::callbacks::add_callback_function(l3,HX_("getPropertyFromGroup",ea,38,fe,ee));
            		}
HXLINE( 173)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String obj,int index, ::Dynamic variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_173_new)
HXLINE( 174)				if (::Std_obj::isOfType(::Reflect_obj::getProperty(_gthis->lePlayState,obj),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 175)					::Reflect_obj::setProperty( ::Dynamic(::Reflect_obj::getProperty(_gthis->lePlayState,obj)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ),value);
HXDLIN( 175)					return;
            				}
HXLINE( 178)				 ::Dynamic leArray = ::Reflect_obj::getProperty(_gthis->lePlayState,obj)->__GetItem(index);
HXLINE( 179)				if (::hx::IsNotNull( leArray )) {
HXLINE( 180)					if (::hx::IsEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE( 181)						leArray->__SetItem(( (int)(variable) ),value);
HXDLIN( 181)						return;
            					}
HXLINE( 183)					::Reflect_obj::setProperty(leArray,( (::String)(variable) ),value);
HXDLIN( 183)					return;
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 173)			 cpp::Reference<lua_State> l4 = this->lua;
HXDLIN( 173)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyFromGroup",5e,f0,b5,bb), ::Dynamic(new _hx_Closure_3(_gthis)));
HXDLIN( 173)			linc::callbacks::add_callback_function(l4,HX_("setPropertyFromGroup",5e,f0,b5,bb));
            		}
HXLINE( 186)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String obj,int index, ::Dynamic __o_dontKill, ::Dynamic __o_dontDestroy){
            		bool dontKill = __o_dontKill.Default(false);
            		bool dontDestroy = __o_dontDestroy.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_186_new)
HXLINE( 187)				if (::Std_obj::isOfType(::Reflect_obj::getProperty(_gthis->lePlayState,obj),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 188)					 ::Dynamic sex =  ::Dynamic(::Reflect_obj::getProperty(_gthis->lePlayState,obj)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index);
HXLINE( 189)					if (!(dontKill)) {
HXLINE( 190)						sex->__Field(HX_("kill",9e,df,09,47),::hx::paccDynamic)();
            					}
HXLINE( 191)					::Reflect_obj::getProperty(_gthis->lePlayState,obj)->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(sex,true);
HXLINE( 192)					if (!(dontDestroy)) {
HXLINE( 193)						sex->__Field(HX_("destroy",fa,2c,86,24),::hx::paccDynamic)();
            					}
HXLINE( 194)					return;
            				}
HXLINE( 196)				 ::Dynamic _hx_tmp =  ::Dynamic(::Reflect_obj::getProperty(_gthis->lePlayState,obj)->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic));
HXDLIN( 196)				_hx_tmp(::Reflect_obj::getProperty(_gthis->lePlayState,obj)->__GetItem(index));
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 186)			 cpp::Reference<lua_State> l5 = this->lua;
HXDLIN( 186)			::llua::Lua_helper_obj::callbacks->set(HX_("removeFromGroup",91,38,9c,8f), ::Dynamic(new _hx_Closure_4(_gthis)));
HXDLIN( 186)			linc::callbacks::add_callback_function(l5,HX_("removeFromGroup",91,38,9c,8f));
            		}
HXLINE( 199)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(2)
            			 ::Dynamic _hx_run(::String classVar,::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_199_new)
HXLINE( 200)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE( 201)				if ((killMe->length > 1)) {
HXLINE( 202)					::hx::Class coverMeInPiss = ::Type_obj::resolveClass(classVar);
HXDLIN( 202)					 ::Dynamic coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(0));
HXLINE( 203)					{
HXLINE( 203)						int _g = 1;
HXDLIN( 203)						int _g1 = (killMe->length - 1);
HXDLIN( 203)						while((_g < _g1)){
HXLINE( 203)							_g = (_g + 1);
HXDLIN( 203)							int i = (_g - 1);
HXLINE( 204)							coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(i));
            						}
            					}
HXLINE( 206)					return ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get((killMe->length - 1)));
            				}
HXLINE( 208)				return ::Reflect_obj::getProperty(::Type_obj::resolveClass(classVar),variable);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 199)			 cpp::Reference<lua_State> l6 = this->lua;
HXDLIN( 199)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyFromClass",e3,fd,61,9d), ::Dynamic(new _hx_Closure_5()));
HXDLIN( 199)			linc::callbacks::add_callback_function(l6,HX_("getPropertyFromClass",e3,fd,61,9d));
            		}
HXLINE( 210)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(3)
            			void _hx_run(::String classVar,::String variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_210_new)
HXLINE( 211)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE( 212)				if ((killMe->length > 1)) {
HXLINE( 213)					::hx::Class coverMeInPiss = ::Type_obj::resolveClass(classVar);
HXDLIN( 213)					 ::Dynamic coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(0));
HXLINE( 214)					{
HXLINE( 214)						int _g = 1;
HXDLIN( 214)						int _g1 = (killMe->length - 1);
HXDLIN( 214)						while((_g < _g1)){
HXLINE( 214)							_g = (_g + 1);
HXDLIN( 214)							int i = (_g - 1);
HXLINE( 215)							coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(i));
            						}
            					}
HXLINE( 217)					::Reflect_obj::setProperty(coverMeInPiss1,killMe->__get((killMe->length - 1)),value);
HXDLIN( 217)					return;
            				}
HXLINE( 219)				::Reflect_obj::setProperty(::Type_obj::resolveClass(classVar),variable,value);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 210)			 cpp::Reference<lua_State> l7 = this->lua;
HXDLIN( 210)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyFromClass",57,b5,19,6a), ::Dynamic(new _hx_Closure_6()));
HXDLIN( 210)			linc::callbacks::add_callback_function(l7,HX_("setPropertyFromClass",57,b5,19,6a));
            		}
HXLINE( 223)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,::String classVar,::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_224_new)
HXLINE( 224)				::Dynamic this1 = _gthis->accessedProps;
HXDLIN( 224)				 ::Dynamic value;
HXDLIN( 224)				if (::hx::IsNotNull( classVar )) {
HXLINE( 224)					value = ::Type_obj::resolveClass(classVar);
            				}
            				else {
HXLINE( 224)					value = _gthis->lePlayState;
            				}
HXDLIN( 224)				( ( ::haxe::ds::StringMap)(this1) )->set(tag,::Reflect_obj::getProperty(value,variable));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 223)			 cpp::Reference<lua_State> l8 = this->lua;
HXDLIN( 223)			::llua::Lua_helper_obj::callbacks->set(HX_("accessPropertyFirst",57,4f,9d,34), ::Dynamic(new _hx_Closure_7(_gthis)));
HXDLIN( 223)			linc::callbacks::add_callback_function(l8,HX_("accessPropertyFirst",57,4f,9d,34));
            		}
HXLINE( 226)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String classVar,::String obj,int index, ::Dynamic variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_226_new)
HXLINE( 227)				 ::Dynamic _hx_tmp;
HXDLIN( 227)				if (::hx::IsNotNull( classVar )) {
HXLINE( 227)					_hx_tmp = ::Type_obj::resolveClass(classVar);
            				}
            				else {
HXLINE( 227)					_hx_tmp = _gthis->lePlayState;
            				}
HXDLIN( 227)				if (::Std_obj::isOfType(::Reflect_obj::getProperty(_hx_tmp,( (::String)(variable) )),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 228)					::Dynamic this1 = _gthis->accessedProps;
HXDLIN( 228)					 ::Dynamic value;
HXDLIN( 228)					if (::hx::IsNotNull( classVar )) {
HXLINE( 228)						value = ::Type_obj::resolveClass(classVar);
            					}
            					else {
HXLINE( 228)						value = _gthis->lePlayState;
            					}
HXDLIN( 228)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,::Reflect_obj::getProperty( ::Dynamic(::Reflect_obj::getProperty(value,obj)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) )));
            				}
HXLINE( 231)				 ::Dynamic leArray;
HXDLIN( 231)				if (::hx::IsNotNull( classVar )) {
HXLINE( 231)					leArray = ::Type_obj::resolveClass(classVar);
            				}
            				else {
HXLINE( 231)					leArray = _gthis->lePlayState;
            				}
HXDLIN( 231)				 ::Dynamic leArray1 = ::Reflect_obj::getProperty(leArray,( (::String)(variable) ))->__GetItem(index);
HXLINE( 232)				if (::hx::IsNotNull( leArray1 )) {
HXLINE( 233)					if (::hx::IsEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE( 234)						_gthis->accessedProps->set(tag,leArray1->__GetItem(( (int)(variable) )));
            					}
HXLINE( 236)					{
HXLINE( 236)						::Dynamic this1 = _gthis->accessedProps;
HXDLIN( 236)						( ( ::haxe::ds::StringMap)(this1) )->set(tag,::Reflect_obj::getProperty(leArray1,( (::String)(variable) )));
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 226)			 cpp::Reference<lua_State> l9 = this->lua;
HXDLIN( 226)			::llua::Lua_helper_obj::callbacks->set(HX_("accessPropertyFromGroupFirst",74,ee,ba,19), ::Dynamic(new _hx_Closure_8(_gthis)));
HXDLIN( 226)			linc::callbacks::add_callback_function(l9,HX_("accessPropertyFromGroupFirst",74,ee,ba,19));
            		}
HXLINE( 239)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String tag,::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_239_new)
HXLINE( 240)				if (_gthis->accessedProps->exists(tag)) {
HXLINE( 241)					::Dynamic this1 = _gthis->accessedProps;
HXDLIN( 241)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,::Reflect_obj::getProperty(_gthis->accessedProps->get(tag),variable));
            				}
HXLINE( 243)				_gthis->luaTrace(((HX_("Accessed property ",ee,c2,a2,3d) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 239)			 cpp::Reference<lua_State> l10 = this->lua;
HXDLIN( 239)			::llua::Lua_helper_obj::callbacks->set(HX_("accessProperty",19,de,b4,ab), ::Dynamic(new _hx_Closure_9(_gthis)));
HXDLIN( 239)			linc::callbacks::add_callback_function(l10,HX_("accessProperty",19,de,b4,ab));
            		}
HXLINE( 245)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,int index, ::Dynamic variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_245_new)
HXLINE( 246)				if (!(_gthis->accessedProps->exists(tag))) {
HXLINE( 247)					_gthis->luaTrace(((HX_("Accessed property ",ee,c2,a2,3d) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
HXLINE( 248)					return;
            				}
HXLINE( 251)				if (::Std_obj::isOfType(_gthis->accessedProps->get(tag),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 252)					::Dynamic this1 = _gthis->accessedProps;
HXDLIN( 252)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,::Reflect_obj::getProperty( ::Dynamic(_gthis->accessedProps->get(tag)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) )));
            				}
HXLINE( 255)				 ::Dynamic leArray = _gthis->accessedProps->get(tag)->__GetItem(index);
HXLINE( 256)				if (::hx::IsNotNull( leArray )) {
HXLINE( 257)					if (::hx::IsEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE( 258)						_gthis->accessedProps->set(tag,leArray->__GetItem(( (int)(variable) )));
            					}
HXLINE( 260)					{
HXLINE( 260)						::Dynamic this1 = _gthis->accessedProps;
HXDLIN( 260)						( ( ::haxe::ds::StringMap)(this1) )->set(tag,::Reflect_obj::getProperty(leArray,( (::String)(variable) )));
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 245)			 cpp::Reference<lua_State> l11 = this->lua;
HXDLIN( 245)			::llua::Lua_helper_obj::callbacks->set(HX_("accessPropertyFromGroup",1c,94,55,89), ::Dynamic(new _hx_Closure_10(_gthis)));
HXDLIN( 245)			linc::callbacks::add_callback_function(l11,HX_("accessPropertyFromGroup",1c,94,55,89));
            		}
HXLINE( 263)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11, ::FunkinLua,_gthis) HXARGC(2)
            			 ::Dynamic _hx_run(::String tag,::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_263_new)
HXLINE( 264)				if (_gthis->accessedProps->exists(tag)) {
HXLINE( 265)					return ::Reflect_obj::getProperty(_gthis->accessedProps->get(tag),variable);
            				}
HXLINE( 267)				_gthis->luaTrace(((HX_("Accessed property ",ee,c2,a2,3d) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
HXLINE( 268)				return null();
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 263)			 cpp::Reference<lua_State> l12 = this->lua;
HXDLIN( 263)			::llua::Lua_helper_obj::callbacks->set(HX_("getAccessedPropertyValue",63,e1,00,24), ::Dynamic(new _hx_Closure_11(_gthis)));
HXDLIN( 263)			linc::callbacks::add_callback_function(l12,HX_("getAccessedPropertyValue",63,e1,00,24));
            		}
HXLINE( 270)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,::String variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_271_new)
HXLINE( 271)				if (_gthis->accessedProps->exists(tag)) {
HXLINE( 272)					::Reflect_obj::setProperty(_gthis->accessedProps->get(tag),variable,value);
HXDLIN( 272)					return;
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 270)			 cpp::Reference<lua_State> l13 = this->lua;
HXDLIN( 270)			::llua::Lua_helper_obj::callbacks->set(HX_("setAccessedPropertyValue",d7,62,db,36), ::Dynamic(new _hx_Closure_12(_gthis)));
HXDLIN( 270)			linc::callbacks::add_callback_function(l13,HX_("setAccessedPropertyValue",d7,62,db,36));
            		}
HXLINE( 275)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::FunkinLua,_gthis) HXARGC(3)
            			 ::Dynamic _hx_run(::String tag,int index, ::Dynamic variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_275_new)
HXLINE( 276)				if (_gthis->accessedProps->exists(tag)) {
HXLINE( 277)					if (::Std_obj::isOfType(_gthis->accessedProps->get(tag),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 278)						return ::Reflect_obj::getProperty( ::Dynamic(_gthis->accessedProps->get(tag)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ));
            					}
HXLINE( 281)					 ::Dynamic leArray = _gthis->accessedProps->get(tag)->__GetItem(index);
HXLINE( 282)					if (::hx::IsNotNull( leArray )) {
HXLINE( 283)						if (::hx::IsEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE( 284)							return leArray->__GetItem(( (int)(variable) ));
            						}
HXLINE( 286)						return ::Reflect_obj::getProperty(leArray,( (::String)(variable) ));
            					}
            				}
HXLINE( 289)				_gthis->luaTrace(((HX_("Accessed property ",ee,c2,a2,3d) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
HXLINE( 290)				return null();
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 275)			 cpp::Reference<lua_State> l14 = this->lua;
HXDLIN( 275)			::llua::Lua_helper_obj::callbacks->set(HX_("getAccessedPropertyValueFromGroup",92,d7,77,1c), ::Dynamic(new _hx_Closure_13(_gthis)));
HXDLIN( 275)			linc::callbacks::add_callback_function(l14,HX_("getAccessedPropertyValueFromGroup",92,d7,77,1c));
            		}
HXLINE( 292)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String tag,int index, ::Dynamic variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_293_new)
HXLINE( 293)				if (_gthis->accessedProps->exists(tag)) {
HXLINE( 294)					if (::Std_obj::isOfType(_gthis->accessedProps->get(tag),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE( 295)						::Reflect_obj::setProperty( ::Dynamic(_gthis->accessedProps->get(tag)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ),value);
HXDLIN( 295)						return;
            					}
HXLINE( 298)					 ::Dynamic leArray = _gthis->accessedProps->get(tag)->__GetItem(index);
HXLINE( 299)					if (::hx::IsNotNull( leArray )) {
HXLINE( 300)						if (::hx::IsEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE( 301)							leArray->__SetItem(( (int)(variable) ),value);
HXDLIN( 301)							return;
            						}
HXLINE( 303)						::Reflect_obj::setProperty(leArray,( (::String)(variable) ),value);
HXDLIN( 303)						return;
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 292)			 cpp::Reference<lua_State> l15 = this->lua;
HXDLIN( 292)			::llua::Lua_helper_obj::callbacks->set(HX_("setAccessedPropertyValueFromGroup",9e,87,83,86), ::Dynamic(new _hx_Closure_14(_gthis)));
HXDLIN( 292)			linc::callbacks::add_callback_function(l15,HX_("setAccessedPropertyValueFromGroup",9e,87,83,86));
            		}
HXLINE( 309)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_16, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_309_new)
HXLINE( 310)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE( 311)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_15, ::FunkinLua,_gthis,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_313_new)
HXLINE( 314)						_gthis->call(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 315)						_gthis->lePlayState->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 312)					::Dynamic this1 = _gthis->lePlayState->modchartTweens;
HXDLIN( 312)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("x",78,00,00,00),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_15(_gthis,tag)))));
HXDLIN( 312)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE( 319)					_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + vars),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 309)			 cpp::Reference<lua_State> l16 = this->lua;
HXDLIN( 309)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenX",78,f9,3b,bd), ::Dynamic(new _hx_Closure_16(_gthis)));
HXDLIN( 309)			linc::callbacks::add_callback_function(l16,HX_("doTweenX",78,f9,3b,bd));
            		}
HXLINE( 322)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_18, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_322_new)
HXLINE( 323)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE( 324)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_17, ::FunkinLua,_gthis,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_326_new)
HXLINE( 327)						_gthis->call(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 328)						_gthis->lePlayState->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 325)					::Dynamic this1 = _gthis->lePlayState->modchartTweens;
HXDLIN( 325)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("y",79,00,00,00),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_17(_gthis,tag)))));
HXDLIN( 325)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE( 332)					_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + vars),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 322)			 cpp::Reference<lua_State> l17 = this->lua;
HXDLIN( 322)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenY",79,f9,3b,bd), ::Dynamic(new _hx_Closure_18(_gthis)));
HXDLIN( 322)			linc::callbacks::add_callback_function(l17,HX_("doTweenY",79,f9,3b,bd));
            		}
HXLINE( 335)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_20, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_335_new)
HXLINE( 336)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE( 337)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_19, ::FunkinLua,_gthis,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_339_new)
HXLINE( 340)						_gthis->call(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 341)						_gthis->lePlayState->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 338)					::Dynamic this1 = _gthis->lePlayState->modchartTweens;
HXDLIN( 338)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_19(_gthis,tag)))));
HXDLIN( 338)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE( 345)					_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + vars),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 335)			 cpp::Reference<lua_State> l18 = this->lua;
HXDLIN( 335)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenAlpha",5e,20,c3,5e), ::Dynamic(new _hx_Closure_20(_gthis)));
HXDLIN( 335)			linc::callbacks::add_callback_function(l18,HX_("doTweenAlpha",5e,20,c3,5e));
            		}
HXLINE( 348)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_22, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_348_new)
HXLINE( 349)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE( 350)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_21, ::FunkinLua,_gthis,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_352_new)
HXLINE( 353)						_gthis->call(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
HXLINE( 354)						_gthis->lePlayState->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 351)					::Dynamic this1 = _gthis->lePlayState->modchartTweens;
HXDLIN( 351)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("zoom",13,a3,f8,50),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_21(_gthis,tag)))));
HXDLIN( 351)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE( 358)					_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + vars),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 348)			 cpp::Reference<lua_State> l19 = this->lua;
HXDLIN( 348)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenZoom",13,4a,be,e0), ::Dynamic(new _hx_Closure_22(_gthis)));
HXDLIN( 348)			linc::callbacks::add_callback_function(l19,HX_("doTweenZoom",13,4a,be,e0));
            		}
HXLINE( 361)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_24, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars,::String targetColor,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_361_new)
HXLINE( 362)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE( 363)				if (::hx::IsNotNull( penisExam )) {
HXLINE( 364)					int color = ( (int)(::Std_obj::parseInt(targetColor)) );
HXLINE( 365)					if (!(::StringTools_obj::startsWith(targetColor,HX_("0x",48,2a,00,00)))) {
HXLINE( 365)						color = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + targetColor))) );
            					}
HXLINE( 367)					{
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_23, ::FunkinLua,_gthis,::String,tag) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_368_new)
HXLINE( 369)							_gthis->lePlayState->modchartTweens->remove(tag);
HXLINE( 370)							_gthis->call(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag));
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 367)						::Dynamic this1 = _gthis->lePlayState->modchartTweens;
HXDLIN( 367)						 ::Dynamic penisExam1 =  ::Dynamic(penisExam->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic));
HXDLIN( 367)						 ::flixel::tweens::FlxTween value = ::flixel::tweens::FlxTween_obj::color(( ( ::flixel::FlxSprite)(penisExam) ),duration,( (int)(penisExam1) ),color, ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_23(_gthis,tag)))));
HXDLIN( 367)						( ( ::haxe::ds::StringMap)(this1) )->set(tag,value);
            					}
            				}
            				else {
HXLINE( 374)					_gthis->luaTrace((HX_("Couldnt find object: ",73,df,78,2c) + vars),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 361)			 cpp::Reference<lua_State> l20 = this->lua;
HXDLIN( 361)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenColor",63,ea,88,87), ::Dynamic(new _hx_Closure_24(_gthis)));
HXDLIN( 361)			linc::callbacks::add_callback_function(l20,HX_("doTweenColor",63,ea,88,87));
            		}
HXLINE( 377)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_25, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_378_new)
HXLINE( 378)				_gthis->cancelTween(tag);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 377)			 cpp::Reference<lua_State> l21 = this->lua;
HXDLIN( 377)			::llua::Lua_helper_obj::callbacks->set(HX_("cancelTween",91,12,99,b7), ::Dynamic(new _hx_Closure_25(_gthis)));
HXDLIN( 377)			linc::callbacks::add_callback_function(l21,HX_("cancelTween",91,12,99,b7));
            		}
HXLINE( 381)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_27, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag, ::Dynamic __o_time, ::Dynamic __o_loops){
            		Float time = __o_time.Default(1);
            		int loops = __o_loops.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_381_new)
HXLINE( 382)				_gthis->cancelTimer(tag);
HXLINE( 383)				{
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_26, ::FunkinLua,_gthis,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_383_new)
HXLINE( 384)						if (tmr->finished) {
HXLINE( 385)							_gthis->lePlayState->modchartTimers->remove(tag);
            						}
HXLINE( 387)						_gthis->call(HX_("onTimerCompleted",85,2e,4a,47),::cpp::VirtualArray_obj::__new(3)->init(0,tag)->init(1,tmr->loops)->init(2,(tmr->loops - tmr->_loopsCounter)));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 383)					::Dynamic this1 = _gthis->lePlayState->modchartTimers;
HXDLIN( 383)					 ::flixel::util::FlxTimer value =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(time, ::Dynamic(new _hx_Closure_26(_gthis,tag)),loops);
HXDLIN( 383)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 381)			 cpp::Reference<lua_State> l22 = this->lua;
HXDLIN( 381)			::llua::Lua_helper_obj::callbacks->set(HX_("runTimer",7a,f8,6a,18), ::Dynamic(new _hx_Closure_27(_gthis)));
HXDLIN( 381)			linc::callbacks::add_callback_function(l22,HX_("runTimer",7a,f8,6a,18));
            		}
HXLINE( 390)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_28, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_391_new)
HXLINE( 391)				_gthis->cancelTimer(tag);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 390)			 cpp::Reference<lua_State> l23 = this->lua;
HXDLIN( 390)			::llua::Lua_helper_obj::callbacks->set(HX_("cancelTimer",eb,27,5e,ae), ::Dynamic(new _hx_Closure_28(_gthis)));
HXDLIN( 390)			linc::callbacks::add_callback_function(l23,HX_("cancelTimer",eb,27,5e,ae));
            		}
HXLINE( 427)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_29, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_427_new)
HXLINE( 428)				 ::PlayState _gthis1 = _gthis->lePlayState;
HXDLIN( 428)				_gthis1->songScore = (_gthis1->songScore + value);
HXLINE( 429)				_gthis->lePlayState->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 427)			 cpp::Reference<lua_State> l24 = this->lua;
HXDLIN( 427)			::llua::Lua_helper_obj::callbacks->set(HX_("addScore",71,99,36,f2), ::Dynamic(new _hx_Closure_29(_gthis)));
HXDLIN( 427)			linc::callbacks::add_callback_function(l24,HX_("addScore",71,99,36,f2));
            		}
HXLINE( 431)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_30, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_431_new)
HXLINE( 432)				 ::PlayState _gthis1 = _gthis->lePlayState;
HXDLIN( 432)				_gthis1->songMisses = (_gthis1->songMisses + value);
HXLINE( 433)				_gthis->lePlayState->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 431)			 cpp::Reference<lua_State> l25 = this->lua;
HXDLIN( 431)			::llua::Lua_helper_obj::callbacks->set(HX_("addMisses",6b,97,78,0e), ::Dynamic(new _hx_Closure_30(_gthis)));
HXDLIN( 431)			linc::callbacks::add_callback_function(l25,HX_("addMisses",6b,97,78,0e));
            		}
HXLINE( 435)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_31, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_435_new)
HXLINE( 436)				 ::PlayState _gthis1 = _gthis->lePlayState;
HXDLIN( 436)				_gthis1->songHits = (_gthis1->songHits + value);
HXLINE( 437)				_gthis->lePlayState->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 435)			 cpp::Reference<lua_State> l26 = this->lua;
HXDLIN( 435)			::llua::Lua_helper_obj::callbacks->set(HX_("addHits",81,85,4b,81), ::Dynamic(new _hx_Closure_31(_gthis)));
HXDLIN( 435)			linc::callbacks::add_callback_function(l26,HX_("addHits",81,85,4b,81));
            		}
HXLINE( 439)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_32, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_439_new)
HXLINE( 440)				_gthis->lePlayState->songScore = value;
HXLINE( 441)				_gthis->lePlayState->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 439)			 cpp::Reference<lua_State> l27 = this->lua;
HXDLIN( 439)			::llua::Lua_helper_obj::callbacks->set(HX_("setScore",50,dc,0d,87), ::Dynamic(new _hx_Closure_32(_gthis)));
HXDLIN( 439)			linc::callbacks::add_callback_function(l27,HX_("setScore",50,dc,0d,87));
            		}
HXLINE( 443)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_33, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_443_new)
HXLINE( 444)				_gthis->lePlayState->songMisses = value;
HXLINE( 445)				_gthis->lePlayState->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 443)			 cpp::Reference<lua_State> l28 = this->lua;
HXDLIN( 443)			::llua::Lua_helper_obj::callbacks->set(HX_("setMisses",ac,d7,fb,b5), ::Dynamic(new _hx_Closure_33(_gthis)));
HXDLIN( 443)			linc::callbacks::add_callback_function(l28,HX_("setMisses",ac,d7,fb,b5));
            		}
HXLINE( 447)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_34, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_447_new)
HXLINE( 448)				_gthis->lePlayState->songHits = value;
HXLINE( 449)				_gthis->lePlayState->RecalculateRating();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 447)			 cpp::Reference<lua_State> l29 = this->lua;
HXDLIN( 447)			::llua::Lua_helper_obj::callbacks->set(HX_("setHits",82,83,92,0a), ::Dynamic(new _hx_Closure_34(_gthis)));
HXDLIN( 447)			linc::callbacks::add_callback_function(l29,HX_("setHits",82,83,92,0a));
            		}
HXLINE( 452)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_35) HXARGC(1)
            			 ::Dynamic _hx_run(::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_452_new)
HXLINE( 453)				if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE( 453)					color = (HX_("0xff",88,a5,15,20) + color);
            				}
HXLINE( 454)				return ::Std_obj::parseInt(color);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 452)			 cpp::Reference<lua_State> l30 = this->lua;
HXDLIN( 452)			::llua::Lua_helper_obj::callbacks->set(HX_("getColorFromHex",24,62,3b,a4), ::Dynamic(new _hx_Closure_35()));
HXDLIN( 452)			linc::callbacks::add_callback_function(l30,HX_("getColorFromHex",24,62,3b,a4));
            		}
HXLINE( 456)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_36, ::FunkinLua,_gthis) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_456_new)
HXLINE( 457)				bool key = false;
HXLINE( 458)				::String _hx_switch_0 = name;
            				if (  (_hx_switch_0==HX_("accept",08,93,06,0b)) ){
HXLINE( 463)					key = _gthis->lePlayState->getControl(HX_("ACCEPT",08,3f,89,bd));
HXDLIN( 463)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("back",27,da,10,41)) ){
HXLINE( 464)					key = _gthis->lePlayState->getControl(HX_("BACK",27,a2,d1,2b));
HXDLIN( 464)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE( 460)					key = _gthis->lePlayState->getControl(HX_("NOTE_DOWN_P",e0,63,af,91));
HXDLIN( 460)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 459)					key = _gthis->lePlayState->getControl(HX_("NOTE_LEFT_P",c5,66,50,f7));
HXDLIN( 459)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("pause",f6,d6,57,bd)) ){
HXLINE( 465)					key = _gthis->lePlayState->getControl(HX_("PAUSE",d6,0e,46,3b));
HXDLIN( 465)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("reset",cf,49,c8,e6)) ){
HXLINE( 466)					key = _gthis->lePlayState->getControl(HX_("RESET",af,81,b6,64));
HXDLIN( 466)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 462)					key = _gthis->lePlayState->getControl(HX_("NOTE_RIGHT_P",40,79,67,8d));
HXDLIN( 462)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE( 461)					key = _gthis->lePlayState->getControl(HX_("NOTE_UP_P",d9,58,47,13));
HXDLIN( 461)					goto _hx_goto_4;
            				}
            				_hx_goto_4:;
HXLINE( 468)				return key;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 456)			 cpp::Reference<lua_State> l31 = this->lua;
HXDLIN( 456)			::llua::Lua_helper_obj::callbacks->set(HX_("keyJustPressed",77,d2,b7,cd), ::Dynamic(new _hx_Closure_36(_gthis)));
HXDLIN( 456)			linc::callbacks::add_callback_function(l31,HX_("keyJustPressed",77,d2,b7,cd));
            		}
HXLINE( 470)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_37, ::FunkinLua,_gthis) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_470_new)
HXLINE( 471)				bool key = false;
HXLINE( 472)				::String _hx_switch_1 = name;
            				if (  (_hx_switch_1==HX_("down",62,f8,6d,42)) ){
HXLINE( 474)					key = _gthis->lePlayState->getControl(HX_("NOTE_DOWN",0f,ef,09,08));
HXDLIN( 474)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_1==HX_("left",07,08,b0,47)) ){
HXLINE( 473)					key = _gthis->lePlayState->getControl(HX_("NOTE_LEFT",b4,fe,4b,0d));
HXDLIN( 473)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_1==HX_("right",dc,0b,64,e9)) ){
HXLINE( 476)					key = _gthis->lePlayState->getControl(HX_("NOTE_RIGHT",6f,ec,3f,0c));
HXDLIN( 476)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_1==HX_("up",5b,66,00,00)) ){
HXLINE( 475)					key = _gthis->lePlayState->getControl(HX_("NOTE_UP",c8,83,48,cd));
HXDLIN( 475)					goto _hx_goto_5;
            				}
            				_hx_goto_5:;
HXLINE( 478)				return key;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 470)			 cpp::Reference<lua_State> l32 = this->lua;
HXDLIN( 470)			::llua::Lua_helper_obj::callbacks->set(HX_("keyPressed",c3,72,6e,a8), ::Dynamic(new _hx_Closure_37(_gthis)));
HXDLIN( 470)			linc::callbacks::add_callback_function(l32,HX_("keyPressed",c3,72,6e,a8));
            		}
HXLINE( 480)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_38, ::FunkinLua,_gthis) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_480_new)
HXLINE( 481)				bool key = false;
HXLINE( 482)				::String _hx_switch_2 = name;
            				if (  (_hx_switch_2==HX_("down",62,f8,6d,42)) ){
HXLINE( 484)					key = _gthis->lePlayState->getControl(HX_("NOTE_DOWN_R",e2,63,af,91));
HXDLIN( 484)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("left",07,08,b0,47)) ){
HXLINE( 483)					key = _gthis->lePlayState->getControl(HX_("NOTE_LEFT_R",c7,66,50,f7));
HXDLIN( 483)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE( 486)					key = _gthis->lePlayState->getControl(HX_("NOTE_RIGHT_R",42,79,67,8d));
HXDLIN( 486)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("up",5b,66,00,00)) ){
HXLINE( 485)					key = _gthis->lePlayState->getControl(HX_("NOTE_UP_R",db,58,47,13));
HXDLIN( 485)					goto _hx_goto_6;
            				}
            				_hx_goto_6:;
HXLINE( 488)				return key;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 480)			 cpp::Reference<lua_State> l33 = this->lua;
HXDLIN( 480)			::llua::Lua_helper_obj::callbacks->set(HX_("keyReleased",7c,05,0c,bf), ::Dynamic(new _hx_Closure_38(_gthis)));
HXDLIN( 480)			linc::callbacks::add_callback_function(l33,HX_("keyReleased",7c,05,0c,bf));
            		}
HXLINE( 490)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_39, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String name,::String type){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_490_new)
HXLINE( 491)				int charType = 0;
HXLINE( 492)				::String _hx_switch_3 = type.toLowerCase();
            				if (  (_hx_switch_3==HX_("dad",47,36,4c,00)) ){
HXLINE( 493)					charType = 1;
HXDLIN( 493)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_3==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_3==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 494)					charType = 2;
HXDLIN( 494)					goto _hx_goto_7;
            				}
            				_hx_goto_7:;
HXLINE( 496)				_gthis->lePlayState->addCharacterToList(name,charType);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 490)			 cpp::Reference<lua_State> l34 = this->lua;
HXDLIN( 490)			::llua::Lua_helper_obj::callbacks->set(HX_("addCharacterToList",e1,1e,4c,45), ::Dynamic(new _hx_Closure_39(_gthis)));
HXDLIN( 490)			linc::callbacks::add_callback_function(l34,HX_("addCharacterToList",e1,1e,4c,45));
            		}
HXLINE( 498)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_40, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String name, ::Dynamic arg1, ::Dynamic arg2){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_498_new)
HXLINE( 499)				::String value1 = ( (::String)(arg1) );
HXLINE( 500)				::String value2 = ( (::String)(arg2) );
HXLINE( 501)				_gthis->lePlayState->triggerEventNote(name,value1,value2);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 498)			 cpp::Reference<lua_State> l35 = this->lua;
HXDLIN( 498)			::llua::Lua_helper_obj::callbacks->set(HX_("triggerEvent",c2,f7,5a,f4), ::Dynamic(new _hx_Closure_40(_gthis)));
HXDLIN( 498)			linc::callbacks::add_callback_function(l35,HX_("triggerEvent",c2,f7,5a,f4));
            		}
HXLINE( 504)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_41) HXARGC(2)
            			void _hx_run(::String sound, ::Dynamic __o_volume){
            		Float volume = __o_volume.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_505_new)
HXLINE( 505)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 505)				_hx_tmp->play(::Paths_obj::sound(sound,null()),volume,null(),null(),null(),null());
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 504)			 cpp::Reference<lua_State> l36 = this->lua;
HXDLIN( 504)			::llua::Lua_helper_obj::callbacks->set(HX_("playSound",3b,ba,b0,a1), ::Dynamic(new _hx_Closure_41()));
HXDLIN( 504)			linc::callbacks::add_callback_function(l36,HX_("playSound",3b,ba,b0,a1));
            		}
HXLINE( 508)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_42, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_509_new)
HXLINE( 509)				_gthis->lePlayState->startCountdown();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 508)			 cpp::Reference<lua_State> l37 = this->lua;
HXDLIN( 508)			::llua::Lua_helper_obj::callbacks->set(HX_("startCountdown",ef,1f,f0,88), ::Dynamic(new _hx_Closure_42(_gthis)));
HXDLIN( 508)			linc::callbacks::add_callback_function(l37,HX_("startCountdown",ef,1f,f0,88));
            		}
HXLINE( 511)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_43) HXARGC(0)
            			Float _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_512_new)
HXLINE( 512)				return ::Conductor_obj::songPosition;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 511)			 cpp::Reference<lua_State> l38 = this->lua;
HXDLIN( 511)			::llua::Lua_helper_obj::callbacks->set(HX_("getSongPosition",54,33,26,b0), ::Dynamic(new _hx_Closure_43()));
HXDLIN( 511)			linc::callbacks::add_callback_function(l38,HX_("getSongPosition",54,33,26,b0));
            		}
HXLINE( 515)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_44, ::FunkinLua,_gthis) HXARGC(1)
            			Float _hx_run(::String type){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_516_new)
HXLINE( 516)				::String _hx_switch_4 = type.toLowerCase();
            				if (  (_hx_switch_4==HX_("dad",47,36,4c,00)) ){
HXLINE( 518)					return _gthis->lePlayState->DAD_X;
HXDLIN( 518)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_4==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_4==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 520)					return _gthis->lePlayState->GF_X;
HXDLIN( 520)					goto _hx_goto_8;
            				}
            				/* default */{
HXLINE( 522)					return _gthis->lePlayState->BF_X;
            				}
            				_hx_goto_8:;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 515)			 cpp::Reference<lua_State> l39 = this->lua;
HXDLIN( 515)			::llua::Lua_helper_obj::callbacks->set(HX_("getCharacterX",c5,b4,40,b2), ::Dynamic(new _hx_Closure_44(_gthis)));
HXDLIN( 515)			linc::callbacks::add_callback_function(l39,HX_("getCharacterX",c5,b4,40,b2));
            		}
HXLINE( 525)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_48, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String type,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_526_new)
HXLINE( 526)				::String _hx_switch_5 = type.toLowerCase();
            				if (  (_hx_switch_5==HX_("dad",47,36,4c,00)) ){
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_46, ::FunkinLua,_gthis) HXARGC(1)
            					void _hx_run( ::Character _hx_char){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_530_new)
HXLINE( 530)						_hx_char->set_x((_gthis->lePlayState->DAD_X + _hx_char->positionArray->__get(0)));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 528)					_gthis->lePlayState->DAD_X = value;
HXLINE( 529)					_gthis->lePlayState->dadGroup->forEachAlive( ::Dynamic(new _hx_Closure_46(_gthis)),null());
HXLINE( 527)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_5==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_5==HX_("girlfriend",ba,91,48,98)) ){
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_47, ::FunkinLua,_gthis) HXARGC(1)
            					void _hx_run( ::Boyfriend _hx_char){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_535_new)
HXLINE( 535)						_hx_char->set_x((_gthis->lePlayState->BF_X + _hx_char->positionArray->__get(0)));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 533)					_gthis->lePlayState->BF_X = value;
HXLINE( 534)					_gthis->lePlayState->boyfriendGroup->forEachAlive( ::Dynamic(new _hx_Closure_47(_gthis)),null());
HXLINE( 532)					goto _hx_goto_9;
            				}
            				/* default */{
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_45, ::FunkinLua,_gthis) HXARGC(1)
            					void _hx_run( ::Character _hx_char){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_540_new)
HXLINE( 540)						_hx_char->set_x((_gthis->lePlayState->GF_X + _hx_char->positionArray->__get(0)));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 538)					_gthis->lePlayState->GF_X = value;
HXLINE( 539)					_gthis->lePlayState->gfGroup->forEachAlive( ::Dynamic(new _hx_Closure_45(_gthis)),null());
            				}
            				_hx_goto_9:;
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 525)			 cpp::Reference<lua_State> l40 = this->lua;
HXDLIN( 525)			::llua::Lua_helper_obj::callbacks->set(HX_("setCharacterX",d1,96,46,f7), ::Dynamic(new _hx_Closure_48(_gthis)));
HXDLIN( 525)			linc::callbacks::add_callback_function(l40,HX_("setCharacterX",d1,96,46,f7));
            		}
HXLINE( 544)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_49, ::FunkinLua,_gthis) HXARGC(1)
            			Float _hx_run(::String type){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_545_new)
HXLINE( 545)				::String _hx_switch_6 = type.toLowerCase();
            				if (  (_hx_switch_6==HX_("dad",47,36,4c,00)) ){
HXLINE( 547)					return _gthis->lePlayState->DAD_Y;
HXDLIN( 547)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_6==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_6==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 549)					return _gthis->lePlayState->GF_Y;
HXDLIN( 549)					goto _hx_goto_10;
            				}
            				/* default */{
HXLINE( 551)					return _gthis->lePlayState->BF_Y;
            				}
            				_hx_goto_10:;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 544)			 cpp::Reference<lua_State> l41 = this->lua;
HXDLIN( 544)			::llua::Lua_helper_obj::callbacks->set(HX_("getCharacterY",c6,b4,40,b2), ::Dynamic(new _hx_Closure_49(_gthis)));
HXDLIN( 544)			linc::callbacks::add_callback_function(l41,HX_("getCharacterY",c6,b4,40,b2));
            		}
HXLINE( 554)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_53, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String type,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_555_new)
HXLINE( 555)				::String _hx_switch_7 = type.toLowerCase();
            				if (  (_hx_switch_7==HX_("dad",47,36,4c,00)) ){
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_51, ::FunkinLua,_gthis) HXARGC(1)
            					void _hx_run( ::Character _hx_char){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_559_new)
HXLINE( 559)						_hx_char->set_y((_gthis->lePlayState->DAD_Y + _hx_char->positionArray->__get(1)));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 557)					_gthis->lePlayState->DAD_Y = value;
HXLINE( 558)					_gthis->lePlayState->dadGroup->forEachAlive( ::Dynamic(new _hx_Closure_51(_gthis)),null());
HXLINE( 556)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_7==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_7==HX_("girlfriend",ba,91,48,98)) ){
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_52, ::FunkinLua,_gthis) HXARGC(1)
            					void _hx_run( ::Character _hx_char){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_564_new)
HXLINE( 564)						_hx_char->set_y((_gthis->lePlayState->GF_Y + _hx_char->positionArray->__get(1)));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 562)					_gthis->lePlayState->GF_Y = value;
HXLINE( 563)					_gthis->lePlayState->gfGroup->forEachAlive( ::Dynamic(new _hx_Closure_52(_gthis)),null());
HXLINE( 561)					goto _hx_goto_11;
            				}
            				/* default */{
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_50, ::FunkinLua,_gthis) HXARGC(1)
            					void _hx_run( ::Boyfriend _hx_char){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_569_new)
HXLINE( 569)						_hx_char->set_y((_gthis->lePlayState->BF_Y + _hx_char->positionArray->__get(1)));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 567)					_gthis->lePlayState->BF_Y = value;
HXLINE( 568)					_gthis->lePlayState->boyfriendGroup->forEachAlive( ::Dynamic(new _hx_Closure_50(_gthis)),null());
            				}
            				_hx_goto_11:;
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 554)			 cpp::Reference<lua_State> l42 = this->lua;
HXDLIN( 554)			::llua::Lua_helper_obj::callbacks->set(HX_("setCharacterY",d2,96,46,f7), ::Dynamic(new _hx_Closure_53(_gthis)));
HXDLIN( 554)			linc::callbacks::add_callback_function(l42,HX_("setCharacterY",d2,96,46,f7));
            		}
HXLINE( 573)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_54, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String target){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_573_new)
HXLINE( 574)				bool isDad = false;
HXLINE( 575)				if ((target == HX_("dad",47,36,4c,00))) {
HXLINE( 576)					isDad = true;
            				}
HXLINE( 578)				_gthis->lePlayState->moveCamera(isDad);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 573)			 cpp::Reference<lua_State> l43 = this->lua;
HXDLIN( 573)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraSetTarget",2e,85,21,cc), ::Dynamic(new _hx_Closure_54(_gthis)));
HXDLIN( 573)			linc::callbacks::add_callback_function(l43,HX_("cameraSetTarget",2e,85,21,cc));
            		}
HXLINE( 580)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_55, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_581_new)
HXLINE( 581)				_gthis->lePlayState->ratingPercent = value;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 580)			 cpp::Reference<lua_State> l44 = this->lua;
HXDLIN( 580)			::llua::Lua_helper_obj::callbacks->set(HX_("setRatingPercent",26,a3,29,ea), ::Dynamic(new _hx_Closure_55(_gthis)));
HXDLIN( 580)			linc::callbacks::add_callback_function(l44,HX_("setRatingPercent",26,a3,29,ea));
            		}
HXLINE( 583)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_56, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_584_new)
HXLINE( 584)				_gthis->lePlayState->ratingString = value;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 583)			 cpp::Reference<lua_State> l45 = this->lua;
HXDLIN( 583)			::llua::Lua_helper_obj::callbacks->set(HX_("setRatingString",90,17,92,75), ::Dynamic(new _hx_Closure_56(_gthis)));
HXDLIN( 583)			linc::callbacks::add_callback_function(l45,HX_("setRatingString",90,17,92,75));
            		}
HXLINE( 586)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_57, ::FunkinLua,_gthis) HXARGC(1)
            			Float _hx_run(::String camera){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_586_new)
HXLINE( 587)				 ::flixel::FlxCamera cam = _gthis->cameraFromString(camera);
HXLINE( 588)				return ::flixel::FlxG_obj::mouse->getScreenPosition(cam,null())->x;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 586)			 cpp::Reference<lua_State> l46 = this->lua;
HXDLIN( 586)			::llua::Lua_helper_obj::callbacks->set(HX_("getMouseX",c9,d3,64,48), ::Dynamic(new _hx_Closure_57(_gthis)));
HXDLIN( 586)			linc::callbacks::add_callback_function(l46,HX_("getMouseX",c9,d3,64,48));
            		}
HXLINE( 590)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_58, ::FunkinLua,_gthis) HXARGC(1)
            			Float _hx_run(::String camera){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_590_new)
HXLINE( 591)				 ::flixel::FlxCamera cam = _gthis->cameraFromString(camera);
HXLINE( 592)				return ::flixel::FlxG_obj::mouse->getScreenPosition(cam,null())->y;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 590)			 cpp::Reference<lua_State> l47 = this->lua;
HXDLIN( 590)			::llua::Lua_helper_obj::callbacks->set(HX_("getMouseY",ca,d3,64,48), ::Dynamic(new _hx_Closure_58(_gthis)));
HXDLIN( 590)			linc::callbacks::add_callback_function(l47,HX_("getMouseY",ca,d3,64,48));
            		}
HXLINE( 594)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_59, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String character,::String anim, ::Dynamic __o_forced){
            		 ::Dynamic forced = __o_forced;
            		if (::hx::IsNull(__o_forced)) forced = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_595_new)
HXLINE( 595)				::String _hx_switch_8 = character.toLowerCase();
            				if (  (_hx_switch_8==HX_("dad",47,36,4c,00)) ){
HXLINE( 597)					if (_gthis->lePlayState->dad->animOffsets->exists(anim)) {
HXLINE( 598)						_gthis->lePlayState->dad->playAnim(anim,forced,null(),null());
            					}
HXLINE( 597)					goto _hx_goto_12;
            				}
            				if (  (_hx_switch_8==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_8==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 600)					if (_gthis->lePlayState->gf->animOffsets->exists(anim)) {
HXLINE( 601)						_gthis->lePlayState->gf->playAnim(anim,forced,null(),null());
            					}
HXLINE( 600)					goto _hx_goto_12;
            				}
            				/* default */{
HXLINE( 603)					if (_gthis->lePlayState->boyfriend->animOffsets->exists(anim)) {
HXLINE( 604)						_gthis->lePlayState->boyfriend->playAnim(anim,forced,null(),null());
            					}
            				}
            				_hx_goto_12:;
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 594)			 cpp::Reference<lua_State> l48 = this->lua;
HXDLIN( 594)			::llua::Lua_helper_obj::callbacks->set(HX_("characterPlayAnim",ee,d2,39,cb), ::Dynamic(new _hx_Closure_59(_gthis)));
HXDLIN( 594)			linc::callbacks::add_callback_function(l48,HX_("characterPlayAnim",ee,d2,39,cb));
            		}
HXLINE( 607)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_60, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String character){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_608_new)
HXLINE( 608)				::String _hx_switch_9 = character.toLowerCase();
            				if (  (_hx_switch_9==HX_("dad",47,36,4c,00)) ){
HXLINE( 609)					_gthis->lePlayState->dad->dance();
HXDLIN( 609)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_9==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_9==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 610)					_gthis->lePlayState->gf->dance();
HXDLIN( 610)					goto _hx_goto_13;
            				}
            				/* default */{
HXLINE( 611)					_gthis->lePlayState->boyfriend->dance();
            				}
            				_hx_goto_13:;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 607)			 cpp::Reference<lua_State> l49 = this->lua;
HXDLIN( 607)			::llua::Lua_helper_obj::callbacks->set(HX_("characterDance",ca,32,95,aa), ::Dynamic(new _hx_Closure_60(_gthis)));
HXDLIN( 607)			linc::callbacks::add_callback_function(l49,HX_("characterDance",ca,32,95,aa));
            		}
HXLINE( 615)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_61, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String tag,::String image,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_615_new)
HXLINE( 616)				_gthis->resetSpriteTag(tag);
HXLINE( 617)				 ::ModchartSprite leSprite =  ::ModchartSprite_obj::__alloc( HX_CTX ,x,y,null());
HXLINE( 618)				bool _hx_tmp;
HXDLIN( 618)				if (::hx::IsNotNull( image )) {
HXLINE( 618)					_hx_tmp = (image.length > 0);
            				}
            				else {
HXLINE( 618)					_hx_tmp = false;
            				}
HXDLIN( 618)				if (_hx_tmp) {
HXLINE( 619)					::String library = null();
HXDLIN( 619)					 ::flixel::graphics::FlxGraphic imageToReturn = ::Paths_obj::addCustomGraphic(image);
HXDLIN( 619)					 ::Dynamic _hx_tmp;
HXDLIN( 619)					if (::hx::IsNotNull( imageToReturn )) {
HXLINE( 619)						_hx_tmp = imageToReturn;
            					}
            					else {
HXLINE( 619)						_hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + image) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
            					}
HXDLIN( 619)					leSprite->loadGraphic(_hx_tmp,null(),null(),null(),null(),null());
            				}
HXLINE( 621)				leSprite->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 622)				_gthis->lePlayState->modchartSprites->set(tag,leSprite);
HXLINE( 623)				leSprite->set_active(false);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 615)			 cpp::Reference<lua_State> l50 = this->lua;
HXDLIN( 615)			::llua::Lua_helper_obj::callbacks->set(HX_("makeLuaSprite",0f,bc,5b,d4), ::Dynamic(new _hx_Closure_61(_gthis)));
HXDLIN( 615)			linc::callbacks::add_callback_function(l50,HX_("makeLuaSprite",0f,bc,5b,d4));
            		}
HXLINE( 625)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_62, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String tag,int width,int height,::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_626_new)
HXLINE( 626)				if (_gthis->lePlayState->modchartSprites->exists(tag)) {
HXLINE( 627)					int colorNum = ( (int)(::Std_obj::parseInt(color)) );
HXLINE( 628)					if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE( 628)						colorNum = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            					}
HXLINE( 630)					( ( ::flixel::FlxSprite)(_gthis->lePlayState->modchartSprites->get(tag)) )->makeGraphic(width,height,colorNum,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 625)			 cpp::Reference<lua_State> l51 = this->lua;
HXDLIN( 625)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpriteMakeGraphic",7d,d9,93,6c), ::Dynamic(new _hx_Closure_62(_gthis)));
HXDLIN( 625)			linc::callbacks::add_callback_function(l51,HX_("luaSpriteMakeGraphic",7d,d9,93,6c));
            		}
HXLINE( 633)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_63, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String tag,::String image,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_633_new)
HXLINE( 634)				_gthis->resetSpriteTag(tag);
HXLINE( 635)				 ::ModchartSprite leSprite =  ::ModchartSprite_obj::__alloc( HX_CTX ,x,y,null());
HXLINE( 636)				::String library = null();
HXDLIN( 636)				 ::flixel::graphics::FlxGraphic imageLoaded = ::Paths_obj::addCustomGraphic(image);
HXDLIN( 636)				bool xmlExists = false;
HXDLIN( 636)				if (::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + ((HX_("images/",77,50,74,c1) + image) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 636)					xmlExists = true;
            				}
HXDLIN( 636)				 ::Dynamic _hx_tmp;
HXDLIN( 636)				if (::hx::IsNotNull( imageLoaded )) {
HXLINE( 636)					_hx_tmp = imageLoaded;
            				}
            				else {
HXLINE( 636)					 ::flixel::graphics::FlxGraphic imageToReturn = ::Paths_obj::addCustomGraphic(image);
HXDLIN( 636)					if (::hx::IsNotNull( imageToReturn )) {
HXLINE( 636)						_hx_tmp = imageToReturn;
            					}
            					else {
HXLINE( 636)						_hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + image) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
            					}
            				}
HXDLIN( 636)				::String _hx_tmp1;
HXDLIN( 636)				if (xmlExists) {
HXLINE( 636)					_hx_tmp1 = ::sys::io::File_obj::getContent((HX_("mods/",9e,2f,58,0c) + ((HX_("images/",77,50,74,c1) + image) + HX_(".xml",69,3e,c3,1e))));
            				}
            				else {
HXLINE( 636)					_hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + image) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library);
            				}
HXDLIN( 636)				leSprite->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,_hx_tmp1));
HXLINE( 637)				leSprite->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 638)				_gthis->lePlayState->modchartSprites->set(tag,leSprite);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 633)			 cpp::Reference<lua_State> l52 = this->lua;
HXDLIN( 633)			::llua::Lua_helper_obj::callbacks->set(HX_("makeAnimatedLuaSprite",ec,be,a6,d0), ::Dynamic(new _hx_Closure_63(_gthis)));
HXDLIN( 633)			linc::callbacks::add_callback_function(l52,HX_("makeAnimatedLuaSprite",ec,be,a6,d0));
            		}
HXLINE( 641)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_64, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String name,::String prefix, ::Dynamic __o_framerate, ::Dynamic __o_loop){
            		int framerate = __o_framerate.Default(24);
            		bool loop = __o_loop.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_642_new)
HXLINE( 642)				if (_gthis->lePlayState->modchartSprites->exists(tag)) {
HXLINE( 643)					 ::ModchartSprite cock = ( ( ::ModchartSprite)(_gthis->lePlayState->modchartSprites->get(tag)) );
HXLINE( 644)					cock->animation->addByPrefix(name,prefix,framerate,loop,null(),null());
HXLINE( 645)					if (::hx::IsNull( cock->animation->_curAnim )) {
HXLINE( 646)						cock->animation->play(name,true,null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 641)			 cpp::Reference<lua_State> l53 = this->lua;
HXDLIN( 641)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpriteAddAnimationByPrefix",09,f3,e9,6f), ::Dynamic(new _hx_Closure_64(_gthis)));
HXDLIN( 641)			linc::callbacks::add_callback_function(l53,HX_("luaSpriteAddAnimationByPrefix",09,f3,e9,6f));
            		}
HXLINE( 650)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_65, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String name,::String prefix,::String indices, ::Dynamic __o_framerate){
            		int framerate = __o_framerate.Default(24);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_651_new)
HXLINE( 651)				if (_gthis->lePlayState->modchartSprites->exists(tag)) {
HXLINE( 652)					::Array< ::String > strIndices = ::StringTools_obj::trim(indices).split(HX_(",",2c,00,00,00));
HXLINE( 653)					::Array< int > die = ::Array_obj< int >::__new(0);
HXLINE( 654)					{
HXLINE( 654)						int _g = 0;
HXDLIN( 654)						int _g1 = strIndices->length;
HXDLIN( 654)						while((_g < _g1)){
HXLINE( 654)							_g = (_g + 1);
HXDLIN( 654)							int i = (_g - 1);
HXLINE( 655)							die->push(::Std_obj::parseInt(strIndices->__get(i)));
            						}
            					}
HXLINE( 657)					 ::ModchartSprite pussy = ( ( ::ModchartSprite)(_gthis->lePlayState->modchartSprites->get(tag)) );
HXLINE( 658)					pussy->animation->addByIndices(name,prefix,die,HX_("",00,00,00,00),framerate,false,null(),null());
HXLINE( 659)					if (::hx::IsNull( pussy->animation->_curAnim )) {
HXLINE( 660)						pussy->animation->play(name,true,null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 650)			 cpp::Reference<lua_State> l54 = this->lua;
HXDLIN( 650)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpriteAddAnimationByIndices",d0,75,d7,2e), ::Dynamic(new _hx_Closure_65(_gthis)));
HXDLIN( 650)			linc::callbacks::add_callback_function(l54,HX_("luaSpriteAddAnimationByIndices",d0,75,d7,2e));
            		}
HXLINE( 664)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_66, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,::String name, ::Dynamic __o_forced){
            		bool forced = __o_forced.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_665_new)
HXLINE( 665)				if (_gthis->lePlayState->modchartSprites->exists(tag)) {
HXLINE( 666)					( ( ::flixel::FlxSprite)(_gthis->lePlayState->modchartSprites->get(tag)) )->animation->play(name,forced,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 664)			 cpp::Reference<lua_State> l55 = this->lua;
HXDLIN( 664)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpritePlayAnimation",53,e8,9a,80), ::Dynamic(new _hx_Closure_66(_gthis)));
HXDLIN( 664)			linc::callbacks::add_callback_function(l55,HX_("luaSpritePlayAnimation",53,e8,9a,80));
            		}
HXLINE( 670)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_67, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,Float scrollX,Float scrollY){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_671_new)
HXLINE( 671)				if (_gthis->lePlayState->modchartSprites->exists(tag)) {
HXLINE( 672)					( ( ::flixel::FlxObject)(_gthis->lePlayState->modchartSprites->get(tag)) )->scrollFactor->set(scrollX,scrollY);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 670)			 cpp::Reference<lua_State> l56 = this->lua;
HXDLIN( 670)			::llua::Lua_helper_obj::callbacks->set(HX_("setLuaSpriteScrollFactor",37,99,c8,2a), ::Dynamic(new _hx_Closure_67(_gthis)));
HXDLIN( 670)			linc::callbacks::add_callback_function(l56,HX_("setLuaSpriteScrollFactor",37,99,c8,2a));
            		}
HXLINE( 675)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_68, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String tag, ::Dynamic __o_front){
            		bool front = __o_front.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_676_new)
HXLINE( 676)				if (_gthis->lePlayState->modchartSprites->exists(tag)) {
HXLINE( 677)					 ::ModchartSprite shit = ( ( ::ModchartSprite)(_gthis->lePlayState->modchartSprites->get(tag)) );
HXLINE( 678)					if (!(shit->wasAdded)) {
HXLINE( 679)						if (front) {
HXLINE( 680)							_gthis->lePlayState->foregroundGroup->add(shit).StaticCast<  ::flixel::FlxSprite >();
            						}
            						else {
HXLINE( 682)							_gthis->lePlayState->backgroundGroup->add(shit).StaticCast<  ::flixel::FlxSprite >();
            						}
HXLINE( 684)						shit->isInFront = front;
HXLINE( 685)						shit->wasAdded = true;
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 675)			 cpp::Reference<lua_State> l57 = this->lua;
HXDLIN( 675)			::llua::Lua_helper_obj::callbacks->set(HX_("addLuaSprite",7c,e5,06,db), ::Dynamic(new _hx_Closure_68(_gthis)));
HXDLIN( 675)			linc::callbacks::add_callback_function(l57,HX_("addLuaSprite",7c,e5,06,db));
            		}
HXLINE( 689)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_69, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_690_new)
HXLINE( 690)				if (_gthis->lePlayState->modchartSprites->exists(tag)) {
HXLINE( 691)					 ::ModchartSprite shit = ( ( ::ModchartSprite)(_gthis->lePlayState->modchartSprites->get(tag)) );
HXLINE( 692)					shit->scale->set(x,y);
HXLINE( 693)					shit->updateHitbox();
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 689)			 cpp::Reference<lua_State> l58 = this->lua;
HXDLIN( 689)			::llua::Lua_helper_obj::callbacks->set(HX_("scaleLuaSprite",f3,b3,91,0f), ::Dynamic(new _hx_Closure_69(_gthis)));
HXDLIN( 689)			linc::callbacks::add_callback_function(l58,HX_("scaleLuaSprite",f3,b3,91,0f));
            		}
HXLINE( 696)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_70, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_697_new)
HXLINE( 697)				_gthis->resetSpriteTag(tag);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 696)			 cpp::Reference<lua_State> l59 = this->lua;
HXDLIN( 696)			::llua::Lua_helper_obj::callbacks->set(HX_("removeLuaSprite",f9,5e,d1,1c), ::Dynamic(new _hx_Closure_70(_gthis)));
HXDLIN( 696)			linc::callbacks::add_callback_function(l59,HX_("removeLuaSprite",f9,5e,d1,1c));
            		}
HXLINE( 700)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_71, ::FunkinLua,_gthis) HXARGC(2)
            			 ::Dynamic _hx_run(::String tag,::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_700_new)
HXLINE( 701)				if (_gthis->lePlayState->modchartSprites->exists(tag)) {
HXLINE( 702)					::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE( 703)					if ((killMe->length > 1)) {
HXLINE( 704)						 ::ModchartSprite coverMeInPiss = ( ( ::ModchartSprite)(_gthis->lePlayState->modchartSprites->get(tag)) );
HXDLIN( 704)						 ::Dynamic coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(0));
HXLINE( 705)						{
HXLINE( 705)							int _g = 1;
HXDLIN( 705)							int _g1 = (killMe->length - 1);
HXDLIN( 705)							while((_g < _g1)){
HXLINE( 705)								_g = (_g + 1);
HXDLIN( 705)								int i = (_g - 1);
HXLINE( 706)								coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(i));
            							}
            						}
HXLINE( 708)						return ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get((killMe->length - 1)));
            					}
HXLINE( 710)					return ::Reflect_obj::getProperty(_gthis->lePlayState->modchartSprites->get(tag),variable);
            				}
HXLINE( 712)				_gthis->luaTrace(((HX_("Lua sprite with tag: ",99,05,27,20) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
HXLINE( 713)				return null();
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 700)			 cpp::Reference<lua_State> l60 = this->lua;
HXDLIN( 700)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyLuaSprite",52,5f,33,7c), ::Dynamic(new _hx_Closure_71(_gthis)));
HXDLIN( 700)			linc::callbacks::add_callback_function(l60,HX_("getPropertyLuaSprite",52,5f,33,7c));
            		}
HXLINE( 715)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_72, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,::String variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_715_new)
HXLINE( 716)				if (_gthis->lePlayState->modchartSprites->exists(tag)) {
HXLINE( 717)					::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE( 718)					if ((killMe->length > 1)) {
HXLINE( 719)						 ::ModchartSprite coverMeInPiss = ( ( ::ModchartSprite)(_gthis->lePlayState->modchartSprites->get(tag)) );
HXDLIN( 719)						 ::Dynamic coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(0));
HXLINE( 720)						{
HXLINE( 720)							int _g = 1;
HXDLIN( 720)							int _g1 = (killMe->length - 1);
HXDLIN( 720)							while((_g < _g1)){
HXLINE( 720)								_g = (_g + 1);
HXDLIN( 720)								int i = (_g - 1);
HXLINE( 721)								coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(i));
            							}
            						}
HXLINE( 723)						::Reflect_obj::setProperty(coverMeInPiss1,killMe->__get((killMe->length - 1)),value);
HXDLIN( 723)						return;
            					}
HXLINE( 725)					::Reflect_obj::setProperty(_gthis->lePlayState->modchartSprites->get(tag),variable,value);
HXDLIN( 725)					return;
            				}
HXLINE( 727)				_gthis->luaTrace(((HX_("Lua sprite with tag: ",99,05,27,20) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 715)			 cpp::Reference<lua_State> l61 = this->lua;
HXDLIN( 715)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyLuaSprite",c6,16,eb,48), ::Dynamic(new _hx_Closure_72(_gthis)));
HXDLIN( 715)			linc::callbacks::add_callback_function(l61,HX_("setPropertyLuaSprite",c6,16,eb,48));
            		}
HXLINE( 729)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_73, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String tag,::String __o_camera){
            		::String camera = __o_camera;
            		if (::hx::IsNull(__o_camera)) camera = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_729_new)
HXLINE( 730)				if (_gthis->lePlayState->modchartSprites->exists(tag)) {
HXLINE( 731)					 ::ModchartSprite _hx_tmp = ( ( ::ModchartSprite)(_gthis->lePlayState->modchartSprites->get(tag)) );
HXDLIN( 731)					_hx_tmp->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->cameraFromString(camera)));
HXLINE( 732)					return true;
            				}
HXLINE( 734)				_gthis->luaTrace(((HX_("Lua sprite with tag: ",99,05,27,20) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null());
HXLINE( 735)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 729)			 cpp::Reference<lua_State> l62 = this->lua;
HXDLIN( 729)			::llua::Lua_helper_obj::callbacks->set(HX_("setLuaSpriteCamera",e0,14,44,e8), ::Dynamic(new _hx_Closure_73(_gthis)));
HXDLIN( 729)			linc::callbacks::add_callback_function(l62,HX_("setLuaSpriteCamera",e0,14,44,e8));
            		}
HXLINE( 737)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_74, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String dialogueFile,::String music){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_737_new)
HXLINE( 738)				::String path = (HX_("mods/",9e,2f,58,0c) + ((HX_("data/",c5,0e,88,d4) + ((::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)) + HX_("/",2f,00,00,00)) + dialogueFile)) + HX_(".json",56,f1,d6,c2)));
HXLINE( 739)				_gthis->luaTrace((HX_("Trying to load dialogue: ",ac,f6,02,c7) + path),null(),null());
HXLINE( 741)				if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 742)					 ::Dynamic shit = ::DialogueBoxPsych_obj::parseDialogue(path);
HXLINE( 743)					if ((( (::Array< ::Dynamic>)(shit->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic)) )->length > 0)) {
HXLINE( 744)						_gthis->lePlayState->startDialogue(shit,music);
HXLINE( 745)						_gthis->luaTrace(HX_("Successfully loaded dialogue",fa,15,11,36),null(),null());
            					}
            					else {
HXLINE( 747)						_gthis->luaTrace(HX_("Your dialogue file is badly formatted!",40,79,c5,b3),null(),null());
            					}
            				}
            				else {
HXLINE( 750)					_gthis->luaTrace(HX_("Dialogue file not found",b9,62,f0,9e),null(),null());
HXLINE( 751)					_gthis->lePlayState->startCountdown();
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 737)			 cpp::Reference<lua_State> l63 = this->lua;
HXDLIN( 737)			::llua::Lua_helper_obj::callbacks->set(HX_("startDialogue",9a,8f,4f,ac), ::Dynamic(new _hx_Closure_74(_gthis)));
HXDLIN( 737)			linc::callbacks::add_callback_function(l63,HX_("startDialogue",9a,8f,4f,ac));
            		}
HXLINE( 754)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_75, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String videoFile){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_756_new)
HXLINE( 756)				if (::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + (((HX_("videos/",97,cd,86,fd) + videoFile) + HX_(".",2e,00,00,00)) + HX_("mp4",71,17,53,00))))) {
HXLINE( 757)					_gthis->lePlayState->videoIntro(videoFile);
            				}
            				else {
HXLINE( 759)					_gthis->luaTrace((HX_("Video file not found: ",1c,23,e1,12) + videoFile),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 754)			 cpp::Reference<lua_State> l64 = this->lua;
HXDLIN( 754)			::llua::Lua_helper_obj::callbacks->set(HX_("startVideo",b9,ec,12,53), ::Dynamic(new _hx_Closure_75(_gthis)));
HXDLIN( 754)			linc::callbacks::add_callback_function(l64,HX_("startVideo",b9,ec,12,53));
            		}
HXLINE( 766)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_76) HXARGC(3)
            			void _hx_run(Float duration, ::Dynamic __o_fromValue, ::Dynamic __o_toValue){
            		Float fromValue = __o_fromValue.Default(0);
            		Float toValue = __o_toValue.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_767_new)
HXLINE( 767)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 767)				 ::Dynamic onComplete = null();
HXDLIN( 767)				if (::hx::IsNull( _this->_channel )) {
HXLINE( 767)					_this->play(null(),null(),null());
            				}
HXDLIN( 767)				if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 767)					_this->fadeTween->cancel();
            				}
HXDLIN( 767)				_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(fromValue,toValue,duration, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 766)			 cpp::Reference<lua_State> l65 = this->lua;
HXDLIN( 766)			::llua::Lua_helper_obj::callbacks->set(HX_("musicFadeIn",06,1b,ec,26), ::Dynamic(new _hx_Closure_76()));
HXDLIN( 766)			linc::callbacks::add_callback_function(l65,HX_("musicFadeIn",06,1b,ec,26));
            		}
HXLINE( 769)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_77) HXARGC(2)
            			void _hx_run(Float duration, ::Dynamic __o_toValue){
            		Float toValue = __o_toValue.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_770_new)
HXLINE( 770)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 770)				 ::Dynamic To = toValue;
HXDLIN( 770)				 ::Dynamic onComplete = null();
HXDLIN( 770)				if (::hx::IsNull( To )) {
HXLINE( 770)					To = 0;
            				}
HXDLIN( 770)				if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 770)					_this->fadeTween->cancel();
            				}
HXDLIN( 770)				_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),duration, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 769)			 cpp::Reference<lua_State> l66 = this->lua;
HXDLIN( 769)			::llua::Lua_helper_obj::callbacks->set(HX_("musicFadeOut",4d,1e,b0,e7), ::Dynamic(new _hx_Closure_77()));
HXDLIN( 769)			linc::callbacks::add_callback_function(l66,HX_("musicFadeOut",4d,1e,b0,e7));
            		}
HXLINE( 773)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_78, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String text){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_774_new)
HXLINE( 774)				_gthis->luaTrace(text,true,false);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 773)			 cpp::Reference<lua_State> l67 = this->lua;
HXDLIN( 773)			::llua::Lua_helper_obj::callbacks->set(HX_("debugPrint",da,28,6f,c7), ::Dynamic(new _hx_Closure_78(_gthis)));
HXDLIN( 773)			linc::callbacks::add_callback_function(l67,HX_("debugPrint",da,28,6f,c7));
            		}
HXLINE( 776)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_80, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(bool printMessage){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_776_new)
HXLINE( 777)				if (!(_gthis->gonnaClose)) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_79, ::FunkinLua,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_782_new)
HXLINE( 782)						_gthis->stop();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 778)					if (printMessage) {
HXLINE( 779)						_gthis->luaTrace((HX_("Stopping lua script in 100ms: ",43,1f,5d,95) + _gthis->scriptName),null(),null());
            					}
HXLINE( 781)					 ::flixel::util::FlxTimer leTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_79(_gthis)),null());
            				}
HXLINE( 785)				_gthis->gonnaClose = true;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 776)			 cpp::Reference<lua_State> l68 = this->lua;
HXDLIN( 776)			::llua::Lua_helper_obj::callbacks->set(HX_("close",b8,17,63,48), ::Dynamic(new _hx_Closure_80(_gthis)));
HXDLIN( 776)			linc::callbacks::add_callback_function(l68,HX_("close",b8,17,63,48));
            		}
HXLINE( 787)		this->call(HX_("onCreate",7b,5d,bc,5b),::cpp::VirtualArray_obj::__new(0));
            	}

Dynamic FunkinLua_obj::__CreateEmpty() { return new FunkinLua_obj; }

void *FunkinLua_obj::_hx_vtable = 0;

Dynamic FunkinLua_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FunkinLua_obj > _hx_result = new FunkinLua_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FunkinLua_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x574d0d5f;
}

void FunkinLua_obj::resetSpriteTag(::String tag){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_791_resetSpriteTag)
HXLINE( 792)		if (!(this->lePlayState->modchartSprites->exists(tag))) {
HXLINE( 793)			return;
            		}
HXLINE( 796)		 ::ModchartSprite pee = ( ( ::ModchartSprite)(this->lePlayState->modchartSprites->get(tag)) );
HXLINE( 797)		pee->kill();
HXLINE( 798)		if (pee->wasAdded) {
HXLINE( 799)			if (pee->isInFront) {
HXLINE( 800)				this->lePlayState->foregroundGroup->remove(pee,true).StaticCast<  ::flixel::FlxSprite >();
            			}
            			else {
HXLINE( 802)				this->lePlayState->backgroundGroup->remove(pee,true).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE( 805)		pee->destroy();
HXLINE( 806)		this->lePlayState->modchartSprites->remove(tag);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,resetSpriteTag,(void))

void FunkinLua_obj::cancelTween(::String tag){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_810_cancelTween)
HXDLIN( 810)		if (this->lePlayState->modchartTweens->exists(tag)) {
HXLINE( 811)			( ( ::flixel::tweens::FlxTween)(this->lePlayState->modchartTweens->get(tag)) )->cancel();
HXLINE( 812)			( ( ::flixel::tweens::FlxTween)(this->lePlayState->modchartTweens->get(tag)) )->destroy();
HXLINE( 813)			this->lePlayState->modchartTweens->remove(tag);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,cancelTween,(void))

 ::Dynamic FunkinLua_obj::tweenShit(::String tag,::String vars){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_817_tweenShit)
HXLINE( 818)		this->cancelTween(tag);
HXLINE( 819)		::Array< ::String > variables = ::StringTools_obj::replace(vars,HX_(" ",20,00,00,00),HX_("",00,00,00,00)).split(HX_(".",2e,00,00,00));
HXLINE( 820)		 ::Dynamic sexyProp = ::Reflect_obj::getProperty(this->lePlayState,variables->__get(0));
HXLINE( 821)		bool _hx_tmp;
HXDLIN( 821)		if (::hx::IsNull( sexyProp )) {
HXLINE( 821)			_hx_tmp = this->lePlayState->modchartSprites->exists(variables->__get(0));
            		}
            		else {
HXLINE( 821)			_hx_tmp = false;
            		}
HXDLIN( 821)		if (_hx_tmp) {
HXLINE( 822)			sexyProp = this->lePlayState->modchartSprites->get(variables->__get(0));
            		}
HXLINE( 825)		{
HXLINE( 825)			int _g = 1;
HXDLIN( 825)			int _g1 = variables->length;
HXDLIN( 825)			while((_g < _g1)){
HXLINE( 825)				_g = (_g + 1);
HXDLIN( 825)				int i = (_g - 1);
HXLINE( 826)				sexyProp = ::Reflect_obj::getProperty(sexyProp,variables->__get(i));
            			}
            		}
HXLINE( 828)		return sexyProp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,tweenShit,return )

void FunkinLua_obj::cancelTimer(::String tag){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_832_cancelTimer)
HXDLIN( 832)		if (this->lePlayState->modchartTimers->exists(tag)) {
HXLINE( 833)			 ::flixel::util::FlxTimer theTimer = ( ( ::flixel::util::FlxTimer)(this->lePlayState->modchartTimers->get(tag)) );
HXLINE( 834)			theTimer->cancel();
HXLINE( 835)			theTimer->destroy();
HXLINE( 836)			this->lePlayState->modchartTimers->remove(tag);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,cancelTimer,(void))

 ::Dynamic FunkinLua_obj::getFlxEaseByString(::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_841_getFlxEaseByString)
HXLINE( 842)		::String _hx_switch_0 = ease.toLowerCase();
            		if (  (_hx_switch_0==HX_("backin",cc,4d,99,4a)) ){
HXLINE( 843)			return ::flixel::tweens::FlxEase_obj::backIn_dyn();
HXDLIN( 843)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("backinout",42,fa,a0,07)) ){
HXLINE( 844)			return ::flixel::tweens::FlxEase_obj::backInOut_dyn();
HXDLIN( 844)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("backout",c7,58,8f,fb)) ){
HXLINE( 845)			return ::flixel::tweens::FlxEase_obj::backOut_dyn();
HXDLIN( 845)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("bouncein",6d,53,b0,4c)) ){
HXLINE( 846)			return ::flixel::tweens::FlxEase_obj::bounceIn_dyn();
HXDLIN( 846)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("bounceinout",41,6f,66,e6)) ){
HXLINE( 847)			return ::flixel::tweens::FlxEase_obj::bounceInOut_dyn();
HXDLIN( 847)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("bounceout",06,40,9d,cd)) ){
HXLINE( 848)			return ::flixel::tweens::FlxEase_obj::bounceOut_dyn();
HXDLIN( 848)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("circin",7c,6f,0d,56)) ){
HXLINE( 849)			return ::flixel::tweens::FlxEase_obj::circIn_dyn();
HXDLIN( 849)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("circinout",92,06,0d,e1)) ){
HXLINE( 850)			return ::flixel::tweens::FlxEase_obj::circInOut_dyn();
HXDLIN( 850)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("circout",17,b1,b8,f5)) ){
HXLINE( 851)			return ::flixel::tweens::FlxEase_obj::circOut_dyn();
HXDLIN( 851)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("cubein",1a,80,4a,34)) ){
HXLINE( 852)			return ::flixel::tweens::FlxEase_obj::cubeIn_dyn();
HXDLIN( 852)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("cubeinout",b4,ac,c9,c2)) ){
HXLINE( 853)			return ::flixel::tweens::FlxEase_obj::cubeInOut_dyn();
HXDLIN( 853)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("cubeout",b9,2a,ea,8c)) ){
HXLINE( 854)			return ::flixel::tweens::FlxEase_obj::cubeOut_dyn();
HXDLIN( 854)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("elasticin",fa,3c,61,27)) ){
HXLINE( 855)			return ::flixel::tweens::FlxEase_obj::elasticIn_dyn();
HXDLIN( 855)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("elasticinout",d4,3b,a0,39)) ){
HXLINE( 856)			return ::flixel::tweens::FlxEase_obj::elasticInOut_dyn();
HXDLIN( 856)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("elasticout",d9,b1,b8,4d)) ){
HXLINE( 857)			return ::flixel::tweens::FlxEase_obj::elasticOut_dyn();
HXDLIN( 857)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("expoin",97,89,7d,c4)) ){
HXLINE( 858)			return ::flixel::tweens::FlxEase_obj::expoIn_dyn();
HXDLIN( 858)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("expoinout",57,ef,01,5a)) ){
HXLINE( 859)			return ::flixel::tweens::FlxEase_obj::expoInOut_dyn();
HXDLIN( 859)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("expoout",9c,6e,5f,29)) ){
HXLINE( 860)			return ::flixel::tweens::FlxEase_obj::expoOut_dyn();
HXDLIN( 860)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("quadin",6c,94,9f,cc)) ){
HXLINE( 861)			return ::flixel::tweens::FlxEase_obj::quadIn_dyn();
HXDLIN( 861)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("quadinout",a2,97,0c,bc)) ){
HXLINE( 862)			return ::flixel::tweens::FlxEase_obj::quadInOut_dyn();
HXDLIN( 862)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("quadout",27,de,06,3f)) ){
HXLINE( 863)			return ::flixel::tweens::FlxEase_obj::quadOut_dyn();
HXDLIN( 863)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("quartin",a4,9b,4b,48)) ){
HXLINE( 864)			return ::flixel::tweens::FlxEase_obj::quartIn_dyn();
HXDLIN( 864)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("quartinout",6a,e3,62,99)) ){
HXLINE( 865)			return ::flixel::tweens::FlxEase_obj::quartInOut_dyn();
HXDLIN( 865)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("quartout",ef,27,e1,f9)) ){
HXLINE( 866)			return ::flixel::tweens::FlxEase_obj::quartOut_dyn();
HXDLIN( 866)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("quintin",30,65,db,e0)) ){
HXLINE( 867)			return ::flixel::tweens::FlxEase_obj::quintIn_dyn();
HXDLIN( 867)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("quintinout",5e,99,a0,bc)) ){
HXLINE( 868)			return ::flixel::tweens::FlxEase_obj::quintInOut_dyn();
HXDLIN( 868)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("quintout",e3,b8,21,df)) ){
HXLINE( 869)			return ::flixel::tweens::FlxEase_obj::quintOut_dyn();
HXDLIN( 869)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("sinein",72,df,1f,b9)) ){
HXLINE( 870)			return ::flixel::tweens::FlxEase_obj::sineIn_dyn();
HXDLIN( 870)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("sineinout",5c,74,84,36)) ){
HXLINE( 871)			return ::flixel::tweens::FlxEase_obj::sineInOut_dyn();
HXDLIN( 871)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("sineout",61,38,c8,42)) ){
HXLINE( 872)			return ::flixel::tweens::FlxEase_obj::sineOut_dyn();
HXDLIN( 872)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepin",8c,7c,27,7b)) ){
HXLINE( 876)			return ::flixel::tweens::FlxEase_obj::smootherStepIn_dyn();
HXDLIN( 876)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepinout",82,83,8c,0a)) ){
HXLINE( 877)			return ::flixel::tweens::FlxEase_obj::smootherStepInOut_dyn();
HXDLIN( 877)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepout",07,12,6a,47)) ){
HXLINE( 878)			return ::flixel::tweens::FlxEase_obj::smootherStepOut_dyn();
HXDLIN( 878)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepin",df,0c,da,16)) ){
HXLINE( 873)			return ::flixel::tweens::FlxEase_obj::smoothStepIn_dyn();
HXDLIN( 873)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepinout",0f,a9,b0,af)) ){
HXLINE( 874)			return ::flixel::tweens::FlxEase_obj::smoothStepInOut_dyn();
HXDLIN( 874)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepout",54,ca,f5,e7)) ){
HXLINE( 875)			return ::flixel::tweens::FlxEase_obj::smoothStepInOut_dyn();
HXDLIN( 875)			goto _hx_goto_104;
            		}
            		_hx_goto_104:;
HXLINE( 880)		return ::flixel::tweens::FlxEase_obj::linear_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getFlxEaseByString,return )

 ::flixel::FlxCamera FunkinLua_obj::cameraFromString(::String cam){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_883_cameraFromString)
HXLINE( 884)		::String _hx_switch_0 = cam.toLowerCase();
            		if (  (_hx_switch_0==HX_("camhud",08,90,8e,b7)) ||  (_hx_switch_0==HX_("hud",b7,50,4f,00)) ){
HXLINE( 885)			return this->lePlayState->camHUD;
HXDLIN( 885)			goto _hx_goto_106;
            		}
            		if (  (_hx_switch_0==HX_("camother",61,dc,80,ab)) ||  (_hx_switch_0==HX_("other",d0,66,76,36)) ){
HXLINE( 886)			return this->lePlayState->camOther;
HXDLIN( 886)			goto _hx_goto_106;
            		}
            		_hx_goto_106:;
HXLINE( 888)		return this->lePlayState->camGame;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,cameraFromString,return )

void FunkinLua_obj::luaTrace(::String text,::hx::Null< bool >  __o_ignoreCheck,::hx::Null< bool >  __o_deprecated){
            		bool ignoreCheck = __o_ignoreCheck.Default(false);
            		bool deprecated = __o_deprecated.Default(false);
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_893_luaTrace)
HXDLIN( 893)		bool _hx_tmp;
HXDLIN( 893)		if (!(ignoreCheck)) {
HXDLIN( 893)			_hx_tmp = this->getBool(HX_("luaDebugMode",7e,06,20,4c));
            		}
            		else {
HXDLIN( 893)			_hx_tmp = true;
            		}
HXDLIN( 893)		if (_hx_tmp) {
HXLINE( 894)			bool _hx_tmp;
HXDLIN( 894)			if (deprecated) {
HXLINE( 894)				_hx_tmp = !(this->getBool(HX_("luaDeprecatedWarnings",02,69,36,70)));
            			}
            			else {
HXLINE( 894)				_hx_tmp = false;
            			}
HXDLIN( 894)			if (_hx_tmp) {
HXLINE( 895)				return;
            			}
HXLINE( 897)			this->lePlayState->addTextToDebug(text);
HXLINE( 898)			::haxe::Log_obj::trace(text,::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),898,HX_("FunkinLua",e7,f3,7b,36),HX_("luaTrace",ad,69,82,94)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FunkinLua_obj,luaTrace,(void))

 ::Dynamic FunkinLua_obj::call(::String event,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_903_call)
HXLINE( 905)		if (::hx::IsNull( this->lua )) {
HXLINE( 906)			return ::FunkinLua_obj::Function_Continue;
            		}
HXLINE( 909)		lua_getglobal(this->lua,event);
HXLINE( 911)		{
HXLINE( 911)			int _g = 0;
HXDLIN( 911)			while((_g < args->get_length())){
HXLINE( 911)				 ::Dynamic arg = args->__get(_g);
HXDLIN( 911)				_g = (_g + 1);
HXLINE( 912)				::llua::Convert_obj::toLua(this->lua,arg);
            			}
            		}
HXLINE( 915)		 ::Dynamic result = lua_pcall(this->lua,args->get_length(),1,0);
HXLINE( 916)		bool _hx_tmp;
HXDLIN( 916)		if (::hx::IsNotNull( result )) {
HXLINE( 916)			_hx_tmp = this->resultIsAllowed(this->lua,result);
            		}
            		else {
HXLINE( 916)			_hx_tmp = false;
            		}
HXDLIN( 916)		if (_hx_tmp) {
HXLINE( 920)			if ((lua_type(this->lua,-1) == 4)) {
HXLINE( 921)				::String error = linc::lua::tostring(this->lua,-1);
HXLINE( 922)				if ((error == HX_("attempt to call a nil value",93,04,85,54))) {
HXLINE( 923)					return ::FunkinLua_obj::Function_Continue;
            				}
            			}
HXLINE( 926)			 cpp::Reference<lua_State> l = this->lua;
HXDLIN( 926)			int v = ( (int)(result) );
HXDLIN( 926)			 ::Dynamic ret = null();
HXDLIN( 926)			switch((int)(lua_type(l,v))){
            				case (int)0: {
HXLINE( 926)					ret = null();
            				}
            				break;
            				case (int)1: {
HXLINE( 926)					ret = (lua_toboolean(l,v) != 0);
            				}
            				break;
            				case (int)3: {
HXLINE( 926)					ret = lua_tonumber(l,v);
            				}
            				break;
            				case (int)4: {
HXLINE( 926)					ret = linc::lua::tostring(l,v);
            				}
            				break;
            				case (int)5: {
HXLINE( 926)					bool array = true;
HXDLIN( 926)					 ::Dynamic ret1 = null();
HXDLIN( 926)					lua_pushnil(l);
HXDLIN( 926)					while((lua_next(l,-2) != 0)){
HXLINE( 926)						if ((lua_type(l,-2) != 3)) {
HXLINE( 926)							array = false;
HXDLIN( 926)							lua_pop(l,2);
HXDLIN( 926)							goto _hx_goto_110;
            						}
HXDLIN( 926)						Float n = lua_tonumber(l,-2);
HXDLIN( 926)						if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 926)							array = false;
HXDLIN( 926)							lua_pop(l,2);
HXDLIN( 926)							goto _hx_goto_110;
            						}
HXDLIN( 926)						lua_pop(l,1);
            					}
            					_hx_goto_110:;
HXDLIN( 926)					if (array) {
HXLINE( 926)						::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 926)						lua_pushnil(l);
HXDLIN( 926)						while((lua_next(l,-2) != 0)){
HXLINE( 926)							int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 926)							 ::Dynamic ret = null();
HXDLIN( 926)							switch((int)(lua_type(l,-1))){
            								case (int)0: {
HXLINE( 926)									ret = null();
            								}
            								break;
            								case (int)1: {
HXLINE( 926)									ret = (lua_toboolean(l,-1) != 0);
            								}
            								break;
            								case (int)3: {
HXLINE( 926)									ret = lua_tonumber(l,-1);
            								}
            								break;
            								case (int)4: {
HXLINE( 926)									ret = linc::lua::tostring(l,-1);
            								}
            								break;
            								case (int)5: {
HXLINE( 926)									bool array = true;
HXDLIN( 926)									 ::Dynamic ret1 = null();
HXDLIN( 926)									lua_pushnil(l);
HXDLIN( 926)									while((lua_next(l,-2) != 0)){
HXLINE( 926)										if ((lua_type(l,-2) != 3)) {
HXLINE( 926)											array = false;
HXDLIN( 926)											lua_pop(l,2);
HXDLIN( 926)											goto _hx_goto_112;
            										}
HXDLIN( 926)										Float n = lua_tonumber(l,-2);
HXDLIN( 926)										if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 926)											array = false;
HXDLIN( 926)											lua_pop(l,2);
HXDLIN( 926)											goto _hx_goto_112;
            										}
HXDLIN( 926)										lua_pop(l,1);
            									}
            									_hx_goto_112:;
HXDLIN( 926)									if (array) {
HXLINE( 926)										::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 926)										lua_pushnil(l);
HXDLIN( 926)										while((lua_next(l,-2) != 0)){
HXLINE( 926)											int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 926)											arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 926)											lua_pop(l,1);
            										}
HXDLIN( 926)										ret1 = arr;
            									}
            									else {
HXLINE( 926)										 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 926)										lua_pushnil(l);
HXDLIN( 926)										while((lua_next(l,-2) != 0)){
HXLINE( 926)											::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 926)											obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 926)											lua_pop(l,1);
            										}
HXDLIN( 926)										ret1 = obj;
            									}
HXDLIN( 926)									ret = ret1;
            								}
            								break;
            								default:{
HXLINE( 926)									ret = null();
HXDLIN( 926)									::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            								}
            							}
HXDLIN( 926)							arr->set(index,ret);
HXDLIN( 926)							lua_pop(l,1);
            						}
HXDLIN( 926)						ret1 = arr;
            					}
            					else {
HXLINE( 926)						 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 926)						lua_pushnil(l);
HXDLIN( 926)						while((lua_next(l,-2) != 0)){
HXLINE( 926)							 ::Dynamic ret = null();
HXDLIN( 926)							switch((int)(lua_type(l,-2))){
            								case (int)0: {
HXLINE( 926)									ret = null();
            								}
            								break;
            								case (int)1: {
HXLINE( 926)									ret = (lua_toboolean(l,-2) != 0);
            								}
            								break;
            								case (int)3: {
HXLINE( 926)									ret = lua_tonumber(l,-2);
            								}
            								break;
            								case (int)4: {
HXLINE( 926)									ret = linc::lua::tostring(l,-2);
            								}
            								break;
            								case (int)5: {
HXLINE( 926)									bool array = true;
HXDLIN( 926)									 ::Dynamic ret1 = null();
HXDLIN( 926)									lua_pushnil(l);
HXDLIN( 926)									while((lua_next(l,-2) != 0)){
HXLINE( 926)										if ((lua_type(l,-2) != 3)) {
HXLINE( 926)											array = false;
HXDLIN( 926)											lua_pop(l,2);
HXDLIN( 926)											goto _hx_goto_116;
            										}
HXDLIN( 926)										Float n = lua_tonumber(l,-2);
HXDLIN( 926)										if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 926)											array = false;
HXDLIN( 926)											lua_pop(l,2);
HXDLIN( 926)											goto _hx_goto_116;
            										}
HXDLIN( 926)										lua_pop(l,1);
            									}
            									_hx_goto_116:;
HXDLIN( 926)									if (array) {
HXLINE( 926)										::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 926)										lua_pushnil(l);
HXDLIN( 926)										while((lua_next(l,-2) != 0)){
HXLINE( 926)											int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 926)											 ::Dynamic ret = null();
HXDLIN( 926)											switch((int)(lua_type(l,-1))){
            												case (int)0: {
HXLINE( 926)													ret = null();
            												}
            												break;
            												case (int)1: {
HXLINE( 926)													ret = (lua_toboolean(l,-1) != 0);
            												}
            												break;
            												case (int)3: {
HXLINE( 926)													ret = lua_tonumber(l,-1);
            												}
            												break;
            												case (int)4: {
HXLINE( 926)													ret = linc::lua::tostring(l,-1);
            												}
            												break;
            												case (int)5: {
HXLINE( 926)													bool array = true;
HXDLIN( 926)													 ::Dynamic ret1 = null();
HXDLIN( 926)													lua_pushnil(l);
HXDLIN( 926)													while((lua_next(l,-2) != 0)){
HXLINE( 926)														if ((lua_type(l,-2) != 3)) {
HXLINE( 926)															array = false;
HXDLIN( 926)															lua_pop(l,2);
HXDLIN( 926)															goto _hx_goto_118;
            														}
HXDLIN( 926)														Float n = lua_tonumber(l,-2);
HXDLIN( 926)														if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 926)															array = false;
HXDLIN( 926)															lua_pop(l,2);
HXDLIN( 926)															goto _hx_goto_118;
            														}
HXDLIN( 926)														lua_pop(l,1);
            													}
            													_hx_goto_118:;
HXDLIN( 926)													if (array) {
HXLINE( 926)														::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 926)														lua_pushnil(l);
HXDLIN( 926)														while((lua_next(l,-2) != 0)){
HXLINE( 926)															int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 926)															arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 926)															lua_pop(l,1);
            														}
HXDLIN( 926)														ret1 = arr;
            													}
            													else {
HXLINE( 926)														 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 926)														lua_pushnil(l);
HXDLIN( 926)														while((lua_next(l,-2) != 0)){
HXLINE( 926)															::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 926)															obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 926)															lua_pop(l,1);
            														}
HXDLIN( 926)														ret1 = obj;
            													}
HXDLIN( 926)													ret = ret1;
            												}
            												break;
            												default:{
HXLINE( 926)													ret = null();
HXDLIN( 926)													::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            												}
            											}
HXDLIN( 926)											arr->set(index,ret);
HXDLIN( 926)											lua_pop(l,1);
            										}
HXDLIN( 926)										ret1 = arr;
            									}
            									else {
HXLINE( 926)										 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 926)										lua_pushnil(l);
HXDLIN( 926)										while((lua_next(l,-2) != 0)){
HXLINE( 926)											 ::Dynamic ret = null();
HXDLIN( 926)											switch((int)(lua_type(l,-2))){
            												case (int)0: {
HXLINE( 926)													ret = null();
            												}
            												break;
            												case (int)1: {
HXLINE( 926)													ret = (lua_toboolean(l,-2) != 0);
            												}
            												break;
            												case (int)3: {
HXLINE( 926)													ret = lua_tonumber(l,-2);
            												}
            												break;
            												case (int)4: {
HXLINE( 926)													ret = linc::lua::tostring(l,-2);
            												}
            												break;
            												case (int)5: {
HXLINE( 926)													bool array = true;
HXDLIN( 926)													 ::Dynamic ret1 = null();
HXDLIN( 926)													lua_pushnil(l);
HXDLIN( 926)													while((lua_next(l,-2) != 0)){
HXLINE( 926)														if ((lua_type(l,-2) != 3)) {
HXLINE( 926)															array = false;
HXDLIN( 926)															lua_pop(l,2);
HXDLIN( 926)															goto _hx_goto_122;
            														}
HXDLIN( 926)														Float n = lua_tonumber(l,-2);
HXDLIN( 926)														if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 926)															array = false;
HXDLIN( 926)															lua_pop(l,2);
HXDLIN( 926)															goto _hx_goto_122;
            														}
HXDLIN( 926)														lua_pop(l,1);
            													}
            													_hx_goto_122:;
HXDLIN( 926)													if (array) {
HXLINE( 926)														::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 926)														lua_pushnil(l);
HXDLIN( 926)														while((lua_next(l,-2) != 0)){
HXLINE( 926)															int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 926)															arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 926)															lua_pop(l,1);
            														}
HXDLIN( 926)														ret1 = arr;
            													}
            													else {
HXLINE( 926)														 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 926)														lua_pushnil(l);
HXDLIN( 926)														while((lua_next(l,-2) != 0)){
HXLINE( 926)															::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 926)															obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 926)															lua_pop(l,1);
            														}
HXDLIN( 926)														ret1 = obj;
            													}
HXDLIN( 926)													ret = ret1;
            												}
            												break;
            												default:{
HXLINE( 926)													ret = null();
HXDLIN( 926)													::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            												}
            											}
HXDLIN( 926)											::String ret1 = ::Std_obj::string(ret);
HXDLIN( 926)											 ::Dynamic ret2 = null();
HXDLIN( 926)											switch((int)(lua_type(l,-1))){
            												case (int)0: {
HXLINE( 926)													ret2 = null();
            												}
            												break;
            												case (int)1: {
HXLINE( 926)													ret2 = (lua_toboolean(l,-1) != 0);
            												}
            												break;
            												case (int)3: {
HXLINE( 926)													ret2 = lua_tonumber(l,-1);
            												}
            												break;
            												case (int)4: {
HXLINE( 926)													ret2 = linc::lua::tostring(l,-1);
            												}
            												break;
            												case (int)5: {
HXLINE( 926)													bool array = true;
HXDLIN( 926)													 ::Dynamic ret = null();
HXDLIN( 926)													lua_pushnil(l);
HXDLIN( 926)													while((lua_next(l,-2) != 0)){
HXLINE( 926)														if ((lua_type(l,-2) != 3)) {
HXLINE( 926)															array = false;
HXDLIN( 926)															lua_pop(l,2);
HXDLIN( 926)															goto _hx_goto_125;
            														}
HXDLIN( 926)														Float n = lua_tonumber(l,-2);
HXDLIN( 926)														if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 926)															array = false;
HXDLIN( 926)															lua_pop(l,2);
HXDLIN( 926)															goto _hx_goto_125;
            														}
HXDLIN( 926)														lua_pop(l,1);
            													}
            													_hx_goto_125:;
HXDLIN( 926)													if (array) {
HXLINE( 926)														::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 926)														lua_pushnil(l);
HXDLIN( 926)														while((lua_next(l,-2) != 0)){
HXLINE( 926)															int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 926)															arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 926)															lua_pop(l,1);
            														}
HXDLIN( 926)														ret = arr;
            													}
            													else {
HXLINE( 926)														 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 926)														lua_pushnil(l);
HXDLIN( 926)														while((lua_next(l,-2) != 0)){
HXLINE( 926)															::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 926)															obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 926)															lua_pop(l,1);
            														}
HXDLIN( 926)														ret = obj;
            													}
HXDLIN( 926)													ret2 = ret;
            												}
            												break;
            												default:{
HXLINE( 926)													ret2 = null();
HXDLIN( 926)													::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            												}
            											}
HXDLIN( 926)											obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 926)											lua_pop(l,1);
            										}
HXDLIN( 926)										ret1 = obj;
            									}
HXDLIN( 926)									ret = ret1;
            								}
            								break;
            								default:{
HXLINE( 926)									ret = null();
HXDLIN( 926)									::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            								}
            							}
HXDLIN( 926)							::String ret1 = ::Std_obj::string(ret);
HXDLIN( 926)							 ::Dynamic ret2 = null();
HXDLIN( 926)							switch((int)(lua_type(l,-1))){
            								case (int)0: {
HXLINE( 926)									ret2 = null();
            								}
            								break;
            								case (int)1: {
HXLINE( 926)									ret2 = (lua_toboolean(l,-1) != 0);
            								}
            								break;
            								case (int)3: {
HXLINE( 926)									ret2 = lua_tonumber(l,-1);
            								}
            								break;
            								case (int)4: {
HXLINE( 926)									ret2 = linc::lua::tostring(l,-1);
            								}
            								break;
            								case (int)5: {
HXLINE( 926)									bool array = true;
HXDLIN( 926)									 ::Dynamic ret = null();
HXDLIN( 926)									lua_pushnil(l);
HXDLIN( 926)									while((lua_next(l,-2) != 0)){
HXLINE( 926)										if ((lua_type(l,-2) != 3)) {
HXLINE( 926)											array = false;
HXDLIN( 926)											lua_pop(l,2);
HXDLIN( 926)											goto _hx_goto_128;
            										}
HXDLIN( 926)										Float n = lua_tonumber(l,-2);
HXDLIN( 926)										if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 926)											array = false;
HXDLIN( 926)											lua_pop(l,2);
HXDLIN( 926)											goto _hx_goto_128;
            										}
HXDLIN( 926)										lua_pop(l,1);
            									}
            									_hx_goto_128:;
HXDLIN( 926)									if (array) {
HXLINE( 926)										::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 926)										lua_pushnil(l);
HXDLIN( 926)										while((lua_next(l,-2) != 0)){
HXLINE( 926)											int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 926)											arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 926)											lua_pop(l,1);
            										}
HXDLIN( 926)										ret = arr;
            									}
            									else {
HXLINE( 926)										 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 926)										lua_pushnil(l);
HXDLIN( 926)										while((lua_next(l,-2) != 0)){
HXLINE( 926)											::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 926)											obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 926)											lua_pop(l,1);
            										}
HXDLIN( 926)										ret = obj;
            									}
HXDLIN( 926)									ret2 = ret;
            								}
            								break;
            								default:{
HXLINE( 926)									ret2 = null();
HXDLIN( 926)									::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            								}
            							}
HXDLIN( 926)							obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 926)							lua_pop(l,1);
            						}
HXDLIN( 926)						ret1 = obj;
            					}
HXDLIN( 926)					ret = ret1;
            				}
            				break;
            				default:{
HXLINE( 926)					ret = null();
HXDLIN( 926)					::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            				}
            			}
HXDLIN( 926)			 ::Dynamic conv = ret;
HXLINE( 928)			return conv;
            		}
HXLINE( 931)		return ::FunkinLua_obj::Function_Continue;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,call,return )

bool FunkinLua_obj::resultIsAllowed( cpp::Reference<lua_State> leLua, ::Dynamic leResult){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_935_resultIsAllowed)
HXLINE( 936)		switch((int)(lua_type(leLua,( (int)(leResult) )))){
            			case (int)0: case (int)1: case (int)3: case (int)4: case (int)5: {
HXLINE( 938)				return true;
            			}
            			break;
            		}
HXLINE( 940)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,resultIsAllowed,return )

void FunkinLua_obj::set(::String variable, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_944_set)
HXLINE( 946)		if (::hx::IsNull( this->lua )) {
HXLINE( 947)			return;
            		}
HXLINE( 950)		::llua::Convert_obj::toLua(this->lua,data);
HXLINE( 951)		lua_setglobal(this->lua,variable);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,set,(void))

bool FunkinLua_obj::getBool(::String variable){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_956_getBool)
HXLINE( 957)		::String result = null();
HXLINE( 958)		lua_getglobal(this->lua,variable);
HXLINE( 959)		 cpp::Reference<lua_State> l = this->lua;
HXDLIN( 959)		 ::Dynamic ret = null();
HXDLIN( 959)		switch((int)(lua_type(l,-1))){
            			case (int)0: {
HXLINE( 959)				ret = null();
            			}
            			break;
            			case (int)1: {
HXLINE( 959)				ret = (lua_toboolean(l,-1) != 0);
            			}
            			break;
            			case (int)3: {
HXLINE( 959)				ret = lua_tonumber(l,-1);
            			}
            			break;
            			case (int)4: {
HXLINE( 959)				ret = linc::lua::tostring(l,-1);
            			}
            			break;
            			case (int)5: {
HXLINE( 959)				bool array = true;
HXDLIN( 959)				 ::Dynamic ret1 = null();
HXDLIN( 959)				lua_pushnil(l);
HXDLIN( 959)				while((lua_next(l,-2) != 0)){
HXLINE( 959)					if ((lua_type(l,-2) != 3)) {
HXLINE( 959)						array = false;
HXDLIN( 959)						lua_pop(l,2);
HXDLIN( 959)						goto _hx_goto_134;
            					}
HXDLIN( 959)					Float n = lua_tonumber(l,-2);
HXDLIN( 959)					if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)						array = false;
HXDLIN( 959)						lua_pop(l,2);
HXDLIN( 959)						goto _hx_goto_134;
            					}
HXDLIN( 959)					lua_pop(l,1);
            				}
            				_hx_goto_134:;
HXDLIN( 959)				if (array) {
HXLINE( 959)					::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)					lua_pushnil(l);
HXDLIN( 959)					while((lua_next(l,-2) != 0)){
HXLINE( 959)						int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)						 ::Dynamic ret = null();
HXDLIN( 959)						switch((int)(lua_type(l,-1))){
            							case (int)0: {
HXLINE( 959)								ret = null();
            							}
            							break;
            							case (int)1: {
HXLINE( 959)								ret = (lua_toboolean(l,-1) != 0);
            							}
            							break;
            							case (int)3: {
HXLINE( 959)								ret = lua_tonumber(l,-1);
            							}
            							break;
            							case (int)4: {
HXLINE( 959)								ret = linc::lua::tostring(l,-1);
            							}
            							break;
            							case (int)5: {
HXLINE( 959)								bool array = true;
HXDLIN( 959)								 ::Dynamic ret1 = null();
HXDLIN( 959)								lua_pushnil(l);
HXDLIN( 959)								while((lua_next(l,-2) != 0)){
HXLINE( 959)									if ((lua_type(l,-2) != 3)) {
HXLINE( 959)										array = false;
HXDLIN( 959)										lua_pop(l,2);
HXDLIN( 959)										goto _hx_goto_136;
            									}
HXDLIN( 959)									Float n = lua_tonumber(l,-2);
HXDLIN( 959)									if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)										array = false;
HXDLIN( 959)										lua_pop(l,2);
HXDLIN( 959)										goto _hx_goto_136;
            									}
HXDLIN( 959)									lua_pop(l,1);
            								}
            								_hx_goto_136:;
HXDLIN( 959)								if (array) {
HXLINE( 959)									::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)									lua_pushnil(l);
HXDLIN( 959)									while((lua_next(l,-2) != 0)){
HXLINE( 959)										int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)										 ::Dynamic ret = null();
HXDLIN( 959)										switch((int)(lua_type(l,-1))){
            											case (int)0: {
HXLINE( 959)												ret = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 959)												ret = (lua_toboolean(l,-1) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 959)												ret = lua_tonumber(l,-1);
            											}
            											break;
            											case (int)4: {
HXLINE( 959)												ret = linc::lua::tostring(l,-1);
            											}
            											break;
            											case (int)5: {
HXLINE( 959)												bool array = true;
HXDLIN( 959)												 ::Dynamic ret1 = null();
HXDLIN( 959)												lua_pushnil(l);
HXDLIN( 959)												while((lua_next(l,-2) != 0)){
HXLINE( 959)													if ((lua_type(l,-2) != 3)) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_138;
            													}
HXDLIN( 959)													Float n = lua_tonumber(l,-2);
HXDLIN( 959)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_138;
            													}
HXDLIN( 959)													lua_pop(l,1);
            												}
            												_hx_goto_138:;
HXDLIN( 959)												if (array) {
HXLINE( 959)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)														arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = arr;
            												}
            												else {
HXLINE( 959)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)														obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = obj;
            												}
HXDLIN( 959)												ret = ret1;
            											}
            											break;
            											default:{
HXLINE( 959)												ret = null();
HXDLIN( 959)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 959)										arr->set(index,ret);
HXDLIN( 959)										lua_pop(l,1);
            									}
HXDLIN( 959)									ret1 = arr;
            								}
            								else {
HXLINE( 959)									 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)									lua_pushnil(l);
HXDLIN( 959)									while((lua_next(l,-2) != 0)){
HXLINE( 959)										 ::Dynamic ret = null();
HXDLIN( 959)										switch((int)(lua_type(l,-2))){
            											case (int)0: {
HXLINE( 959)												ret = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 959)												ret = (lua_toboolean(l,-2) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 959)												ret = lua_tonumber(l,-2);
            											}
            											break;
            											case (int)4: {
HXLINE( 959)												ret = linc::lua::tostring(l,-2);
            											}
            											break;
            											case (int)5: {
HXLINE( 959)												bool array = true;
HXDLIN( 959)												 ::Dynamic ret1 = null();
HXDLIN( 959)												lua_pushnil(l);
HXDLIN( 959)												while((lua_next(l,-2) != 0)){
HXLINE( 959)													if ((lua_type(l,-2) != 3)) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_142;
            													}
HXDLIN( 959)													Float n = lua_tonumber(l,-2);
HXDLIN( 959)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_142;
            													}
HXDLIN( 959)													lua_pop(l,1);
            												}
            												_hx_goto_142:;
HXDLIN( 959)												if (array) {
HXLINE( 959)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)														 ::Dynamic ret = null();
HXDLIN( 959)														switch((int)(lua_type(l,-1))){
            															case (int)0: {
HXLINE( 959)																ret = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret = (lua_toboolean(l,-1) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret = lua_tonumber(l,-1);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret = linc::lua::tostring(l,-1);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret1 = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_144;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_144;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_144:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = obj;
            																}
HXDLIN( 959)																ret = ret1;
            															}
            															break;
            															default:{
HXLINE( 959)																ret = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														arr->set(index,ret);
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = arr;
            												}
            												else {
HXLINE( 959)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														 ::Dynamic ret = null();
HXDLIN( 959)														switch((int)(lua_type(l,-2))){
            															case (int)0: {
HXLINE( 959)																ret = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret = (lua_toboolean(l,-2) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret = lua_tonumber(l,-2);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret = linc::lua::tostring(l,-2);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret1 = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_148;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_148;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_148:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = obj;
            																}
HXDLIN( 959)																ret = ret1;
            															}
            															break;
            															default:{
HXLINE( 959)																ret = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														::String ret1 = ::Std_obj::string(ret);
HXDLIN( 959)														 ::Dynamic ret2 = null();
HXDLIN( 959)														switch((int)(lua_type(l,-1))){
            															case (int)0: {
HXLINE( 959)																ret2 = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret2 = (lua_toboolean(l,-1) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret2 = lua_tonumber(l,-1);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret2 = linc::lua::tostring(l,-1);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_151;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_151;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_151:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret = obj;
            																}
HXDLIN( 959)																ret2 = ret;
            															}
            															break;
            															default:{
HXLINE( 959)																ret2 = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = obj;
            												}
HXDLIN( 959)												ret = ret1;
            											}
            											break;
            											default:{
HXLINE( 959)												ret = null();
HXDLIN( 959)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 959)										::String ret1 = ::Std_obj::string(ret);
HXDLIN( 959)										 ::Dynamic ret2 = null();
HXDLIN( 959)										switch((int)(lua_type(l,-1))){
            											case (int)0: {
HXLINE( 959)												ret2 = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 959)												ret2 = (lua_toboolean(l,-1) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 959)												ret2 = lua_tonumber(l,-1);
            											}
            											break;
            											case (int)4: {
HXLINE( 959)												ret2 = linc::lua::tostring(l,-1);
            											}
            											break;
            											case (int)5: {
HXLINE( 959)												bool array = true;
HXDLIN( 959)												 ::Dynamic ret = null();
HXDLIN( 959)												lua_pushnil(l);
HXDLIN( 959)												while((lua_next(l,-2) != 0)){
HXLINE( 959)													if ((lua_type(l,-2) != 3)) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_154;
            													}
HXDLIN( 959)													Float n = lua_tonumber(l,-2);
HXDLIN( 959)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_154;
            													}
HXDLIN( 959)													lua_pop(l,1);
            												}
            												_hx_goto_154:;
HXDLIN( 959)												if (array) {
HXLINE( 959)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)														arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret = arr;
            												}
            												else {
HXLINE( 959)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)														obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret = obj;
            												}
HXDLIN( 959)												ret2 = ret;
            											}
            											break;
            											default:{
HXLINE( 959)												ret2 = null();
HXDLIN( 959)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 959)										obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 959)										lua_pop(l,1);
            									}
HXDLIN( 959)									ret1 = obj;
            								}
HXDLIN( 959)								ret = ret1;
            							}
            							break;
            							default:{
HXLINE( 959)								ret = null();
HXDLIN( 959)								::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            							}
            						}
HXDLIN( 959)						arr->set(index,ret);
HXDLIN( 959)						lua_pop(l,1);
            					}
HXDLIN( 959)					ret1 = arr;
            				}
            				else {
HXLINE( 959)					 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)					lua_pushnil(l);
HXDLIN( 959)					while((lua_next(l,-2) != 0)){
HXLINE( 959)						 ::Dynamic ret = null();
HXDLIN( 959)						switch((int)(lua_type(l,-2))){
            							case (int)0: {
HXLINE( 959)								ret = null();
            							}
            							break;
            							case (int)1: {
HXLINE( 959)								ret = (lua_toboolean(l,-2) != 0);
            							}
            							break;
            							case (int)3: {
HXLINE( 959)								ret = lua_tonumber(l,-2);
            							}
            							break;
            							case (int)4: {
HXLINE( 959)								ret = linc::lua::tostring(l,-2);
            							}
            							break;
            							case (int)5: {
HXLINE( 959)								bool array = true;
HXDLIN( 959)								 ::Dynamic ret1 = null();
HXDLIN( 959)								lua_pushnil(l);
HXDLIN( 959)								while((lua_next(l,-2) != 0)){
HXLINE( 959)									if ((lua_type(l,-2) != 3)) {
HXLINE( 959)										array = false;
HXDLIN( 959)										lua_pop(l,2);
HXDLIN( 959)										goto _hx_goto_158;
            									}
HXDLIN( 959)									Float n = lua_tonumber(l,-2);
HXDLIN( 959)									if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)										array = false;
HXDLIN( 959)										lua_pop(l,2);
HXDLIN( 959)										goto _hx_goto_158;
            									}
HXDLIN( 959)									lua_pop(l,1);
            								}
            								_hx_goto_158:;
HXDLIN( 959)								if (array) {
HXLINE( 959)									::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)									lua_pushnil(l);
HXDLIN( 959)									while((lua_next(l,-2) != 0)){
HXLINE( 959)										int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)										 ::Dynamic ret = null();
HXDLIN( 959)										switch((int)(lua_type(l,-1))){
            											case (int)0: {
HXLINE( 959)												ret = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 959)												ret = (lua_toboolean(l,-1) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 959)												ret = lua_tonumber(l,-1);
            											}
            											break;
            											case (int)4: {
HXLINE( 959)												ret = linc::lua::tostring(l,-1);
            											}
            											break;
            											case (int)5: {
HXLINE( 959)												bool array = true;
HXDLIN( 959)												 ::Dynamic ret1 = null();
HXDLIN( 959)												lua_pushnil(l);
HXDLIN( 959)												while((lua_next(l,-2) != 0)){
HXLINE( 959)													if ((lua_type(l,-2) != 3)) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_160;
            													}
HXDLIN( 959)													Float n = lua_tonumber(l,-2);
HXDLIN( 959)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_160;
            													}
HXDLIN( 959)													lua_pop(l,1);
            												}
            												_hx_goto_160:;
HXDLIN( 959)												if (array) {
HXLINE( 959)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)														 ::Dynamic ret = null();
HXDLIN( 959)														switch((int)(lua_type(l,-1))){
            															case (int)0: {
HXLINE( 959)																ret = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret = (lua_toboolean(l,-1) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret = lua_tonumber(l,-1);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret = linc::lua::tostring(l,-1);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret1 = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_162;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_162;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_162:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = obj;
            																}
HXDLIN( 959)																ret = ret1;
            															}
            															break;
            															default:{
HXLINE( 959)																ret = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														arr->set(index,ret);
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = arr;
            												}
            												else {
HXLINE( 959)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														 ::Dynamic ret = null();
HXDLIN( 959)														switch((int)(lua_type(l,-2))){
            															case (int)0: {
HXLINE( 959)																ret = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret = (lua_toboolean(l,-2) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret = lua_tonumber(l,-2);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret = linc::lua::tostring(l,-2);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret1 = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_166;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_166;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_166:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = obj;
            																}
HXDLIN( 959)																ret = ret1;
            															}
            															break;
            															default:{
HXLINE( 959)																ret = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														::String ret1 = ::Std_obj::string(ret);
HXDLIN( 959)														 ::Dynamic ret2 = null();
HXDLIN( 959)														switch((int)(lua_type(l,-1))){
            															case (int)0: {
HXLINE( 959)																ret2 = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret2 = (lua_toboolean(l,-1) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret2 = lua_tonumber(l,-1);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret2 = linc::lua::tostring(l,-1);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_169;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_169;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_169:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret = obj;
            																}
HXDLIN( 959)																ret2 = ret;
            															}
            															break;
            															default:{
HXLINE( 959)																ret2 = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = obj;
            												}
HXDLIN( 959)												ret = ret1;
            											}
            											break;
            											default:{
HXLINE( 959)												ret = null();
HXDLIN( 959)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 959)										arr->set(index,ret);
HXDLIN( 959)										lua_pop(l,1);
            									}
HXDLIN( 959)									ret1 = arr;
            								}
            								else {
HXLINE( 959)									 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)									lua_pushnil(l);
HXDLIN( 959)									while((lua_next(l,-2) != 0)){
HXLINE( 959)										 ::Dynamic ret = null();
HXDLIN( 959)										switch((int)(lua_type(l,-2))){
            											case (int)0: {
HXLINE( 959)												ret = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 959)												ret = (lua_toboolean(l,-2) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 959)												ret = lua_tonumber(l,-2);
            											}
            											break;
            											case (int)4: {
HXLINE( 959)												ret = linc::lua::tostring(l,-2);
            											}
            											break;
            											case (int)5: {
HXLINE( 959)												bool array = true;
HXDLIN( 959)												 ::Dynamic ret1 = null();
HXDLIN( 959)												lua_pushnil(l);
HXDLIN( 959)												while((lua_next(l,-2) != 0)){
HXLINE( 959)													if ((lua_type(l,-2) != 3)) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_173;
            													}
HXDLIN( 959)													Float n = lua_tonumber(l,-2);
HXDLIN( 959)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_173;
            													}
HXDLIN( 959)													lua_pop(l,1);
            												}
            												_hx_goto_173:;
HXDLIN( 959)												if (array) {
HXLINE( 959)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)														 ::Dynamic ret = null();
HXDLIN( 959)														switch((int)(lua_type(l,-1))){
            															case (int)0: {
HXLINE( 959)																ret = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret = (lua_toboolean(l,-1) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret = lua_tonumber(l,-1);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret = linc::lua::tostring(l,-1);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret1 = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_175;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_175;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_175:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = obj;
            																}
HXDLIN( 959)																ret = ret1;
            															}
            															break;
            															default:{
HXLINE( 959)																ret = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														arr->set(index,ret);
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = arr;
            												}
            												else {
HXLINE( 959)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														 ::Dynamic ret = null();
HXDLIN( 959)														switch((int)(lua_type(l,-2))){
            															case (int)0: {
HXLINE( 959)																ret = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret = (lua_toboolean(l,-2) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret = lua_tonumber(l,-2);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret = linc::lua::tostring(l,-2);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret1 = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_179;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_179;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_179:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = obj;
            																}
HXDLIN( 959)																ret = ret1;
            															}
            															break;
            															default:{
HXLINE( 959)																ret = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														::String ret1 = ::Std_obj::string(ret);
HXDLIN( 959)														 ::Dynamic ret2 = null();
HXDLIN( 959)														switch((int)(lua_type(l,-1))){
            															case (int)0: {
HXLINE( 959)																ret2 = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret2 = (lua_toboolean(l,-1) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret2 = lua_tonumber(l,-1);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret2 = linc::lua::tostring(l,-1);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_182;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_182;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_182:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret = obj;
            																}
HXDLIN( 959)																ret2 = ret;
            															}
            															break;
            															default:{
HXLINE( 959)																ret2 = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = obj;
            												}
HXDLIN( 959)												ret = ret1;
            											}
            											break;
            											default:{
HXLINE( 959)												ret = null();
HXDLIN( 959)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 959)										::String ret1 = ::Std_obj::string(ret);
HXDLIN( 959)										 ::Dynamic ret2 = null();
HXDLIN( 959)										switch((int)(lua_type(l,-1))){
            											case (int)0: {
HXLINE( 959)												ret2 = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 959)												ret2 = (lua_toboolean(l,-1) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 959)												ret2 = lua_tonumber(l,-1);
            											}
            											break;
            											case (int)4: {
HXLINE( 959)												ret2 = linc::lua::tostring(l,-1);
            											}
            											break;
            											case (int)5: {
HXLINE( 959)												bool array = true;
HXDLIN( 959)												 ::Dynamic ret = null();
HXDLIN( 959)												lua_pushnil(l);
HXDLIN( 959)												while((lua_next(l,-2) != 0)){
HXLINE( 959)													if ((lua_type(l,-2) != 3)) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_185;
            													}
HXDLIN( 959)													Float n = lua_tonumber(l,-2);
HXDLIN( 959)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_185;
            													}
HXDLIN( 959)													lua_pop(l,1);
            												}
            												_hx_goto_185:;
HXDLIN( 959)												if (array) {
HXLINE( 959)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)														 ::Dynamic ret = null();
HXDLIN( 959)														switch((int)(lua_type(l,-1))){
            															case (int)0: {
HXLINE( 959)																ret = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret = (lua_toboolean(l,-1) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret = lua_tonumber(l,-1);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret = linc::lua::tostring(l,-1);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret1 = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_187;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_187;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_187:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = obj;
            																}
HXDLIN( 959)																ret = ret1;
            															}
            															break;
            															default:{
HXLINE( 959)																ret = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														arr->set(index,ret);
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret = arr;
            												}
            												else {
HXLINE( 959)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														 ::Dynamic ret = null();
HXDLIN( 959)														switch((int)(lua_type(l,-2))){
            															case (int)0: {
HXLINE( 959)																ret = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret = (lua_toboolean(l,-2) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret = lua_tonumber(l,-2);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret = linc::lua::tostring(l,-2);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret1 = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_191;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_191;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_191:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = obj;
            																}
HXDLIN( 959)																ret = ret1;
            															}
            															break;
            															default:{
HXLINE( 959)																ret = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														::String ret1 = ::Std_obj::string(ret);
HXDLIN( 959)														 ::Dynamic ret2 = null();
HXDLIN( 959)														switch((int)(lua_type(l,-1))){
            															case (int)0: {
HXLINE( 959)																ret2 = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret2 = (lua_toboolean(l,-1) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret2 = lua_tonumber(l,-1);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret2 = linc::lua::tostring(l,-1);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_194;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_194;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_194:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret = obj;
            																}
HXDLIN( 959)																ret2 = ret;
            															}
            															break;
            															default:{
HXLINE( 959)																ret2 = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret = obj;
            												}
HXDLIN( 959)												ret2 = ret;
            											}
            											break;
            											default:{
HXLINE( 959)												ret2 = null();
HXDLIN( 959)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 959)										obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 959)										lua_pop(l,1);
            									}
HXDLIN( 959)									ret1 = obj;
            								}
HXDLIN( 959)								ret = ret1;
            							}
            							break;
            							default:{
HXLINE( 959)								ret = null();
HXDLIN( 959)								::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            							}
            						}
HXDLIN( 959)						::String ret1 = ::Std_obj::string(ret);
HXDLIN( 959)						 ::Dynamic ret2 = null();
HXDLIN( 959)						switch((int)(lua_type(l,-1))){
            							case (int)0: {
HXLINE( 959)								ret2 = null();
            							}
            							break;
            							case (int)1: {
HXLINE( 959)								ret2 = (lua_toboolean(l,-1) != 0);
            							}
            							break;
            							case (int)3: {
HXLINE( 959)								ret2 = lua_tonumber(l,-1);
            							}
            							break;
            							case (int)4: {
HXLINE( 959)								ret2 = linc::lua::tostring(l,-1);
            							}
            							break;
            							case (int)5: {
HXLINE( 959)								bool array = true;
HXDLIN( 959)								 ::Dynamic ret = null();
HXDLIN( 959)								lua_pushnil(l);
HXDLIN( 959)								while((lua_next(l,-2) != 0)){
HXLINE( 959)									if ((lua_type(l,-2) != 3)) {
HXLINE( 959)										array = false;
HXDLIN( 959)										lua_pop(l,2);
HXDLIN( 959)										goto _hx_goto_197;
            									}
HXDLIN( 959)									Float n = lua_tonumber(l,-2);
HXDLIN( 959)									if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)										array = false;
HXDLIN( 959)										lua_pop(l,2);
HXDLIN( 959)										goto _hx_goto_197;
            									}
HXDLIN( 959)									lua_pop(l,1);
            								}
            								_hx_goto_197:;
HXDLIN( 959)								if (array) {
HXLINE( 959)									::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)									lua_pushnil(l);
HXDLIN( 959)									while((lua_next(l,-2) != 0)){
HXLINE( 959)										int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)										 ::Dynamic ret = null();
HXDLIN( 959)										switch((int)(lua_type(l,-1))){
            											case (int)0: {
HXLINE( 959)												ret = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 959)												ret = (lua_toboolean(l,-1) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 959)												ret = lua_tonumber(l,-1);
            											}
            											break;
            											case (int)4: {
HXLINE( 959)												ret = linc::lua::tostring(l,-1);
            											}
            											break;
            											case (int)5: {
HXLINE( 959)												bool array = true;
HXDLIN( 959)												 ::Dynamic ret1 = null();
HXDLIN( 959)												lua_pushnil(l);
HXDLIN( 959)												while((lua_next(l,-2) != 0)){
HXLINE( 959)													if ((lua_type(l,-2) != 3)) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_199;
            													}
HXDLIN( 959)													Float n = lua_tonumber(l,-2);
HXDLIN( 959)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_199;
            													}
HXDLIN( 959)													lua_pop(l,1);
            												}
            												_hx_goto_199:;
HXDLIN( 959)												if (array) {
HXLINE( 959)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)														arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = arr;
            												}
            												else {
HXLINE( 959)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)														obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = obj;
            												}
HXDLIN( 959)												ret = ret1;
            											}
            											break;
            											default:{
HXLINE( 959)												ret = null();
HXDLIN( 959)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 959)										arr->set(index,ret);
HXDLIN( 959)										lua_pop(l,1);
            									}
HXDLIN( 959)									ret = arr;
            								}
            								else {
HXLINE( 959)									 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)									lua_pushnil(l);
HXDLIN( 959)									while((lua_next(l,-2) != 0)){
HXLINE( 959)										 ::Dynamic ret = null();
HXDLIN( 959)										switch((int)(lua_type(l,-2))){
            											case (int)0: {
HXLINE( 959)												ret = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 959)												ret = (lua_toboolean(l,-2) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 959)												ret = lua_tonumber(l,-2);
            											}
            											break;
            											case (int)4: {
HXLINE( 959)												ret = linc::lua::tostring(l,-2);
            											}
            											break;
            											case (int)5: {
HXLINE( 959)												bool array = true;
HXDLIN( 959)												 ::Dynamic ret1 = null();
HXDLIN( 959)												lua_pushnil(l);
HXDLIN( 959)												while((lua_next(l,-2) != 0)){
HXLINE( 959)													if ((lua_type(l,-2) != 3)) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_203;
            													}
HXDLIN( 959)													Float n = lua_tonumber(l,-2);
HXDLIN( 959)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_203;
            													}
HXDLIN( 959)													lua_pop(l,1);
            												}
            												_hx_goto_203:;
HXDLIN( 959)												if (array) {
HXLINE( 959)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)														 ::Dynamic ret = null();
HXDLIN( 959)														switch((int)(lua_type(l,-1))){
            															case (int)0: {
HXLINE( 959)																ret = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret = (lua_toboolean(l,-1) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret = lua_tonumber(l,-1);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret = linc::lua::tostring(l,-1);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret1 = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_205;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_205;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_205:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = obj;
            																}
HXDLIN( 959)																ret = ret1;
            															}
            															break;
            															default:{
HXLINE( 959)																ret = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														arr->set(index,ret);
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = arr;
            												}
            												else {
HXLINE( 959)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														 ::Dynamic ret = null();
HXDLIN( 959)														switch((int)(lua_type(l,-2))){
            															case (int)0: {
HXLINE( 959)																ret = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret = (lua_toboolean(l,-2) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret = lua_tonumber(l,-2);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret = linc::lua::tostring(l,-2);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret1 = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_209;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_209;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_209:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret1 = obj;
            																}
HXDLIN( 959)																ret = ret1;
            															}
            															break;
            															default:{
HXLINE( 959)																ret = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														::String ret1 = ::Std_obj::string(ret);
HXDLIN( 959)														 ::Dynamic ret2 = null();
HXDLIN( 959)														switch((int)(lua_type(l,-1))){
            															case (int)0: {
HXLINE( 959)																ret2 = null();
            															}
            															break;
            															case (int)1: {
HXLINE( 959)																ret2 = (lua_toboolean(l,-1) != 0);
            															}
            															break;
            															case (int)3: {
HXLINE( 959)																ret2 = lua_tonumber(l,-1);
            															}
            															break;
            															case (int)4: {
HXLINE( 959)																ret2 = linc::lua::tostring(l,-1);
            															}
            															break;
            															case (int)5: {
HXLINE( 959)																bool array = true;
HXDLIN( 959)																 ::Dynamic ret = null();
HXDLIN( 959)																lua_pushnil(l);
HXDLIN( 959)																while((lua_next(l,-2) != 0)){
HXLINE( 959)																	if ((lua_type(l,-2) != 3)) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_212;
            																	}
HXDLIN( 959)																	Float n = lua_tonumber(l,-2);
HXDLIN( 959)																	if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)																		array = false;
HXDLIN( 959)																		lua_pop(l,2);
HXDLIN( 959)																		goto _hx_goto_212;
            																	}
HXDLIN( 959)																	lua_pop(l,1);
            																}
            																_hx_goto_212:;
HXDLIN( 959)																if (array) {
HXLINE( 959)																	::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)																		arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret = arr;
            																}
            																else {
HXLINE( 959)																	 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)																	lua_pushnil(l);
HXDLIN( 959)																	while((lua_next(l,-2) != 0)){
HXLINE( 959)																		::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)																		obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)																		lua_pop(l,1);
            																	}
HXDLIN( 959)																	ret = obj;
            																}
HXDLIN( 959)																ret2 = ret;
            															}
            															break;
            															default:{
HXLINE( 959)																ret2 = null();
HXDLIN( 959)																::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            															}
            														}
HXDLIN( 959)														obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret1 = obj;
            												}
HXDLIN( 959)												ret = ret1;
            											}
            											break;
            											default:{
HXLINE( 959)												ret = null();
HXDLIN( 959)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 959)										::String ret1 = ::Std_obj::string(ret);
HXDLIN( 959)										 ::Dynamic ret2 = null();
HXDLIN( 959)										switch((int)(lua_type(l,-1))){
            											case (int)0: {
HXLINE( 959)												ret2 = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 959)												ret2 = (lua_toboolean(l,-1) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 959)												ret2 = lua_tonumber(l,-1);
            											}
            											break;
            											case (int)4: {
HXLINE( 959)												ret2 = linc::lua::tostring(l,-1);
            											}
            											break;
            											case (int)5: {
HXLINE( 959)												bool array = true;
HXDLIN( 959)												 ::Dynamic ret = null();
HXDLIN( 959)												lua_pushnil(l);
HXDLIN( 959)												while((lua_next(l,-2) != 0)){
HXLINE( 959)													if ((lua_type(l,-2) != 3)) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_215;
            													}
HXDLIN( 959)													Float n = lua_tonumber(l,-2);
HXDLIN( 959)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 959)														array = false;
HXDLIN( 959)														lua_pop(l,2);
HXDLIN( 959)														goto _hx_goto_215;
            													}
HXDLIN( 959)													lua_pop(l,1);
            												}
            												_hx_goto_215:;
HXDLIN( 959)												if (array) {
HXLINE( 959)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 959)														arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret = arr;
            												}
            												else {
HXLINE( 959)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 959)													lua_pushnil(l);
HXDLIN( 959)													while((lua_next(l,-2) != 0)){
HXLINE( 959)														::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 959)														obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 959)														lua_pop(l,1);
            													}
HXDLIN( 959)													ret = obj;
            												}
HXDLIN( 959)												ret2 = ret;
            											}
            											break;
            											default:{
HXLINE( 959)												ret2 = null();
HXDLIN( 959)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 959)										obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 959)										lua_pop(l,1);
            									}
HXDLIN( 959)									ret = obj;
            								}
HXDLIN( 959)								ret2 = ret;
            							}
            							break;
            							default:{
HXLINE( 959)								ret2 = null();
HXDLIN( 959)								::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            							}
            						}
HXDLIN( 959)						obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 959)						lua_pop(l,1);
            					}
HXDLIN( 959)					ret1 = obj;
            				}
HXDLIN( 959)				ret = ret1;
            			}
            			break;
            			default:{
HXLINE( 959)				ret = null();
HXDLIN( 959)				::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            			}
            		}
HXDLIN( 959)		result = ( (::String)(ret) );
HXLINE( 960)		lua_pop(this->lua,1);
HXLINE( 962)		if (::hx::IsNull( result )) {
HXLINE( 963)			return false;
            		}
HXLINE( 968)		return (result == HX_("true",4e,a7,03,4d));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getBool,return )

void FunkinLua_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_972_stop)
HXLINE( 974)		if (::hx::IsNull( this->lua )) {
HXLINE( 975)			return;
            		}
HXLINE( 978)		if (::hx::IsNotNull( this->accessedProps )) {
HXLINE( 979)			this->accessedProps->clear();
            		}
HXLINE( 981)		this->lePlayState->removeLua(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 982)		lua_close(this->lua);
HXLINE( 983)		this->lua = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunkinLua_obj,stop,(void))

int FunkinLua_obj::Function_Stop;

int FunkinLua_obj::Function_Continue;


::hx::ObjectPtr< FunkinLua_obj > FunkinLua_obj::__new(::String script) {
	::hx::ObjectPtr< FunkinLua_obj > __this = new FunkinLua_obj();
	__this->__construct(script);
	return __this;
}

::hx::ObjectPtr< FunkinLua_obj > FunkinLua_obj::__alloc(::hx::Ctx *_hx_ctx,::String script) {
	FunkinLua_obj *__this = (FunkinLua_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FunkinLua_obj), true, "FunkinLua"));
	*(void **)__this = FunkinLua_obj::_hx_vtable;
	__this->__construct(script);
	return __this;
}

FunkinLua_obj::FunkinLua_obj()
{
}

void FunkinLua_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunkinLua);
	HX_MARK_MEMBER_NAME(lua,"lua");
	HX_MARK_MEMBER_NAME(lePlayState,"lePlayState");
	HX_MARK_MEMBER_NAME(scriptName,"scriptName");
	HX_MARK_MEMBER_NAME(gonnaClose,"gonnaClose");
	HX_MARK_MEMBER_NAME(accessedProps,"accessedProps");
	HX_MARK_END_CLASS();
}

void FunkinLua_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lua,"lua");
	HX_VISIT_MEMBER_NAME(lePlayState,"lePlayState");
	HX_VISIT_MEMBER_NAME(scriptName,"scriptName");
	HX_VISIT_MEMBER_NAME(gonnaClose,"gonnaClose");
	HX_VISIT_MEMBER_NAME(accessedProps,"accessedProps");
}

::hx::Val FunkinLua_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { return ::hx::Val( lua ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getBool") ) { return ::hx::Val( getBool_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"luaTrace") ) { return ::hx::Val( luaTrace_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tweenShit") ) { return ::hx::Val( tweenShit_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptName") ) { return ::hx::Val( scriptName ); }
		if (HX_FIELD_EQ(inName,"gonnaClose") ) { return ::hx::Val( gonnaClose ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lePlayState") ) { return ::hx::Val( lePlayState ); }
		if (HX_FIELD_EQ(inName,"cancelTween") ) { return ::hx::Val( cancelTween_dyn() ); }
		if (HX_FIELD_EQ(inName,"cancelTimer") ) { return ::hx::Val( cancelTimer_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"accessedProps") ) { return ::hx::Val( accessedProps ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"resetSpriteTag") ) { return ::hx::Val( resetSpriteTag_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"resultIsAllowed") ) { return ::hx::Val( resultIsAllowed_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cameraFromString") ) { return ::hx::Val( cameraFromString_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getFlxEaseByString") ) { return ::hx::Val( getFlxEaseByString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FunkinLua_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"Function_Stop") ) { outValue = ( Function_Stop ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"Function_Continue") ) { outValue = ( Function_Continue ); return true; }
	}
	return false;
}

::hx::Val FunkinLua_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { lua=inValue.Cast<  cpp::Reference<lua_State> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptName") ) { scriptName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gonnaClose") ) { gonnaClose=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lePlayState") ) { lePlayState=inValue.Cast<  ::PlayState >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"accessedProps") ) { accessedProps=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FunkinLua_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"Function_Stop") ) { Function_Stop=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"Function_Continue") ) { Function_Continue=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void FunkinLua_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("lua",b8,59,52,00));
	outFields->push(HX_("lePlayState",c4,0d,f9,81));
	outFields->push(HX_("scriptName",f6,4d,e0,41));
	outFields->push(HX_("gonnaClose",ff,59,b7,ea));
	outFields->push(HX_("accessedProps",6d,6d,dc,c1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FunkinLua_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  cpp::Reference<lua_State> */ ,(int)offsetof(FunkinLua_obj,lua),HX_("lua",b8,59,52,00)},
	{::hx::fsObject /*  ::PlayState */ ,(int)offsetof(FunkinLua_obj,lePlayState),HX_("lePlayState",c4,0d,f9,81)},
	{::hx::fsString,(int)offsetof(FunkinLua_obj,scriptName),HX_("scriptName",f6,4d,e0,41)},
	{::hx::fsBool,(int)offsetof(FunkinLua_obj,gonnaClose),HX_("gonnaClose",ff,59,b7,ea)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FunkinLua_obj,accessedProps),HX_("accessedProps",6d,6d,dc,c1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FunkinLua_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &FunkinLua_obj::Function_Stop,HX_("Function_Stop",c9,a5,e8,d3)},
	{::hx::fsInt,(void *) &FunkinLua_obj::Function_Continue,HX_("Function_Continue",ae,85,11,8b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FunkinLua_obj_sMemberFields[] = {
	HX_("lua",b8,59,52,00),
	HX_("lePlayState",c4,0d,f9,81),
	HX_("scriptName",f6,4d,e0,41),
	HX_("gonnaClose",ff,59,b7,ea),
	HX_("accessedProps",6d,6d,dc,c1),
	HX_("resetSpriteTag",86,2b,7a,b0),
	HX_("cancelTween",91,12,99,b7),
	HX_("tweenShit",cb,b7,19,83),
	HX_("cancelTimer",eb,27,5e,ae),
	HX_("getFlxEaseByString",b2,e7,5d,b6),
	HX_("cameraFromString",e0,18,60,4a),
	HX_("luaTrace",ad,69,82,94),
	HX_("call",9e,18,ba,41),
	HX_("resultIsAllowed",c1,61,f6,16),
	HX_("set",a2,9b,57,00),
	HX_("getBool",e0,33,9e,13),
	HX_("stop",02,f0,5b,4c),
	::String(null()) };

static void FunkinLua_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FunkinLua_obj::Function_Stop,"Function_Stop");
	HX_MARK_MEMBER_NAME(FunkinLua_obj::Function_Continue,"Function_Continue");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FunkinLua_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FunkinLua_obj::Function_Stop,"Function_Stop");
	HX_VISIT_MEMBER_NAME(FunkinLua_obj::Function_Continue,"Function_Continue");
};

#endif

::hx::Class FunkinLua_obj::__mClass;

static ::String FunkinLua_obj_sStaticFields[] = {
	HX_("Function_Stop",c9,a5,e8,d3),
	HX_("Function_Continue",ae,85,11,8b),
	::String(null())
};

void FunkinLua_obj::__register()
{
	FunkinLua_obj _hx_dummy;
	FunkinLua_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FunkinLua",e7,f3,7b,36);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FunkinLua_obj::__GetStatic;
	__mClass->mSetStaticField = &FunkinLua_obj::__SetStatic;
	__mClass->mMarkFunc = FunkinLua_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FunkinLua_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FunkinLua_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FunkinLua_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FunkinLua_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunkinLua_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunkinLua_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FunkinLua_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_29_boot)
HXDLIN(  29)		Function_Stop = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_30_boot)
HXDLIN(  30)		Function_Continue = 0;
            	}
}

